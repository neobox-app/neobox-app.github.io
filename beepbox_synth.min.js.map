{"version":3,"names":["scaleElementsByFactor","array","factor","i","length","countBits","n","isPowerOf2","Error","Math","round","log","inverseRealFourierTransform","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","PI","cosIncrement","cos","sinIncrement","sin","oscillatorMultiplier","startIndex","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","index","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","Config","_centerWave","wave","sum","average","Float64Array","getDrumWave","_drumWaves","Float32Array","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","lowOctave","highOctave","lowPower","highPower","overalSlope","lowIndex","pow","highIndex","log2","amplitude","radians","generateSineWave","sineWaveLength","toNameMap","dictionary","value","name","result","clamp","min","max","val","scales","realName","flags","blackKeyNameParents","pitchNames","oldKeys","keys","isWhiteKey","basePitch","mixNames","sampleRateNames","tempoMin","tempoMax","reverbRange","blendRange","riffRange","detuneRange","muffRange","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","patternsPerChannelMin","patternsPerChannelMax","instrumentsPerChannelMin","instrumentsPerChannelMax","pitchesPerOctave","drumCount","pitchOctaves","partNames","partCounts","waveNames","waveVolumes","drumNames","drumVolumes","drumBasePitches","drumPitchFilterMult","drumWaveIsSoft","pwmwaveNames","pwmwaveVolumes","filterNames","filterBases","filterDecays","filterVolumes","transitionNames","effectNames","effectVibratos","effectTremolos","effectVibratoDelays","chorusNames","chorusIntervals","chorusOffsets","chorusVolumes","chorusSigns","chorusRiffApp","chorusHarmonizes","harmDisplay","harmNames","fmChorusDisplay","fmChorusNames","imuteNames","imuteValues","octoffNames","octoffValues","volumeNames","volumeValues","volumeMValues","ipanValues","operatorCount","operatorAlgorithmNames","midiAlgorithmNames","operatorModulatedBy","operatorAssociatedCarrier","operatorCarrierCounts","operatorCarrierChorus","operatorAmplitudeMax","operatorFrequencyNames","midiFrequencyNames","operatorFrequencies","operatorHzOffsets","operatorAmplitudeSigns","operatorEnvelopeNames","operatorEnvelopeType","operatorSpecialCustomVolume","operatorEnvelopeSpeed","operatorEnvelopeInverted","operatorFeedbackNames","midiFeedbackNames","operatorFeedbackIndices","pitchChannelTypeNames","pitchChannelTypeValues","drumChannelTypeNames","instrumentTypeNames","oldThemeNames","channelOneBrightColorPallet","channelTwoBrightColorPallet","channelThreeBrightColorPallet","channelFourBrightColorPallet","channelFiveBrightColorPallet","channelSixBrightColorPallet","channelSevenBrightColorPallet","channelEightBrightColorPallet","channelNineBrightColorPallet","channelTenBrightColorPallet","channelElevenBrightColorPallet","channelTwelveBrightColorPallet","channelThirteenBrightColorPallet","channelFourteenBrightColorPallet","channelFifteenBrightColorPallet","channelSixteenBrightColorPallet","channelOneDimColorPallet","channelTwoDimColorPallet","channelThreeDimColorPallet","channelFourDimColorPallet","channelFiveDimColorPallet","channelSixDimColorPallet","channelSevenDimColorPallet","channelEightDimColorPallet","channelNineDimColorPallet","channelTenDimColorPallet","channelElevenDimColorPallet","channelTwelveDimColorPallet","channelThirteenDimColorPallet","channelFourteenDimColorPallet","channelFifteenDimColorPallet","channelSixteenDimColorPallet","pitchChannelColorsDim","pitchChannelColorsBright","pitchNoteColorsDim","pitchNoteColorsBright","drumChannelColorsDim","drumChannelColorsBright","drumNoteColorsDim","drumNoteColorsBright","midiPitchChannelNames","midiDrumChannelNames","midiSustainInstruments","midiDecayInstruments","drumInterval","pitchCount","maxPitch","pitchChannelCountMin","pitchChannelCountMax","drumChannelCountMin","drumChannelCountMax","waves","wavesMixC","pwmwaves","sineWaveMask","sineWave","BitFieldReader","constructor","base64CharCodeToInt","source","this","_bits","_readIndex","charCodeAt","push","read","readLongTail","minValue","minBits","numBits","readPartDuration","readPinCount","readPitchInterval","BitFieldWriter","write","writeLongTail","writePartDuration","writePinCount","writePitchInterval","concat","other","encodeBase64","base64IntToCharCode","buffer","lengthBase64","ceil","Operator","frequency","envelope","reset","copy","makeNotePin","interval","time","volume","makeNote","pitch","start","end","fadeout","pitches","pins","Instrument","type","filter","transition","effect","harm","fmChorus","imute","octoff","chorus","ipan","algorithm","feedbackType","feedbackAmplitude","feedbackEnvelope","operators","setTypeAndReset","Channel","octave","instruments","patterns","bars","Pattern","notes","instrument","cloneNotes","oldNote","newNote","oldPin","Song","string","channels","_fingerprint","undefined","fromBase64String","initToDefault","getChannelCount","pitchChannelCount","drumChannelCount","getChannelUnusedCount","getTimeSig","beatsPerBar","partsPerBeat","barCount","getScaleNKey","scale","key","getChannelIsDrum","channel","getChannelColorDim","getChannelColorBright","getNoteColorDim","getNoteColorBright","andResetChannels","setSongTheme","map","indexOf","mix","sampleRate","loopStart","loopLength","tempo","reverb","blend","riff","detune","muff","patternsPerChannel","instrumentsPerChannel","channelIndex","pattern","bar","toBase64String","bits","_base64IntToCharCode","_variant","_latestNepBoxVersion","encodedSongTheme","encodeURIComponent","o","neededBits","neededInstrumentBits","isDrum","octaveOffset","lastPitch","recentPitches","recentShapes","p","curPart","t","shapeBits","shapePart","startPitch","currentPitch","pitchBends","pin","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","splice","unshift","pop","allPitches","pitchIndex","pitchIter","stringLength","digits","Array","prototype","compressed","charIndex","fromJsonObject","JSON","parse","substring","fromOld","fromNepBox","version","_base64CharCodeToInt","_latestBeepboxVersion","_oldestBeepboxVersion","_oldestNepBoxVersion","beforeThree","beforeFour","beforeFive","beforeSix","instrumentChannelIterator","instrumentIndexIterator","command","themeIndex","songThemeLength","decodeURIComponent","isPitchChannel","instrumentType","isDrums","subStringLength","bitStringLength","bitStringLengthLength","note","newPattern","newNotes","useOldShape","shape","pinObj","pinCount","initialVolume","bendCount","pitchBend","intervalIter","shift","toJsonObject","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","operatorArray","operator","patternArray","noteArray","pointArray","tick","points","sequenceArray","l","octaveScrollBar","sequence","format","_format","theme","introBars","loopBars","ticksPerBeat","beatsPerMinute","getBeatsPerMinute","jsonObject","oldScaleNames","themes","maxInstruments","maxPatterns","maxBars","channelObject","instrumentObject","oldTransitionNames","binary","transitionObject","oldFilterNames","operatorObject","patternObject","maxNoteCount","tickClock","noteObject","k","noteClock","startInterval","pointObject","lowestPitch","highestPitch","getPattern","patternIndex","getPatternInstrument","getPatternInstrumentMute","instrumentIndex","getPatternInstrumentVolume","getChannelFingerprint","channelCount","charCount","join","SynthChannel","sampleLeft","sampleRight","phases","phaseDeltas","volumeStarts","volumeDeltas","volumeLeft","volumeRight","phaseDeltaScale","filterScale","vibratoScale","harmonyMult","harmonyVolumeMult","feedbackOutputs","feedbackMult","feedbackDelta","Synth","warmUpSynthesizer","song","getGeneratedSynthesizer","operatorAmplitudeCurve","playing","isPlaying","playhead","playheadInternal","remainder","floor","beat","part","arpeggio","samplesPerTick","getSamplesPerArpeggio","arpSampleCountdown","totalSamples","samplesPerBar","loopMinCount","totalSeconds","samplesPerSecond","totalBars","effectDuration","effectAngle","effectYMult","limitDecay","pianoPressed","pianoPitch","pianoChannel","liveInputDuration","liveInputStarted","liveInputPitches","liveInputChannel","liveInputEndTime","browserAutomaticallyClearsAudioBuffer","stillGoing","effectPhase","limit","delayLineLeft","delayLineRight","delayPosLeft","delayPosRight","delayFeedback0Left","delayFeedback0Right","delayFeedback1Left","delayFeedback1Right","delayFeedback2Left","delayFeedback2Right","delayFeedback3Left","delayFeedback3Right","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","getChannelData","outputDataR","performance","now","deactivateAudio","synthesize","setSong","spsCalc","activateAudio","window","AudioContext","webkitAudioContext","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","close","maintainLiveInput","play","pause","snapToStart","snapToBar","nextBar","oldBar","prevBar","dataLeft","dataRight","bufferLength","playSong","bufferIndex","ended","generatedSynthesizer","computeOperatorEnvelope","beats","customVolume","curve","attack","speed","computeChannelInstrument","synth","sampleTime","samples","synthChannel","pianoMode","intervalScale","pitchDamping","secondsPerPart","beatsPerPart","partsSinceStart","resetPhases","intervalStart","intervalEnd","transitionVolumeStart","transitionVolumeEnd","envelopeVolumeStart","envelopeVolumeEnd","partTimeStart","partTimeEnd","decayTimeStart","decayTimeEnd","prevNote","nextNote","endPinIndex","startPin","endPin","noteStart","noteEnd","pinStart","pinEnd","tickTimeStart","tickTimeEnd","pinRatioStart","pinRatioEnd","envelopeVolumeTickStart","envelopeVolumeTickEnd","transitionVolumeTickStart","transitionVolumeTickEnd","intervalTickStart","intervalTickEnd","partTimeTickStart","partTimeTickEnd","decayTimeTickStart","decayTimeTickEnd","startRatio","endRatio","volumeConversion","harmonyOffset","endPitch","startFreq","frequencyFromPitch","pitchVolumeStart","pitchVolumeEnd","settingsVolumeMult","filterScaleRate","endFilter","instrumentVolumeMult","volumeEnd","sineVolumeBoost","totalCarrierVolume","carrierCount","isCarrier","associatedCarrierIndex","freqMult","amplitudeCurve","amplitudeMult","volumeStart","volumeMult","feedbackStart","feedbackEnd","fingerprint","generatedSynthesizers","synthSource","line","synthSourceTemplate","replace","outputs","operatorLine","operatorSourceTemplate","modulators","modulatorNumber","feedbackIndices","feedbacks","Function","noteVolume","arpeggioPerSecond","negativePhaseGuard","split","chordSize","drumsetPitch","prevNotePitchIndex","nextNotePitchIndex","active","noteLengthTicks","ticksSinceReleased","liveInputSamplesHeld","lastInterval","lastVolume","stereoVolume1","stereoVolume2","stereoOffset","stereoDelay","sample","volumeDelta","pulseWidth","pulseWidthDelta","filterSample0","filterSample1","intervalMult","intervalVolumeMult"],"sources":["../synth/FFT.ts","../synth/SynthConfig.ts","../synth/usefulFunctions.ts","../synth/song.ts","../synth/synth.ts"],"sourcesContent":["/*\r\nCopyright (C) 2018 John Nesky\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\n\r\n\t// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\n\tinterface NumberArray {\r\n\t\tlength: number;\r\n\t\t[index: number]: number;\r\n\t}\r\n\t\r\n\t// A basic FFT operation scales the overall magnitude of elements by the\r\n\t// square root of the length of the array, √N. Performing a forward FFT and\r\n\t// then an inverse FFT results in the original array, but multiplied by N.\r\n\t// This helper function can be used to compensate for that. \r\n\texport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\t\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\t\tarray[i] *= factor;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction isPowerOf2(n: number): boolean {\r\n\t\treturn !!n && !(n & (n - 1));\r\n\t}\r\n\t\r\n\tfunction countBits(n: number): number {\r\n\t\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\t\treturn Math.round(Math.log(n) / Math.log(2));\r\n\t}\r\n\t\r\n\t// Rearranges the elements of the array, swapping the element at an index\r\n\t// with an element at an index that is the bitwise reverse of the first\r\n\t// index in base 2. Useful for computing the FFT.\r\n\tfunction reverseIndexBits(array: NumberArray): void {\r\n\t\tconst fullArrayLength: number = array.length;\r\n\t\tconst bitCount: number = countBits(fullArrayLength);\r\n\t\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\t\tconst finalShift: number = 16 - bitCount;\r\n\t\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\t\tlet j: number;\r\n\t\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\t\tj = ((j           >> 8) | ((j &   0xff) << 8)) >> finalShift;\r\n\t\t\tif (j > i) {\r\n\t\t\t\tlet temp: number = array[i];\r\n\t\t\t\tarray[i] = array[j];\r\n\t\t\t\tarray[j] = temp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* Commented out functions that BeepBox doesn't use...\r\n\t\r\n\t// Provided for educational purposes. Easier to read than\r\n\t// fastFourierTransform(), but computes the same result.\r\n\t// Takes two parallel arrays representing the real and imaginary elements,\r\n\t// respectively, and returns an array containing two new arrays, which\r\n\t// contain the complex result of the transform.\r\n\texport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\t\tconst fullArrayLength: number = realArray.length;\r\n\t\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\t\tconst realOut: number[] = [];\r\n\t\tconst imagOut: number[] = [];\r\n\t\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t\trealOut[i] = 0.0;\r\n\t\t\timagOut[i] = 0.0;\r\n\t\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [realOut, imagOut];\r\n\t}\r\n\t\r\n\t// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n\t// input real and imaginary arrays. Can be used for both forward and inverse\r\n\t// transforms: swap the order of the arguments for the inverse.\r\n\texport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\t\tconst fullArrayLength: number = realArray.length;\r\n\t\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\t\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\t\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\t\t\r\n\t\treverseIndexBits(realArray);\r\n\t\treverseIndexBits(imagArray);\r\n\t\t\r\n\t\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\t\tconst startIndex1: number = startIndex + 1;\r\n\t\t\tconst startIndex2: number = startIndex + 2;\r\n\t\t\tconst startIndex3: number = startIndex + 3;\r\n\t\t\tconst real0: number = realArray[startIndex ];\r\n\t\t\tconst real1: number = realArray[startIndex1];\r\n\t\t\tconst real2: number = realArray[startIndex2];\r\n\t\t\tconst real3: number = realArray[startIndex3];\r\n\t\t\tconst imag0: number = imagArray[startIndex ];\r\n\t\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\t\tconst realTemp0: number = real0 + real1;\r\n\t\t\tconst realTemp1: number = real0 - real1;\r\n\t\t\tconst realTemp2: number = real2 + real3;\r\n\t\t\tconst realTemp3: number = real2 - real3;\r\n\t\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\t\trealArray[startIndex ] = realTemp0 + realTemp2;\r\n\t\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\t\timagArray[startIndex ] = imagTemp0 + imagTemp2;\r\n\t\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t\t}\r\n\t\t\r\n\t\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\t\tconst halfLength: number = stride >>> 1;\r\n\t\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\t\tlet c: number = 1.0;\r\n\t\t\t\tlet s: number = 0.0;\r\n\t\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\t\tcPrev = c;\r\n\t\t\t\t\tsPrev = s;\r\n\t\t\t\t\tc = cTemp;\r\n\t\t\t\t\ts = sTemp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Computes the Fourier transform from an array of real-valued time-domain\r\n\t// samples. The output is specially formatted for space efficieny: elements\r\n\t// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n\t// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n\t// descending frequency. Overwrites the input array.\r\n\texport function forwardRealFourierTransform(array: NumberArray): void {\r\n\t\tconst fullArrayLength: number = array.length;\r\n\t\tconst totalPasses: number = countBits(fullArrayLength);\r\n\t\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\t\t\r\n\t\treverseIndexBits(array);\r\n\t\t\r\n\t\t// First and second pass.\r\n\t\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\t\tconst index1: number = index + 1;\r\n\t\t\tconst index2: number = index + 2;\r\n\t\t\tconst index3: number = index + 3;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\t\tconst real1: number = array[index1];\r\n\t\t\tconst real2: number = array[index2];\r\n\t\t\tconst real3: number = array[index3];\r\n\t\t\t// no imaginary elements yet since the input is fully real.\r\n\t\t\tconst tempA: number = real0 + real1;\r\n\t\t\tconst tempB: number = real2 + real3;\r\n\t\t\tarray[index ] = tempA + tempB;\r\n\t\t\tarray[index1] = real0 - real1;\r\n\t\t\tarray[index2] = tempA - tempB;\r\n\t\t\tarray[index3] = real2 - real3;\r\n\t\t}\r\n\t\t\r\n\t\t// Third pass.\r\n\t\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\t\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\t\tconst index1: number = index + 1;\r\n\t\t\tconst index3: number = index + 3;\r\n\t\t\tconst index4: number = index + 4;\r\n\t\t\tconst index5: number = index + 5;\r\n\t\t\tconst index7: number = index + 7;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\t\tconst real1: number = array[index1];\r\n\t\t\tconst imag3: number = array[index3];\r\n\t\t\tconst real4: number = array[index4];\r\n\t\t\tconst real5: number = array[index5];\r\n\t\t\tconst imag7: number = array[index7];\r\n\t\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\t\tarray[index ] = real0 + real4;\r\n\t\t\tarray[index1] = real1 + tempA;\r\n\t\t\tarray[index3] = real1 - tempA;\r\n\t\t\tarray[index4] = real0 - real4;\r\n\t\t\tarray[index5] = tempB - imag3;\r\n\t\t\tarray[index7] = tempB + imag3;\r\n\t\t}\r\n\t\t\r\n\t\t// Handle remaining passes.\r\n\t\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\t\tconst subStride: number = 1 << pass;\r\n\t\t\tconst midSubStride: number = subStride >> 1;\r\n\t\t\tconst stride: number = subStride << 1;\r\n\t\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\t\tlet c: number = cosIncrement;\r\n\t\t\t\tlet s: number = -sinIncrement;\r\n\t\t\t\tlet cPrev: number = 1.0;\r\n\t\t\t\tlet sPrev: number = 0.0;\r\n\t\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\r\n\t\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\t\tarray[indexB0] =-imag0 - tempB;\r\n\t\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\t\tcPrev = c;\r\n\t\t\t\t\tsPrev = s;\r\n\t\t\t\t\tc = cTemp;\r\n\t\t\t\t\ts = sTemp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n\t\r\n\t// Computes the inverse Fourier transform from a specially formatted array of\r\n\t// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n\t// the corresponding complex elements, representing cosine wave amplitudes in\r\n\t// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n\t// imaginary values, representing sine wave amplitudes in descending frequency.\r\n\t// Generates real-valued time-domain samples. Overwrites the input array.\r\n\texport function inverseRealFourierTransform(array: NumberArray): void {\r\n\t\tconst fullArrayLength: number = array.length;\r\n\t\tconst totalPasses: number = countBits(fullArrayLength);\r\n\t\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\t\r\n\t\t// Perform all but the last few passes in reverse.\r\n\t\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\t\tconst subStride: number = 1 << pass;\r\n\t\t\tconst midSubStride: number = subStride >> 1;\r\n\t\t\tconst stride: number = subStride << 1;\r\n\t\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\t\t\r\n\t\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\t\tarray[midIndexA] *= 2;\r\n\t\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\t\tarray[midIndexB] *= 2;\r\n\t\t\t\tlet c: number = cosIncrement;\r\n\t\t\t\tlet s: number = -sinIncrement;\r\n\t\t\t\tlet cPrev: number = 1.0;\r\n\t\t\t\tlet sPrev: number = 0.0;\r\n\t\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\r\n\t\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\t\tcPrev = c;\r\n\t\t\t\t\tsPrev = s;\r\n\t\t\t\t\tc = cTemp;\r\n\t\t\t\t\ts = sTemp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t/*\r\n\t\t// Commented out this block (and compensated with an extra pass above)\r\n\t\t// because it's slower in my testing so far.\r\n\t\t// Pass with stride 8.\r\n\t\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\t\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\t\tconst index1: number = index + 1;\r\n\t\t\tconst index2: number = index + 2;\r\n\t\t\tconst index3: number = index + 3;\r\n\t\t\tconst index4: number = index + 4;\r\n\t\t\tconst index5: number = index + 5;\r\n\t\t\tconst index6: number = index + 6;\r\n\t\t\tconst index7: number = index + 7;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\t\tconst real1: number = array[index1];\r\n\t\t\tconst real2: number = array[index2];\r\n\t\t\tconst real3: number = array[index3];\r\n\t\t\tconst imag4: number = array[index4];\r\n\t\t\tconst imag5: number = array[index5];\r\n\t\t\tconst imag6: number = array[index6];\r\n\t\t\tconst imag7: number = array[index7];\r\n\t\t\tconst tempA: number = real1 - real3;\r\n\t\t\tconst tempB: number = imag5 + imag7;\r\n\t\t\tarray[index ] = real0 + imag4;\r\n\t\t\tarray[index1] = real1 + real3;\r\n\t\t\tarray[index2] = real2 * 2;\r\n\t\t\tarray[index3] = imag7 - imag5;\r\n\t\t\tarray[index4] = real0 - imag4;\r\n\t\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\t\tarray[index6] = imag6 * 2;\r\n\t\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t\t}\r\n\t\t*/\r\n\t\t// The final passes with strides 4 and 2, combined into one loop.\r\n\t\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\t\tconst index1: number = index + 1;\r\n\t\t\tconst index2: number = index + 2;\r\n\t\t\tconst index3: number = index + 3;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\t\tconst real1: number = array[index1] * 2;\r\n\t\t\tconst imag2: number = array[index2];\r\n\t\t\tconst imag3: number = array[index3] * 2;\r\n\t\t\tconst tempA: number = real0 + imag2;\r\n\t\t\tconst tempB: number = real0 - imag2;\r\n\t\t\tarray[index ] = tempA + real1;\r\n\t\t\tarray[index1] = tempA - real1;\r\n\t\t\tarray[index2] = tempB + imag3;\r\n\t\t\tarray[index3] = tempB - imag3;\r\n\t\t}\r\n\t\t\r\n\t\treverseIndexBits(array);\r\n\t}\r\n\r\n","/*!\r\nCopyright (c) 2012-2022 John Nesky and contributing authors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\nimport { inverseRealFourierTransform, scaleElementsByFactor } from \"./FFT\";\r\n\r\nexport interface Dictionary<T> {\r\n\t[K: string]: T;\r\n}\r\n\r\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\r\n\tdictionary: Dictionary<T>;\r\n}\r\n\r\nexport interface BeepBoxOption {\r\n\treadonly index: number;\r\n\treadonly name: string;\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n\tcustom,\r\n\tsteady,\r\n\tpunch,\r\n\tflare,\r\n\tpluck,\r\n\ttremolo,\r\n\tflute,\r\n}\r\n\r\nexport const enum InstrumentType {\r\n\tchip = 0,\r\n\tfm = 1,\r\n\tnoise = 2,\r\n\tpwm = 3,\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n\treadonly flags: ReadonlyArray<boolean>;\r\n\treadonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n\treadonly isWhiteKey: boolean;\r\n\treadonly basePitch: number;\r\n}\r\n\r\nexport class Config {\r\n\tpublic static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\t\t{name: \"easy :)\",            realName: \"pentatonic major\",      flags: [true, false,  true, false,  true, false, false,  true, false,  true, false, false]},\r\n\t\t{name: \"easy :(\",            realName: \"pentatonic minor\",      flags: [true, false, false,  true, false,  true, false,  true, false, false,  true, false]},\r\n\t\t{name: \"island :)\",          realName: \"ryukyu\",                flags: [true, false, false, false,  true,  true, false,  true, false, false, false,  true]},\r\n\t\t{name: \"island :(\",          realName: \"pelog selisir\",         flags: [true,  true, false,  true, false, false, false,  true,  true, false, false, false]},\r\n\t\t{name: \"blues :)\",           realName: \"blues major\",           flags: [true, false,  true,  true,  true, false, false,  true, false,  true, false, false]},\r\n\t\t{name: \"blues :(\",           realName: \"blues\",                 flags: [true, false, false,  true, false,  true,  true,  true, false, false,  true, false]},\r\n\t\t{name: \"normal :)\",          realName: \"ionian\",                flags: [true, false,  true, false,  true,  true, false,  true, false,  true, false,  true]},\r\n\t\t{name: \"normal :(\",          realName: \"aeolian\",               flags: [true, false,  true,  true, false,  true, false,  true,  true, false,  true, false]},\r\n\t\t{name: \"dbl harmonic :)\", \t realName: \"double harmonic major\", flags: [true,  true, false, false,  true,  true, false,  true,  true, false, false,  true]},\r\n\t\t{name: \"dbl harmonic :(\",    realName: \"double harmonic minor\", flags: [true, false,  true,  true, false, false,  true,  true,  true, false, false,  true]},\r\n\t\t{name: \"enigma\",             realName: \"whole tone\",            flags: [true, false,  true, false,  true, false,  true, false,  true, false,  true, false]},\r\n\t\t{name: \"expert\",             realName: \"chromatic\",             flags: [true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true]},\r\n\t\t{name: \"monotonic\",          realName: \"monotonic\",             flags: [true, false, false, false, false, false, false, false, false, false, false, false]},\r\n\t\t{name: \"no dabbing\",         realName: \"no dabbing\",            flags: [true,  true, false,  true,  true,  true,  true,  true,  true, false,  true, false]},\r\n\t]);\r\n\tstatic readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\r\n\tstatic readonly pitchNames: ReadonlyArray<string | null> = [\"C\", null, \"D\", null, \"E\", \"F\", null, \"G\", null, \"A\", null, \"B\"];\r\n\tpublic static readonly oldKeys: ReadonlyArray<string | null> = [\"B\", \"A♯\", \"A\", \"G♯\", \"F♯\", \"F\", \"E\", \"D♯\", \"D\", \"C♯\", \"C\"];\r\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\r\n\t\t{name: \"C\",  isWhiteKey:  true, basePitch: 12}, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n\t\t{name: \"C♯\", isWhiteKey: false, basePitch: 13},\r\n\t\t{name: \"D\",  isWhiteKey:  true, basePitch: 14},\r\n\t\t{name: \"D♯\", isWhiteKey: false, basePitch: 15},\r\n\t\t{name: \"E\",  isWhiteKey:  true, basePitch: 16},\r\n\t\t{name: \"F\",  isWhiteKey:  true, basePitch: 17},\r\n\t\t{name: \"F♯\", isWhiteKey: false, basePitch: 18},\r\n\t\t{name: \"G\",  isWhiteKey:  true, basePitch: 19},\r\n\t\t{name: \"G♯\", isWhiteKey: false, basePitch: 20},\r\n\t\t{name: \"A\",  isWhiteKey:  true, basePitch: 21},\r\n\t\t{name: \"A♯\", isWhiteKey: false, basePitch: 22},\r\n\t\t{name: \"B\",  isWhiteKey:  true, basePitch: 23},\r\n\t]);\r\n\tstatic readonly mixNames: ReadonlyArray<string> = [\"Type A (B & S)\", \"Type B (M)\", \"Type C\"];\r\n\tstatic readonly sampleRateNames: ReadonlyArray<string> = [\"44100kHz\", \"48000kHz\", \"default\", \"×4\", \"×2\", \"÷2\", \"÷4\", \"÷8\", \"÷16\"];\r\n\tstatic readonly tempoMin: number = 1;\r\n\tstatic readonly tempoMax: number = 500;\r\n\tstatic readonly reverbRange: number = 5;\r\n\tstatic readonly blendRange: number = 4;\r\n\tstatic readonly riffRange: number = 11;\r\n\tstatic readonly detuneRange: number = 24;\r\n\tstatic readonly muffRange: number = 24;\r\n\tstatic readonly beatsPerBarMin: number = 1;\r\n\tstatic readonly beatsPerBarMax: number = 24;\r\n\tstatic readonly barCountMin: number = 1;\r\n\tstatic readonly barCountMax: number = 256;\r\n\tstatic readonly patternsPerChannelMin: number = 1;\r\n\tstatic readonly patternsPerChannelMax: number = 64;\r\n\tstatic readonly instrumentsPerChannelMin: number = 1;\r\n\tstatic readonly instrumentsPerChannelMax: number = 64;\r\n\tstatic readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\r\n\tstatic readonly drumCount: number = 12;\r\n\tstatic readonly pitchOctaves: number = 7;\r\n\tstatic readonly partNames: ReadonlyArray<string> = [\"÷3 (triplets)\", \"÷4 (standard)\", \"÷6\", \"÷8\", \"÷16 (arpfest)\", \"÷12\", \"÷9\", \"÷5\", \"÷50\", \"÷24\"];\r\n\tstatic readonly partCounts: ReadonlyArray<number> = [3, 4, 6, 8, 16, 12, 9, 5, 50, 24];\r\n\tstatic readonly waveNames: ReadonlyArray<string> = [\"triangle\", \"square\", \"pulse wide\", \"pulse narrow\", \"sawtooth\", \"double saw\", \"double pulse\", \"spiky\", \"plateau\", \"glitch\", \"10% pulse\", \"sunsoft bass\", \"loud pulse\", \"sax\", \"guitar\", \"sine\", \"atari bass\", \"atari pulse\", \"1% pulse\", \"curved sawtooth\", \"viola\", \"brass\", \"acoustic bass\", \"lyre\", \"ramp pulse\", \"piccolo\", \"squaretooth\", \"flatline\", \"pnryshk a (u5)\", \"pnryshk b (riff)\"];\r\n\tstatic readonly waveVolumes: ReadonlyArray<number> = [1.0,        0.5,      0.5,          0.5,            0.65,       0.5,          0.4,            0.4,     0.94,      0.5,      0.5,         1.0,            0.6,          0.1,   0.25,     1.0,    1.0,          1.0,           1.0,        1.0,               1.0,     1.0,     1.0,             0.2,    0.2,          0.9,       0.9,           1.0,        0.4,                 0.5];\r\n\tstatic readonly drumNames: ReadonlyArray<string> = [\"retro\", \"white\", \"periodic\", \"detuned periodic\", \"shine\", \"hollow\", \"deep\", \"cutter\", \"metallic\", \"snare\"/*, \"tom-tom\", \"cymbal\", \"bass\"*/];\r\n\tstatic readonly drumVolumes: ReadonlyArray<number> = [0.25, 1.0, 0.4, 0.3, 0.3, 1.5, 1.5, 0.25, 1.0, 1.0/*, 1.5, 1.5, 1.5*/];\r\n\tstatic readonly drumBasePitches: ReadonlyArray<number> = [69, 69, 69, 69, 69, 96, 120, 96, 96, 69/*, 96, 90, 126*/];\r\n\tstatic readonly drumPitchFilterMult: ReadonlyArray<number> = [100.0, 8.0, 100.0, 100.0, 100.0, 1.0, 100.0, 100.0, 100.0, 100.0/*, 1.0, 1.0, 1.0*/];\r\n\tstatic readonly drumWaveIsSoft: ReadonlyArray<boolean> = [false, true, false, false, false, true, true, false, false, false/*, true, true, true*/];\r\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n\tprivate static readonly _drumWaves: Array<Float32Array | null> = [null, null, null, null, null, null, null, null, null, null/*, null, null, null*/];\r\n\tstatic readonly pwmwaveNames: ReadonlyArray<string> = [\"5%\", \"10%\", \"15%\", \"20%\", \"25%\", \"30%\", \"35%\", \"40%\", \"45%\", \"50%\"];\r\n\tstatic readonly pwmwaveVolumes: ReadonlyArray<number> = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];\r\n\tstatic readonly filterNames: ReadonlyArray<string> = [\"none\", \"sustain sharp\", \"sustain medium\", \"sustain soft\", \"decay sharp\", \"decay medium\", \"decay soft\", \"decay drawn\", \"fade sharp\", \"fade medium\", \"fade soft\", \"ring\", \"muffled\", \"submerged\", \"shift\", \"overtone\", \"woosh\", \"undertone\"];\r\n\tstatic readonly filterBases: ReadonlyArray<number> = [0.0, 2.0, 3.5, 5.0, 1.0, 2.5, 4.0, 1.0, 5.0, 7.5, 10.0, -1.0, 4.0, 6.0, 0.0, 1.0, 2.0, 5.0];\r\n\tstatic readonly filterDecays: ReadonlyArray<number> = [0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 4.0, 0.5, -10.0, -7.0, -4.0, 0.2, 0.2, 0.3, 0.0, 0.0, -6.0, 0.0];\r\n\tstatic readonly filterVolumes: ReadonlyArray<number> = [0.2, 0.4, 0.7, 1.0, 0.5, 0.75, 1.0, 0.5, 0.4, 0.7, 1.0, 0.5, 0.75, 0.4, 0.4, 1.0, 0.5, 1.75];\r\n\tstatic readonly transitionNames: ReadonlyArray<string> = [\"seamless\", \"sudden\", \"smooth\", \"slide\", \"trill\", \"click\", \"bow\", \"blip\"];\r\n\tstatic readonly effectNames: ReadonlyArray<string> = [\"none\", \"vibrato light\", \"vibrato delayed\", \"vibrato heavy\", \"tremolo light\", \"tremolo heavy\", \"alien\", \"stutter\", \"strum\"];\r\n\tstatic readonly effectVibratos: ReadonlyArray<number> = [0.0, 0.15, 0.3, 0.45, 0.0, 0.0, 1.0, 0.0, 0.05];\r\n\tstatic readonly effectTremolos: ReadonlyArray<number> = [0.0, 0.0, 0.0, 0.0, 0.25, 0.5, 0.0, 1.0, 0.025];\r\n\tstatic readonly effectVibratoDelays: ReadonlyArray<number> = [0, 0, 3, 0, 0, 0, 0, 0];\r\n\tstatic readonly chorusNames: ReadonlyArray<string> = [\"union\", \"shimmer\", \"hum\", \"honky tonk\", \"dissonant\", \"fifths\", \"octaves\", \"spinner\", \"detune\", \"bowed\", \"rising\", \"vibrate\", \"fourths\", \"bass\", \"dirty\", \"stationary\", \"harmonic (legacy)\", \"recurve\", \"voiced\", \"fluctuate\"];\r\n\tstatic readonly chorusIntervals: ReadonlyArray<number> = [0.0, 0.02, 0.05, 0.1, 0.25, 3.5, 6, 0.02, 0.0, 0.02, 1.0, 3.5, 4, 0, 0.0, 3.5, 0.0, 0.005, 0.25, 12];\r\n\tstatic readonly chorusOffsets: ReadonlyArray<number> = [0.0, 0.0, 0.0, 0.0, 0.0, 3.5, 6, 0.0, 0.25, 0.0, 0.7, 7, 4, -7, 0.1, 0.0, 0.0, 0.0, 3.0, 0.0];\r\n\tstatic readonly chorusVolumes: ReadonlyArray<number> = [0.9, 0.9, 1.0, 1.0, 0.95, 0.95, 0.9, 1.0, 1.0, 1.0, 0.95, 0.975, 0.95, 1.0, 0.975, 0.9, 1.0, 1.0, 0.9, 1.0];\r\n\tstatic readonly chorusSigns: ReadonlyArray<number> = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0];\r\n\tstatic readonly chorusRiffApp: ReadonlyArray<number> = [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];\r\n\tstatic readonly chorusHarmonizes: ReadonlyArray<boolean> = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];\r\n\tstatic readonly harmDisplay: ReadonlyArray<string> = [\"arpeggio\", \"duet\", \"chord\", \"seventh\", \"half arpeggio\", \"arp-chord\"];\r\n\tstatic readonly harmNames: ReadonlyArray<number> = [0, 1, 2, 3, 4, 5];\r\n\tstatic readonly fmChorusDisplay: ReadonlyArray<string> = [\"none\", \"default\", \"detune\", \"honky tonk\", \"consecutive\", \"alt. major thirds\", \"alt. minor thirds\", \"fifths\", \"octaves\"];\r\n\tstatic readonly fmChorusNames: ReadonlyArray<number> = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n\tstatic readonly imuteNames: ReadonlyArray<string> = [\"◉\", \"◎\"];\r\n\tstatic readonly imuteValues: ReadonlyArray<number> = [1, 0];\r\n\tstatic readonly octoffNames: ReadonlyArray<string> = [\"none\", \"+2 (2 octaves)\",  \"+1 1/2 (octave and fifth)\",  \"+1 (octave)\",  \"+1/2 (fifth)\", \"-1/2 (fifth)\", \"-1 (octave)\", \"-1 1/2 (octave and fifth)\", \"-2 (2 octaves\"];\r\n\tstatic readonly octoffValues: ReadonlyArray<number> = [0.0, 24.0, 19.0, 12.0, 7.0, -7.0, -12.0, -19.0, -24.0];\r\n\tstatic readonly volumeNames: ReadonlyArray<string> = [\"loudest\", \"loud\", \"medium\", \"quiet\", \"quietest\", \"mute\", \"i\", \"couldnt\", \"be\", \"bothered\"];\r\n\tstatic readonly volumeValues: ReadonlyArray<number> = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, -1.0];\r\n\tstatic readonly volumeMValues: ReadonlyArray<number> = [0.0, 0.5, 1.0, 1.5, 2.0, -1.0];\r\n\tstatic readonly ipanValues: ReadonlyArray<number> = [-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0];\r\n\tstatic readonly operatorCount: number = 4;\r\n\tstatic readonly operatorAlgorithmNames: ReadonlyArray<string> = [\r\n\t\t\"1←(2 3 4)\",\r\n\t\t\"1←(2 3←4)\",\r\n\t\t\"1←2←(3 4)\",\r\n\t\t\"1←(2 3)←4\",\r\n\t\t\"1←2←3←4\",\r\n\t\t\"1←3 2←4\",\r\n\t\t\"1 2←(3 4)\",\r\n\t\t\"1 2←3←4\",\r\n\t\t\"(1 2)←3←4\",\r\n\t\t\"(1 2)←(3 4)\",\r\n\t\t\"1 2 3←4\",\r\n\t\t\"(1 2 3)←4\",\r\n\t\t\"1 2 3 4\",\r\n\t];\r\n\tstatic readonly midiAlgorithmNames: ReadonlyArray<string> = [\"1<(2 3 4)\", \"1<(2 3<4)\", \"1<2<(3 4)\", \"1<(2 3)<4\", \"1<2<3<4\", \"1<3 2<4\", \"1 2<(3 4)\", \"1 2<3<4\", \"(1 2)<3<4\", \"(1 2)<(3 4)\", \"1 2 3<4\", \"(1 2 3)<4\", \"1 2 3 4\"];\r\n\tstatic readonly operatorModulatedBy: ReadonlyArray<ReadonlyArray<ReadonlyArray<number>>> = [\r\n\t\t[[2, 3, 4], [],     [],  []],\r\n\t\t[[2, 3],    [],     [4], []],\r\n\t\t[[2],       [3, 4], [],  []],\r\n\t\t[[2, 3],    [4],    [4], []],\r\n\t\t[[2],       [3],    [4], []],\r\n\t\t[[3],       [4],    [],  []],\r\n\t\t[[],        [3, 4], [],  []],\r\n\t\t[[],        [3],    [4], []],\r\n\t\t[[3],       [3],    [4], []],\r\n\t\t[[3, 4],    [3, 4], [],  []],\r\n\t\t[[],        [],     [4], []],\r\n\t\t[[4],       [4],    [4], []],\r\n\t\t[[],        [],     [],  []],\r\n\t];\r\n\tstatic readonly operatorAssociatedCarrier: ReadonlyArray<ReadonlyArray<number>> = [\r\n\t\t[1, 1, 1, 1],\r\n\t\t[1, 1, 1, 1],\r\n\t\t[1, 1, 1, 1],\r\n\t\t[1, 1, 1, 1],\r\n\t\t[1, 1, 1, 1],\r\n\t\t[1, 2, 1, 2],\r\n\t\t[1, 2, 2, 2],\r\n\t\t[1, 2, 2, 2],\r\n\t\t[1, 2, 2, 2],\r\n\t\t[1, 2, 2, 2],\r\n\t\t[1, 2, 3, 3],\r\n\t\t[1, 2, 3, 3],\r\n\t\t[1, 2, 3, 4],\r\n\t];\r\n\tstatic readonly operatorCarrierCounts: ReadonlyArray<number> = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 4];\r\n\tstatic readonly operatorCarrierChorus: ReadonlyArray<ReadonlyArray<number>> = [\r\n\t\t[0.0, 0.0, 0.0, 0.0],\r\n\t\t[0.0, 0.04, -0.073, 0.091],\r\n\t\t[0.5, 0.54, 0.427, 0.591],\r\n\t\t[0.0, 0.26, -0.45, 0.67],\r\n\t\t[0.0, 1.0, 2.0, 3.0],\r\n\t\t[0.0, 4.0, 7.0, 11.0],\r\n\t\t[0.0, 3.0, 7.0, 10.0],\r\n\t\t[0.0, 7.0, 14.0, 21.0],\r\n\t\t[0.0, 12.0, 24.0, 36.0],\r\n\t];\r\n\tstatic readonly operatorAmplitudeMax: number = 15;\r\n\tstatic readonly operatorFrequencyNames: ReadonlyArray<string> = [\"1×\", \"~1×\", \"2×\", \"~2×\", \"3×\", \"4×\", \"5×\", \"6×\", \"7×\", \"8×\", \"9×\", \"10×\", \"11×\", \"13×\", \"16×\", \"20×\"];\r\n\tstatic readonly midiFrequencyNames: ReadonlyArray<string> = [\"1x\", \"~1x\", \"2x\", \"~2x\", \"3x\", \"4x\", \"5x\", \"6x\", \"7x\", \"8x\", \"9x\", \"10x\", \"11x\", \"13x\", \"16x\", \"20x\"];\r\n\tstatic readonly operatorFrequencies: ReadonlyArray<number> =    [1.0, 1.0, 2.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 16.0, 20.0];\r\n\tstatic readonly operatorHzOffsets: ReadonlyArray<number> =      [0.0, 1.5, 0.0, -1.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\r\n\tstatic readonly operatorAmplitudeSigns: ReadonlyArray<number> = [1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];\r\n\tstatic readonly operatorEnvelopeNames: ReadonlyArray<string> = [\"custom\", \"steady\", \"punch\", \"flare 1\", \"flare 2\", \"flare 3\", \"pluck 1\", \"pluck 2\", \"pluck 3\", \"swell 1\", \"swell 2\", \"swell 3\", \"tremolo1\", \"tremolo2\", \"tremolo3\", \"custom flare\", \"custom tremolo\", \"flute 1\", \"flute 2\", \"flute 3\"];\r\n\tstatic readonly operatorEnvelopeType: ReadonlyArray<EnvelopeType> = [EnvelopeType.custom, EnvelopeType.steady, EnvelopeType.punch, EnvelopeType.flare, EnvelopeType.flare, EnvelopeType.flare, EnvelopeType.pluck, EnvelopeType.pluck, EnvelopeType.pluck, EnvelopeType.pluck, EnvelopeType.pluck, EnvelopeType.pluck, EnvelopeType.tremolo, EnvelopeType.tremolo, EnvelopeType.tremolo, EnvelopeType.flare, EnvelopeType.tremolo, EnvelopeType.flute, EnvelopeType.flute, EnvelopeType.flute];\r\n\tstatic readonly operatorSpecialCustomVolume: ReadonlyArray<boolean> = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false];\r\n\tstatic readonly operatorEnvelopeSpeed: ReadonlyArray<number> = [0.0, 0.0, 0.0, 32.0, 8.0, 2.0, 32.0, 8.0, 2.0, 32.0, 8.0, 2.0, 4.0, 2.0, 1.0, 8.0, 0.0, 16.0, 8.0, 4.0];\r\n\tstatic readonly operatorEnvelopeInverted: ReadonlyArray<boolean> = [false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false];\r\n\tstatic readonly operatorFeedbackNames: ReadonlyArray<string> = [\r\n\t\t\"1⟲\",\r\n\t\t\"2⟲\",\r\n\t\t\"3⟲\",\r\n\t\t\"4⟲\",\r\n\t\t\"1⟲ 2⟲\",\r\n\t\t\"3⟲ 4⟲\",\r\n\t\t\"1⟲ 2⟲ 3⟲ \",\r\n\t\t\"2⟲ 3⟲ 4⟲ \",\r\n\t\t\"1⟲ 2⟲ 3⟲ 4⟲ \",\r\n\t\t\"1→2\",\r\n\t\t\"1→3\",\r\n\t\t\"1→4\",\r\n\t\t\"2→3\",\r\n\t\t\"2→4\",\r\n\t\t\"3→4\",\r\n\t\t\"1→3 2→4\",\r\n\t\t\"1→4 2→3\",\r\n\t\t\"1→2→3→4\",\r\n\t\t\"1🗘2\",\r\n\t\t\"1🗘3\",\r\n\t\t\"1🗘4\",\r\n\t\t\"2🗘3\",\r\n\t\t\"2🗘4\",\r\n\t\t\"3🗘4\",\r\n\t];\r\n\tstatic readonly midiFeedbackNames: ReadonlyArray<string> = [\r\n\t\t\"1\",\r\n\t\t\"2\",\r\n\t\t\"3\",\r\n\t\t\"4\",\r\n\t\t\"1 2\",\r\n\t\t\"3 4\",\r\n\t\t\"1 2 3\",\r\n\t\t\"2 3 4\",\r\n\t\t\"1 2 3 4\",\r\n\t\t\"1>2\",\r\n\t\t\"1>3\",\r\n\t\t\"1>4\",\r\n\t\t\"2>3\",\r\n\t\t\"2>4\",\r\n\t\t\"3>4\",\r\n\t\t\"1>3 2>4\",\r\n\t\t\"1>4 2>3\",\r\n\t\t\"1>2>3>4\",\r\n\t\t\"1-2\",\r\n\t\t\"1-3\",\r\n\t\t\"1-4\",\r\n\t\t\"2-3\",\r\n\t\t\"2-4\",\r\n\t\t\"3-4\",\r\n\t];\r\n\tstatic readonly operatorFeedbackIndices: ReadonlyArray<ReadonlyArray<ReadonlyArray<number>>> = [\r\n\t\t[[1], [], [], []],\r\n\t\t[[], [2], [], []],\r\n\t\t[[], [], [3], []],\r\n\t\t[[], [], [], [4]],\r\n\t\t[[1], [2], [], []],\r\n\t\t[[], [], [3], [4]],\r\n\t\t[[1], [2], [3], []],\r\n\t\t[[], [2], [3], [4]],\r\n\t\t[[1], [2], [3], [4]],\r\n\t\t[[], [1], [], []],\r\n\t\t[[], [], [1], []],\r\n\t\t[[], [], [], [1]],\r\n\t\t[[], [], [2], []],\r\n\t\t[[], [], [], [2]],\r\n\t\t[[], [], [], [3]],\r\n\t\t[[], [], [1], [2]],\r\n\t\t[[], [], [2], [1]],\r\n\t\t[[], [1], [2], [3]],\r\n\t\t[[2], [1], [],  []  ],\r\n\t\t[[3], [],  [1], []  ],\r\n\t\t[[4], [],  [],  [1] ],\r\n\t\t[[],  [3], [2], []  ],\r\n\t\t[[],  [4], [],  [2] ],\r\n\t\t[[],  [],  [4], [3] ],\r\n\t];\r\n\tstatic readonly pitchChannelTypeNames: ReadonlyArray<string> = [\"chip\", \"FM (expert)\", \"PWM (beta)\"];\r\n\tstatic readonly pitchChannelTypeValues: ReadonlyArray<number> = [InstrumentType.chip, InstrumentType.fm, InstrumentType.pwm];\r\n\tstatic readonly drumChannelTypeNames: ReadonlyArray<string> = [\"noise\"];\r\n\tstatic readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"PWM\"];\r\n\r\n\tstatic readonly oldThemeNames: ReadonlyArray<string> = [\"Default\", \"ModBox 2.0\", \"Artic\", \"Cinnamon Roll [!]\", \"Ocean\", \"Rainbow [!]\", \"Float [!]\", \"Windows\", \"Grassland\", \"Dessert\", \"Kahootiest\", \"Beam to the Bit [!]\", \"Pretty Egg\", \"Poniryoshka\", \"Gameboy [!]\", \"Woodkid\", \"Midnight\", \"Snedbox\", \"unnamed\", \"Piano [!] [↻]\", \"Halloween\", \"FrozenOver❄️\"];\r\n\r\n\tstatic readonly channelOneBrightColorPallet: string      = \"#25f3ff\";\r\n\tstatic readonly channelTwoBrightColorPallet: string      = \"#44ff44\";\r\n\tstatic readonly channelThreeBrightColorPallet: string    = \"#ffff25\";\r\n\tstatic readonly channelFourBrightColorPallet: string     = \"#ff9752\";\r\n\tstatic readonly channelFiveBrightColorPallet: string     = \"#ff90ff\";\r\n\tstatic readonly channelSixBrightColorPallet: string      = \"#9f31ea\";\r\n\tstatic readonly channelSevenBrightColorPallet: string    = \"#2b6aff\";\r\n\tstatic readonly channelEightBrightColorPallet: string    = \"#00ff9f\";\r\n\tstatic readonly channelNineBrightColorPallet: string     = \"#ffbf00\";\r\n\tstatic readonly channelTenBrightColorPallet: string      = \"#d85d00\";\r\n\tstatic readonly channelElevenBrightColorPallet: string   = \"#ff00a1\";\r\n\tstatic readonly channelTwelveBrightColorPallet: string   = \"#c26afc\";\r\n\tstatic readonly channelThirteenBrightColorPallet: string = \"#ff1616\";\r\n\tstatic readonly channelFourteenBrightColorPallet: string = \"#ffffff\";\r\n\tstatic readonly channelFifteenBrightColorPallet: string  = \"#768dfc\";\r\n\tstatic readonly channelSixteenBrightColorPallet: string  = \"#a5ff00\";\r\n\r\n\tstatic readonly channelOneDimColorPallet: string      = \"#0099a1\";\r\n\tstatic readonly channelTwoDimColorPallet: string      = \"#439143\";\r\n\tstatic readonly channelThreeDimColorPallet: string    = \"#a1a100\";\r\n\tstatic readonly channelFourDimColorPallet: string     = \"#c75000\";\r\n\tstatic readonly channelFiveDimColorPallet: string     = \"#d020d0\";\r\n\tstatic readonly channelSixDimColorPallet: string      = \"#552377\";\r\n\tstatic readonly channelSevenDimColorPallet: string    = \"#221b89\";\r\n\tstatic readonly channelEightDimColorPallet: string    = \"#00995f\";\r\n\tstatic readonly channelNineDimColorPallet: string     = \"#d6b03e\";\r\n\tstatic readonly channelTenDimColorPallet: string      = \"#b25915\";\r\n\tstatic readonly channelElevenDimColorPallet: string   = \"#891a60\";\r\n\tstatic readonly channelTwelveDimColorPallet: string   = \"#965cbc\";\r\n\tstatic readonly channelThirteenDimColorPallet: string = \"#991010\";\r\n\tstatic readonly channelFourteenDimColorPallet: string = \"#aaaaaa\";\r\n\tstatic readonly channelFifteenDimColorPallet: string  = \"#5869BD\";\r\n\tstatic readonly channelSixteenDimColorPallet: string  = \"#7c9b42\";\r\n\r\n\tstatic readonly pitchChannelColorsDim: ReadonlyArray<string>    = [Config.channelOneDimColorPallet, Config.channelTwoDimColorPallet, Config.channelThreeDimColorPallet, Config.channelFourDimColorPallet, Config.channelFiveDimColorPallet, Config.channelSixDimColorPallet, Config.channelSevenDimColorPallet, Config.channelEightDimColorPallet, Config.channelNineDimColorPallet, Config.channelTenDimColorPallet, Config.channelElevenDimColorPallet, Config.channelTwelveDimColorPallet];\r\n\tstatic readonly pitchChannelColorsBright: ReadonlyArray<string> = [Config.channelOneBrightColorPallet, Config.channelTwoBrightColorPallet, Config.channelThreeBrightColorPallet, Config.channelFourBrightColorPallet, Config.channelFiveBrightColorPallet, Config.channelSixBrightColorPallet, Config.channelSevenBrightColorPallet, Config.channelEightBrightColorPallet, Config.channelNineBrightColorPallet, Config.channelTenBrightColorPallet, Config.channelElevenBrightColorPallet, Config.channelTwelveBrightColorPallet];\r\n\tstatic readonly pitchNoteColorsDim: ReadonlyArray<string>       = [Config.channelOneDimColorPallet, Config.channelTwoDimColorPallet, Config.channelThreeDimColorPallet, Config.channelFourDimColorPallet, Config.channelFiveDimColorPallet, Config.channelSixDimColorPallet, Config.channelSevenDimColorPallet, Config.channelEightDimColorPallet, Config.channelNineDimColorPallet, Config.channelTenDimColorPallet, Config.channelElevenDimColorPallet, Config.channelTwelveDimColorPallet];\r\n\tstatic readonly pitchNoteColorsBright: ReadonlyArray<string>    = [Config.channelOneBrightColorPallet, Config.channelTwoBrightColorPallet, Config.channelThreeBrightColorPallet, Config.channelFourBrightColorPallet, Config.channelFiveBrightColorPallet, Config.channelSixBrightColorPallet, Config.channelSevenBrightColorPallet, Config.channelEightBrightColorPallet, Config.channelNineBrightColorPallet, Config.channelTenBrightColorPallet, Config.channelElevenBrightColorPallet, Config.channelTwelveBrightColorPallet];\r\n\tstatic readonly drumChannelColorsDim: ReadonlyArray<string>    = [Config.channelThirteenDimColorPallet, Config.channelFourteenDimColorPallet, Config.channelFifteenDimColorPallet, Config.channelSixteenDimColorPallet];\r\n\tstatic readonly drumChannelColorsBright: ReadonlyArray<string> = [Config.channelThirteenBrightColorPallet, Config.channelFourteenBrightColorPallet, Config.channelFifteenBrightColorPallet, Config.channelSixteenBrightColorPallet];\r\n\tstatic readonly drumNoteColorsDim: ReadonlyArray<string>       = [Config.channelThirteenDimColorPallet, Config.channelFourteenDimColorPallet, Config.channelFifteenDimColorPallet, Config.channelSixteenDimColorPallet];\r\n\tstatic readonly drumNoteColorsBright: ReadonlyArray<string>    = [Config.channelThirteenBrightColorPallet, Config.channelFourteenBrightColorPallet, Config.channelFifteenBrightColorPallet, Config.channelSixteenBrightColorPallet];\r\n\r\n\tstatic readonly midiPitchChannelNames: ReadonlyArray<string> = [\"cyan channel\", \"yellow channel\", \"orange channel\", \"green channel\", \"purple channel\", \"blue channel\"];\r\n\tstatic readonly midiDrumChannelNames: ReadonlyArray<string> = [\"gray channel\", \"brown channel\", \"indigo channel\"];\r\n\tstatic readonly midiSustainInstruments: number[] = [\r\n\t\t0x47, // triangle -> clarinet\r\n\t\t0x50, // square -> square wave\r\n\t\t0x46, // pulse wide -> bassoon\r\n\t\t0x44, // pulse narrow -> oboe\r\n\t\t0x51, // sawtooth -> sawtooth wave\r\n\t\t0x51, // double saw -> sawtooth wave\r\n\t\t0x51, // double pulse -> sawtooth wave\r\n\t\t0x51, // spiky -> sawtooth wave\r\n\t\t0x4A, // plateau -> recorder\r\n\t];\r\n\tstatic readonly midiDecayInstruments: number[] = [\r\n\t\t0x2E, // triangle -> harp\r\n\t\t0x2E, // square -> harp\r\n\t\t0x06, // pulse wide -> harpsichord\r\n\t\t0x18, // pulse narrow -> nylon guitar\r\n\t\t0x19, // sawtooth -> steel guitar\r\n\t\t0x19, // double saw -> steel guitar\r\n\t\t0x6A, // double pulse -> shamisen\r\n\t\t0x6A, // spiky -> shamisen\r\n\t\t0x21, // plateau -> fingered bass\r\n\t];\r\n\tstatic readonly drumInterval: number = 6;\r\n\tstatic readonly pitchCount: number = 37;\r\n\tstatic readonly maxPitch: number = 84;\r\n\tstatic readonly pitchChannelCountMin: number = 0;\r\n\tstatic readonly pitchChannelCountMax: number = 12;\r\n\tstatic readonly drumChannelCountMin: number = 0;\r\n\tstatic readonly drumChannelCountMax: number = 4;\r\n\tstatic readonly waves: ReadonlyArray<Float64Array> = [\r\n\t\tConfig._centerWave([1.0/15.0, 3.0/15.0, 5.0/15.0, 7.0/15.0, 9.0/15.0, 11.0/15.0, 13.0/15.0, 15.0/15.0, 15.0/15.0, 13.0/15.0, 11.0/15.0, 9.0/15.0, 7.0/15.0, 5.0/15.0, 3.0/15.0, 1.0/15.0, -1.0/15.0, -3.0/15.0, -5.0/15.0, -7.0/15.0, -9.0/15.0, -11.0/15.0, -13.0/15.0, -15.0/15.0, -15.0/15.0, -13.0/15.0, -11.0/15.0, -9.0/15.0, -7.0/15.0, -5.0/15.0, -3.0/15.0, -1.0/15.0]),\r\n\t\tConfig._centerWave([1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0/31.0, 3.0/31.0, 5.0/31.0, 7.0/31.0, 9.0/31.0, 11.0/31.0, 13.0/31.0, 15.0/31.0, 17.0/31.0, 19.0/31.0, 21.0/31.0, 23.0/31.0, 25.0/31.0, 27.0/31.0, 29.0/31.0, 31.0/31.0, -31.0/31.0, -29.0/31.0, -27.0/31.0, -25.0/31.0, -23.0/31.0, -21.0/31.0, -19.0/31.0, -17.0/31.0, -15.0/31.0, -13.0/31.0, -11.0/31.0, -9.0/31.0, -7.0/31.0, -5.0/31.0, -3.0/31.0, -1.0/31.0]),\r\n\t\tConfig._centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]),\r\n\t\tConfig._centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0,1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]),\r\n\t\tConfig._centerWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]),\r\n\t\tConfig._centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]),\r\n\t\tConfig._centerWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]),\r\n\t\tConfig._centerWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]),\r\n\t\tConfig._centerWave([0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]),\r\n\t\tConfig._centerWaver\n\t\tConfig._centerWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]),\r\n\t\tConfig._centerWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]),\r\n\t\tConfig._centerWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]),\r\n\t\tConfig._centerWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]),\r\n\t\tConfig._centerWave([6.1, -2.9, 1.4, -2.9]),\r\n\t\tConfig._centerWave([1, 4, 2, 1, -0.1, -1, -0.12]),\r\n\t\tConfig._centerWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]),\r\n\t\tConfig._centerWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]),\r\n\t\tConfig._centerWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]),\r\n\t\tConfig._centerWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]),\r\n\t];\r\n\tstatic readonly wavesMixC: ReadonlyArray<Float64Array> = [\r\n\t\tConfig._centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]),\r\n\t\tConfig._centerWave([1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]),\r\n\t\tConfig._centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]),\r\n\t\tConfig._centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0,1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]),\r\n\t\tConfig._centerWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]),\r\n\t\tConfig._centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]),\r\n\t\tConfig._centerWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]),\r\n\t\tConfig._centerWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]),\r\n\t\tConfig._centerWave([0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]),\r\n\t\tConfig._centerWaver\n\t\tConfig._centerWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]),\r\n\t\tConfig._centerWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]),\r\n\t\tConfig._centerWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]),\r\n\t\tConfig._centerWave([0.7, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -0.7]),\r\n\t\tConfig._centerWave([1.0, -1.0, 4.0, 2.15, 4.1, 5.05, 0.0, -0.05, 1.0]),\r\n\t\tConfig._centerWave([4.5, -1.7, 1.0, -1.7]),\r\n\t\tConfig._centerWave([0.1, 0.4, 0.2, 0.1, -0.1, -1, -0.12]),\r\n\t\tConfig._centerWave([.03, .13, .30, 1.0, 0.0, -.26]),\r\n\t\tConfig._centerWave([2, 1.75, 1.5, 1.25, 1, .75, .5, .25, 0.0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75]),\r\n\t\tConfig._centerWave([1.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0]),\r\n\t\tConfig._centerWave([-1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, -1.0]),\r\n\t];\r\n\tstatic readonly pwmwaves: ReadonlyArray<Float64Array> = [\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t];\r\n\tstatic readonly sineWaveLength: number = 1 << 8; // 256\r\n\tstatic readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n\tstatic readonly sineWave: Float64Array = Config.generateSineWave();\r\n\t\r\n\tprivate static _centerWave(wave: Array<number>): Float64Array {\r\n\t\tlet sum: number = 0.0;\r\n\t\tfor (let i: number = 0; i < wave.length; i++) sum += wave[i];\r\n\t\tconst average: number = sum / wave.length;\r\n\t\tfor (let i: number = 0; i < wave.length; i++) wave[i] -= average;\r\n\t\treturn new Float64Array(wave);\r\n\t}\r\n\t\r\n\tstatic getDrumWave(index: number): Float32Array {\r\n\t\tlet wave: Float32Array | null = Config._drumWaves[index];\r\n\t\tif (wave == null) {\r\n\t\t\twave = new Float32Array(32768);\r\n\t\t\tConfig._drumWaves[index] = wave;\r\n\t\t\t\r\n\t\t\tif (index == 0) {\r\n\t\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer += 1 << 14;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 1) {\r\n\t\t\t\t// White noise is just random values for each sample.\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 2) {\r\n\t\t\t\t// \"periodic\" drum.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer += 2 << 14;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 3) {\r\n\t\t\t\t// \"detuned periodic\" drum.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32767; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 2;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer += 4 << 14;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 4) {\r\n\t\t\t\t// \"shine\" drum.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 5) {\r\n\t\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 10, 11, 1, 1, 0);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 11, 14, -2, -2, 0);\r\n\t\t\t\tinverseRealFourierTransform(wave);\r\n\t\t\t\tscaleElementsByFactor(wave, 1.0 / Math.sqrt(wave.length));\r\n\t\t\t} else if (index == 6) {\r\n\t\t\t\t// \"deep\" drum, designed in frequency space and then converted via FFT:\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 1, 10, 1, 1, 0);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 20, 14, -2, -2, 0);\r\n\t\t\t\tinverseRealFourierTransform(wave);\r\n\t\t\t\tscaleElementsByFactor(wave, 1.0 / Math.sqrt(wave.length));\r\n\t\t\t} else if (index == 7) {\r\n\t\t\t\t// \"cutter\" drum.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * Math.random();\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer += 15 << 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 8) {\r\n\t\t\t\t// \"metallic\" drum.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 + 0.5;\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer -= 10 << 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 9) {\r\n\t\t\t\t// \"snare\" drum.\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t\t}\r\n\t\t\t/*\r\n\t\t\t} else if (index == 10) {\r\n\t\t\t\t// \"tom-tom\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 10, 14, 0, -4, 0);\r\n\t\t\t\tinverseRealFourierTransform(wave);\r\n\t\t\t\tscaleElementsByFactor(wave, 1.0 / Math.sqrt(wave.length));\r\n\t\t\t} else if (index == 11) {\r\n\t\t\t\t// \"cymbal\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 9, 9.4, -1, -1, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 9.7, 10, -1, -1, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 10.3, 10.6, -1, -1, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 10.9, 11.1, -1, -1, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 11.3, 11.4, 0, 0, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 11.5, 11.7, 1.5, 1.5, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 11.7, 12, -1, -1, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 12, 12.1, 2, 2, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 12.1, 12.6, 0, 2, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 12.6, 13, 0, 0, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 13, 14, 1, -3, -0.5);\r\n\t\t\t\tinverseRealFourierTransform(wave);\r\n\t\t\t\tscaleElementsByFactor(wave, 1.0 / Math.sqrt(wave.length));\r\n\t\t\t} else if (index == 12) {\r\n\t\t\t\t// \"bass\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 7, 8, -2, 4, 0);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 8, 9, 4, -2, 0);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 9, 14, -2, -6, 0);\r\n\t\t\t\tinverseRealFourierTransform(wave);\r\n\t\t\t\tscaleElementsByFactor(wave, 1.0 / Math.sqrt(wave.length));\r\n\t\t\t*/\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn wave;\r\n\t}\r\n\t\r\n\tprivate static drawNoiseSpectrum(wave: Float32Array, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overalSlope: number): void {\r\n\t\tconst referenceOctave: number = 11;\r\n\t\tconst referenceIndex: number = 1 << referenceOctave;\r\n\t\tconst lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n\t\tconst highIndex: number = Math.pow(2, highOctave) | 0;\r\n\t\tconst log2: number = Math.log(2);\r\n\t\tfor (let i: number = lowIndex; i < highIndex; i++) {\r\n\t\t\tlet amplitude: number = Math.pow(2, lowPower + (highPower - lowPower) * (Math.log(i) / log2 - lowOctave) / (highOctave - lowOctave));\r\n\t\t\tamplitude *= Math.pow(i / referenceIndex, overalSlope);\r\n\t\t\tconst radians: number = Math.random() * Math.PI * 2.0;\r\n\t\t\twave[i] = Math.cos(radians) * amplitude;\r\n\t\t\twave[32768 - i] = Math.sin(radians) * amplitude;\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate static generateSineWave(): Float64Array {\r\n\t\tconst wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n\t\tfor (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n\t\t\twave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n\t\t}\r\n\t\treturn wave;\r\n\t}\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n\tconst dictionary: Dictionary<T> = {};\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tconst value: any = array[i];\r\n\t\tvalue.index = i;\r\n\t\tdictionary[value.name] = <T> value;\r\n\t}\r\n\tconst result: DictionaryArray<T> = <DictionaryArray<T>> <any> array;\r\n\tresult.dictionary = dictionary;\r\n\treturn result;\r\n}","\texport function clamp(min: number, max: number, val: number): number {\r\n\t\tmax = max - 1;\r\n\t\tif (val <= max) {\r\n\t\t\tif (val >= min) return val;\r\n\t\t\telse return min;\r\n\t\t} else {\r\n\t\t\treturn max;\r\n\t\t}\r\n\t}","    import { SongTagCode, CharCode, } from \"./tagCodes\";\r\n    import { Config, Dictionary, InstrumentType } from \"./SynthConfig\";\r\n\timport { clamp } from \"./usefulFunctions\";\r\n    \r\n    export class BitFieldReader {\r\n        private _bits: number[] = [];\r\n        private _readIndex: number = 0;\r\n        \r\n        constructor(base64CharCodeToInt: ReadonlyArray<number>, source: string, startIndex: number, stopIndex: number) {\r\n            for (let i: number = startIndex; i < stopIndex; i++) {\r\n                const value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n                this._bits.push((value >> 5) & 0x1);\r\n                this._bits.push((value >> 4) & 0x1);\r\n                this._bits.push((value >> 3) & 0x1);\r\n                this._bits.push((value >> 2) & 0x1);\r\n                this._bits.push((value >> 1) & 0x1);\r\n                this._bits.push( value       & 0x1);\r\n            }\r\n        }\r\n        \r\n        public read(bitCount: number): number {\r\n            let result: number = 0;\r\n            while (bitCount > 0) {\r\n                result = result << 1;\r\n                result += this._bits[this._readIndex++];\r\n                bitCount--;\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        public readLongTail(minValue: number, minBits: number): number {\r\n            let result: number = minValue;\r\n            let numBits: number = minBits;\r\n            while (this._bits[this._readIndex++]) {\r\n                result += 1 << numBits;\r\n                numBits++;\r\n            }\r\n            while (numBits > 0) {\r\n                numBits--;\r\n                if (this._bits[this._readIndex++]) {\r\n                    result += 1 << numBits;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        public readPartDuration(): number {\r\n            return this.readLongTail(1, 2);\r\n        }\r\n        \r\n        public readPinCount(): number {\r\n            return this.readLongTail(1, 0);\r\n        }\r\n        \r\n        public readPitchInterval(): number {\r\n            if (this.read(1)) {\r\n                return -this.readLongTail(1, 3);\r\n            } else {\r\n                return this.readLongTail(1, 3);\r\n            }\r\n        }\r\n    }\r\n    \r\n    export class BitFieldWriter {\r\n        private _bits: number[] = [];\r\n        \r\n        public write(bitCount: number, value: number): void {\r\n            bitCount--;\r\n            while (bitCount >= 0) {\r\n                this._bits.push((value >>> bitCount) & 1);\r\n                bitCount--;\r\n            }\r\n        }\r\n        \r\n        public writeLongTail(minValue: number, minBits: number, value: number): void {\r\n            if (value < minValue) throw new Error(\"value out of bounds\");\r\n            value -= minValue;\r\n            let numBits: number = minBits;\r\n            while (value >= (1 << numBits)) {\r\n                this._bits.push(1);\r\n                value -= 1 << numBits;\r\n                numBits++;\r\n            }\r\n            this._bits.push(0);\r\n            while (numBits > 0) {\r\n                numBits--;\r\n                this._bits.push((value >>> numBits) & 1);\r\n            }\r\n        }\r\n        \r\n        public writePartDuration(value: number): void {\r\n            this.writeLongTail(1, 2, value);\r\n        }\r\n        \r\n        public writePinCount(value: number): void {\r\n            this.writeLongTail(1, 0, value);\r\n        }\r\n        \r\n        public writePitchInterval(value: number): void {\r\n            if (value < 0) {\r\n                this.write(1, 1); // sign\r\n                this.writeLongTail(1, 3, -value);\r\n            } else {\r\n                this.write(1, 0); // sign\r\n                this.writeLongTail(1, 3, value);\r\n            }\r\n        }\r\n        \r\n        public concat(other: BitFieldWriter): void {\r\n            this._bits = this._bits.concat(other._bits);\r\n        }\r\n        \r\n        public encodeBase64(base64IntToCharCode: ReadonlyArray<number>, buffer: number[]): number[] {\r\n            for (let i: number = 0; i < this._bits.length; i += 6) {\r\n                const value: number = (this._bits[i] << 5) | (this._bits[i+1] << 4) | (this._bits[i+2] << 3) | (this._bits[i+3] << 2) | (this._bits[i+4] << 1) | this._bits[i+5];\r\n                buffer.push(base64IntToCharCode[value]);\r\n            }\r\n            return buffer;\r\n        }\r\n        \r\n        public lengthBase64(): number {\r\n            return Math.ceil(this._bits.length / 6);\r\n        }\r\n    }\r\n\r\n\texport class Operator {\r\n\t\tpublic frequency: number = 0;\r\n\t\tpublic amplitude: number = 0;\r\n\t\tpublic envelope: number = 0;\r\n\t\t\r\n\t\tconstructor(index: number) {\r\n\t\t\tthis.reset(index);\r\n\t\t}\r\n\t\t\r\n\t\tpublic reset(index: number): void {\r\n\t\t\tthis.frequency = 0;\r\n\t\t\tthis.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n\t\t\tthis.envelope = 1;\r\n\t\t}\r\n\t\t\r\n\t\tpublic copy(other: Operator): void {\r\n\t\t\tthis.frequency = other.frequency;\r\n\t\t\tthis.amplitude = other.amplitude;\r\n\t\t\tthis.envelope = other.envelope;\r\n\t\t}\r\n\t}   \r\n\r\n    export interface NotePin {\r\n\t\tinterval: number;\r\n\t\ttime: number;\r\n\t\tvolume: number;\r\n\t}\r\n\t\r\n\texport function makeNotePin(interval: number, time: number, volume: number): NotePin {\r\n\t\treturn {interval: interval, time: time, volume: volume};\r\n\t}\r\n\t\r\n\texport interface Note {\r\n\t\tpitches: number[];\r\n\t\tpins: NotePin[];\r\n\t\tstart: number;\r\n\t\tend: number;\r\n\t}\r\n\t\r\n\texport function makeNote(pitch: number, start: number, end: number, volume: number, fadeout: boolean = false) {\r\n\t\treturn {\r\n\t\t\tpitches: [pitch],\r\n\t\t\tpins: [makeNotePin(0, 0, volume), makeNotePin(0, end - start, fadeout ? 0 : volume)],\r\n\t\t\tstart: start,\r\n\t\t\tend: end,\r\n\t\t};\r\n\t}\r\n\r\nexport class Instrument {\r\n\t\tpublic type: InstrumentType = 0;\r\n\t\tpublic wave: number = 1;\r\n\t\tpublic filter: number = 1;\r\n\t\tpublic transition: number = 1;\r\n\t\tpublic effect: number = 0;\r\n\t\tpublic harm: number = 0;\r\n\t\tpublic fmChorus: number = 1;\r\n\t\tpublic imute: number = 0;\r\n\t\tpublic octoff: number = 0;\r\n\t\tpublic chorus: number = 0;\r\n\t\tpublic volume: number = 0;\r\n\t\tpublic ipan: number = 4;\r\n\t\tpublic algorithm: number = 0;\r\n\t\tpublic feedbackType: number = 0;\r\n\t\tpublic feedbackAmplitude: number = 0;\r\n\t\tpublic feedbackEnvelope: number = 1;\r\n\t\tpublic readonly operators: Operator[] = [];\r\n\t\t\r\n\t\tconstructor() {\r\n\t\t\tfor (let i = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\tthis.operators.push(new Operator(i));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic reset(): void {\r\n\t\t\tthis.type = 0;\r\n\t\t\tthis.wave = 1;\r\n\t\t\tthis.filter = 1;\r\n\t\t\tthis.transition = 1;\r\n\t\t\tthis.effect = 0;\r\n\t\t\tthis.harm = 0;\r\n\t\t\tthis.fmChorus = 1;\r\n\t\t\tthis.imute = 0;\r\n\t\t\tthis.ipan = 4;\r\n\t\t\tthis.octoff = 0;\r\n\t\t\tthis.chorus = 0;\r\n\t\t\tthis.volume = 0;\r\n\t\t\tthis.algorithm = 0;\r\n\t\t\tthis.feedbackType = 0;\r\n\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\tthis.feedbackEnvelope = 1;\r\n\t\t\tfor (let i: number = 0; i < this.operators.length; i++) {\r\n\t\t\t\tthis.operators[i].reset(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic setTypeAndReset(type: InstrumentType): void {\r\n\t\t\tthis.type = type;\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase InstrumentType.chip:\r\n\t\t\t\t\tthis.wave = 1;\r\n\t\t\t\t\tthis.filter = 1;\r\n\t\t\t\t\tthis.transition = 1;\r\n\t\t\t\t\tthis.effect = 0;\r\n\t\t\t\t\tthis.harm = 0;\r\n\t\t\t\t\tthis.imute = 0;\r\n\t\t\t\t\tthis.ipan = 4;\r\n\t\t\t\t\tthis.octoff = 0;\r\n\t\t\t\t\tthis.chorus = 0;\r\n\t\t\t\t\tthis.volume = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t// @TODO: Investigate whether this being incorrect leads to\r\n\t\t\t\t// any observable issues.\r\n\t\t\t\tcase InstrumentType.fm:\r\n\t\t\t\t\tthis.wave = 1;\r\n\t\t\t\t\tthis.transition = 1;\r\n\t\t\t\t\tthis.volume = 0;\r\n\t\t\t\t\tthis.imute = 0;\r\n\t\t\t\t\tthis.ipan = 4;\r\n\t\t\t\t\tthis.harm = 0;\r\n\t\t\t\t\tthis.octoff = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase InstrumentType.noise:\r\n\t\t\t\t\tthis.transition = 1;\r\n\t\t\t\t\tthis.octoff = 0;\r\n\t\t\t\t\tthis.fmChorus = 1;\r\n\t\t\t\t\tthis.ipan = 4;\r\n\t\t\t\t\tthis.effect = 0;\r\n\t\t\t\t\tthis.algorithm = 0;\r\n\t\t\t\t\tthis.feedbackType = 0;\r\n\t\t\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\t\t\tthis.feedbackEnvelope = 1;\r\n\t\t\t\t\tthis.volume = 0;\r\n\t\t\t\t\tfor (let i: number = 0; i < this.operators.length; i++) {\r\n\t\t\t\t\t\tthis.operators[i].reset(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase InstrumentType.pwm:\r\n\t\t\t\t\tthis.wave = 1;\r\n\t\t\t\t\tthis.filter = 1;\r\n\t\t\t\t\tthis.transition = 1;\r\n\t\t\t\t\tthis.effect = 0;\r\n\t\t\t\t\tthis.harm = 0;\r\n\t\t\t\t\tthis.imute = 0;\r\n\t\t\t\t\tthis.ipan = 4;\r\n\t\t\t\t\tthis.octoff = 0;\r\n\t\t\t\t\tthis.chorus = 0;\r\n\t\t\t\t\tthis.volume = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic copy(other: Instrument): void {\r\n\t\t\tthis.type = other.type;\r\n\t\t\tthis.wave = other.wave;\r\n\t\t\tthis.filter = other.filter;\r\n\t\t\tthis.transition = other.transition;\r\n\t\t\tthis.effect = other.effect;\r\n\t\t\tthis.chorus = other.chorus;\r\n\t\t\tthis.volume = other.volume;\r\n\t\t\tthis.harm = other.harm;\r\n\t\t\tthis.fmChorus = other.fmChorus;\r\n\t\t\tthis.imute = other.imute;\r\n\t\t\tthis.ipan = other.ipan;\r\n\t\t\tthis.octoff = other.octoff;\r\n\t\t\tthis.algorithm = other.algorithm;\r\n\t\t\tthis.feedbackType = other.feedbackType;\r\n\t\t\tthis.feedbackAmplitude = other.feedbackAmplitude;\r\n\t\t\tthis.feedbackEnvelope = other.feedbackEnvelope;\r\n\t\t\tfor (let i: number = 0; i < this.operators.length; i++) {\r\n\t\t\t\tthis.operators[i].copy(other.operators[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*public getChord(): Chord {\r\n\t\t\treturn this.type == InstrumentType.noise ? Config.harmDisplay[2] : Config.harmDisplay[this.harm];\r\n\t\t}*/\r\n\t}\r\n\r\n    export class Channel {\r\n\t\tpublic octave: number = 0;\r\n\t\tpublic readonly instruments: Instrument[] = [];\r\n\t\tpublic readonly patterns: Pattern[] = [];\r\n\t\tpublic readonly bars: number[] = [];\r\n\t}\r\n\t\r\n\texport class Pattern {\r\n\t\tpublic notes: Note[] = [];\r\n\t\tpublic instrument: number = 0;\r\n\t\t\r\n\t\tpublic cloneNotes(): Note[] {\r\n\t\t\tconst result: Note[] = [];\r\n\t\t\tfor (const oldNote of this.notes) {\r\n\t\t\t\tconst newNote: Note = makeNote(-1, oldNote.start, oldNote.end, 3);\r\n\t\t\t\tnewNote.pitches = oldNote.pitches.concat();\r\n\t\t\t\tnewNote.pins = [];\r\n\t\t\t\tfor (const oldPin of oldNote.pins) {\r\n\t\t\t\t\tnewNote.pins.push(makeNotePin(oldPin.interval, oldPin.time, oldPin.volume));\r\n\t\t\t\t}\r\n\t\t\t\tresult.push(newNote);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tpublic reset(): void {\r\n\t\t\tthis.notes.length = 0;\r\n\t\t\tthis.instrument = 0;\r\n\t\t}\r\n\t}\r\n\r\n    export class Song {\r\n\t\tprivate static readonly _format: string = \"NepBox\";\r\n\r\n\t\tprivate static readonly _oldestBeepboxVersion: number = 2;\r\n\t\tprivate static readonly _latestBeepboxVersion: number = 6;\r\n\t\tprivate static readonly _oldestNepBoxVersion: number = 1;\r\n\t\tprivate static readonly _latestNepBoxVersion: number = 1;\r\n\t\tprivate static readonly _variant = 0x6E; //\"N\" ~ nepbox\r\n\r\n\t\tprivate static readonly _base64CharCodeToInt: ReadonlyArray<number> = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\t\tprivate static readonly _base64IntToCharCode: ReadonlyArray<number> = [48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95];\r\n\t\t\r\n\t\tpublic scale: number;\r\n\t\tpublic setSongTheme: string;\r\n\t\tpublic key: number;\r\n\t\tpublic mix: number;\r\n\t\tpublic sampleRate: number;\r\n\t\tpublic tempo: number;\r\n\t\tpublic reverb: number;\r\n\t\tpublic blend: number;\r\n\t\tpublic riff: number;\r\n\t\tpublic detune: number;\r\n\t\tpublic muff: number;\r\n\t\tpublic beatsPerBar: number;\r\n\t\tpublic barCount: number;\r\n\t\tpublic patternsPerChannel: number;\r\n\t\tpublic partsPerBeat: number;\r\n\t\tpublic instrumentsPerChannel: number;\r\n\t\tpublic loopStart: number;\r\n\t\tpublic loopLength: number;\r\n\t\tpublic pitchChannelCount: number;\r\n\t\tpublic drumChannelCount: number;\r\n\t\tpublic readonly channels: Channel[] = [];\r\n\t\t\r\n\t\tconstructor(string?: string) {\r\n\t\t\tif (string != undefined) {\r\n\t\t\t\tthis.fromBase64String(string);\r\n\t\t\t} else {\r\n\t\t\t\tthis.initToDefault(true);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic getChannelCount(): number {\r\n\t\t\treturn this.pitchChannelCount + this.drumChannelCount;\r\n\t\t}\r\n\r\n\t\tpublic getChannelUnusedCount(): number {\r\n\t\t\treturn (Config.pitchChannelCountMax + Config.drumChannelCountMax) - (this.pitchChannelCount + this.drumChannelCount);\r\n\t\t}\r\n\r\n\t\tpublic getTimeSig(): string {\r\n\t\t\treturn this.beatsPerBar + \"/\" + this.partsPerBeat + \" with \" + this.barCount + \" bars.\";\r\n\t\t}\r\n\r\n\t\tpublic getScaleNKey(): string {\r\n\t\t\treturn ' \"' + Config.scales[this.scale].name + '\" and your key is ' + Config.keys[this.key].name;\r\n\t\t}\r\n\t\t\r\n\t\tpublic getChannelIsDrum(channel: number): boolean {\r\n\t\t\treturn (channel >= this.pitchChannelCount);\r\n\t\t}\r\n\t\t\r\n\t\tpublic getChannelColorDim(channel: number): string {\r\n\t\t\treturn channel < this.pitchChannelCount ? Config.pitchChannelColorsDim[channel] : Config.drumChannelColorsDim[channel - this.pitchChannelCount];\r\n\t\t}\r\n\t\tpublic getChannelColorBright(channel: number): string {\r\n\t\t\treturn channel < this.pitchChannelCount ? Config.pitchChannelColorsBright[channel] : Config.drumChannelColorsBright[channel - this.pitchChannelCount];\r\n\t\t}\r\n\t\tpublic getNoteColorDim(channel: number): string {\r\n\t\t\treturn channel < this.pitchChannelCount ? Config.pitchNoteColorsDim[channel] : Config.drumNoteColorsDim[channel - this.pitchChannelCount];\r\n\t\t}\r\n\t\tpublic getNoteColorBright(channel: number): string {\r\n\t\t\treturn channel < this.pitchChannelCount ? Config.pitchNoteColorsBright[channel] : Config.drumNoteColorsBright[channel - this.pitchChannelCount];\r\n\t\t}\r\n\t\t\r\n\t\tpublic initToDefault(andResetChannels: boolean = true): void {\r\n\t\t\tthis.scale = 0;\r\n\t\t\tthis.setSongTheme = \"none\";\r\n\t\t\tthis.key = Config.keys.map(key=>key.name).indexOf(\"C\");\r\n\t\t\tthis.mix = 1;\r\n\t\t\tthis.sampleRate = 2;\r\n\t\t\tthis.loopStart = 0;\r\n\t\t\tthis.loopLength = 4;\r\n\t\t\tthis.tempo = 151;\r\n\t\t\tthis.reverb = 0;\r\n\t\t\tthis.blend = 0;\r\n\t\t\tthis.riff = 0;\r\n\t\t\tthis.detune = 0;\r\n\t\t\tthis.muff = 0;\r\n\t\t\tthis.beatsPerBar = 8;\r\n\t\t\tthis.barCount = 16;\r\n\t\t\tthis.patternsPerChannel = 8;\r\n\t\t\tthis.partsPerBeat = 4;\r\n\t\t\tthis.instrumentsPerChannel = 1;\r\n\t\t\t\r\n\t\t\tif (andResetChannels) {\r\n\t\t\t\tthis.pitchChannelCount = 4;\r\n\t\t\t\tthis.drumChannelCount = 1;\r\n\t\t\t\tfor (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\t\tif (this.channels.length <= channelIndex) {\r\n\t\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst channel: Channel = this.channels[channelIndex];\r\n\t\t\t\t\tchannel.octave = 4 - channelIndex; // [4, 3, 2, 1, 0]; Descending octaves with drums at zero in last channel.\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\t\tif (channel.patterns.length <= pattern) {\r\n\t\t\t\t\t\t\tchannel.patterns[pattern] = new Pattern();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tchannel.patterns[pattern].reset();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let instrument = 0; instrument < this.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\t\tif (channel.instruments.length <= instrument) {\r\n\t\t\t\t\t\t\tchannel.instruments[instrument] = new Instrument();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tchannel.instruments[instrument].reset();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchannel.instruments.length = this.instrumentsPerChannel;\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let bar = 0; bar < this.barCount; bar++) {\r\n\t\t\t\t\t\tchannel.bars[bar] = bar < 4 ? 1 : 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchannel.bars.length = this.barCount;\r\n\t\t\t\t}\r\n\t\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic toBase64String(): string {\r\n\t\t\tlet bits: BitFieldWriter;\r\n\t\t\tlet buffer: number[] = [];\r\n\t\t\t\r\n\t\t\tconst base64IntToCharCode: ReadonlyArray<number> = Song._base64IntToCharCode;\r\n\t\t\t\r\n\t\t\tbuffer.push(Song._variant);\r\n\t\t\tbuffer.push(base64IntToCharCode[Song._latestNepBoxVersion]);\r\n\r\n\r\n\r\n\t\t\tbuffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.drumChannelCount]);\r\n\r\n\t\t\tbuffer.push(SongTagCode.setSongTheme);\r\n\t\t\tvar encodedSongTheme: string = encodeURIComponent(this.setSongTheme);\r\n        \tbuffer.push(base64IntToCharCode[encodedSongTheme.length >> 6], base64IntToCharCode[encodedSongTheme.length & 0x3f]);\r\n\t\t\t// Actual encoded string follows\r\n\t\t\tfor (let i: number = 0; i < encodedSongTheme.length; i++) {\r\n\t\t\t\tbuffer.push(encodedSongTheme.charCodeAt(i));\r\n\t\t\t}\r\n\r\n\t\t\tbuffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n\t\t\tbuffer.push(SongTagCode.mix, base64IntToCharCode[this.mix]);\r\n\t\t\tbuffer.push(SongTagCode.sampleRate, base64IntToCharCode[this.sampleRate]);\r\n\t\t\tbuffer.push(SongTagCode.key, base64IntToCharCode[this.key]);\r\n\t\t\tbuffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n\t\t\tbuffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n\t\t\tbuffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 63]);\r\n\t\t\tbuffer.push(SongTagCode.reverb, base64IntToCharCode[this.reverb]);\r\n\t\t\tbuffer.push(SongTagCode.blend, base64IntToCharCode[this.blend]);\r\n\t\t\tbuffer.push(SongTagCode.riff, base64IntToCharCode[this.riff]);\r\n\t\t\tbuffer.push(SongTagCode.detune, base64IntToCharCode[this.detune]);\r\n\t\t\tbuffer.push(SongTagCode.muff, base64IntToCharCode[this.muff]);\r\n\t\t\tbuffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n\t\t\tbuffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n\t\t\tbuffer.push(SongTagCode.patternCount, base64IntToCharCode[this.patternsPerChannel - 1]);\r\n\t\t\tbuffer.push(SongTagCode.instrumentCount, base64IntToCharCode[this.instrumentsPerChannel - 1]);\r\n\t\t\tbuffer.push(SongTagCode.rhythm, base64IntToCharCode[Config.partCounts.indexOf(this.partsPerBeat)]);\r\n\t\t\t\r\n\t\t\tbuffer.push(SongTagCode.channelOctave);\r\n\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\tbuffer.push(base64IntToCharCode[this.channels[channel].octave]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (channel < this.pitchChannelCount) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n\t\t\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\t\t\t// chip\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.wave]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.filter, base64IntToCharCode[instrument.filter]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.effect, base64IntToCharCode[instrument.effect]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.harm, base64IntToCharCode[instrument.harm]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.imute, base64IntToCharCode[instrument.imute]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.ipan, base64IntToCharCode[instrument.ipan]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.octoff, base64IntToCharCode[instrument.octoff]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.chorus,base64IntToCharCode[instrument.chorus]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[instrument.volume]);\r\n\t\t\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\t// FM\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.effect, base64IntToCharCode[instrument.effect]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.octoff, base64IntToCharCode[instrument.octoff]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.fmChorus, base64IntToCharCode[instrument.fmChorus]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.imute, base64IntToCharCode[instrument.imute]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.ipan, base64IntToCharCode[instrument.ipan]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.feedbackEnvelope, base64IntToCharCode[instrument.feedbackEnvelope]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[instrument.volume]);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.operatorFrequencies);\r\n\t\t\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.operatorAmplitudes);\r\n\t\t\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.operatorEnvelopes);\r\n\t\t\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].envelope]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.wave]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.filter, base64IntToCharCode[instrument.filter]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.effect, base64IntToCharCode[instrument.effect]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.harm, base64IntToCharCode[instrument.harm]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.imute, base64IntToCharCode[instrument.imute]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.ipan, base64IntToCharCode[instrument.ipan]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.octoff, base64IntToCharCode[instrument.octoff]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.chorus, base64IntToCharCode[instrument.chorus]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[instrument.volume]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(\"Unknown instrument type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// NOISE\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.startInstrument, base64IntToCharCode[InstrumentType.noise]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.wave]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[instrument.volume]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.imute, base64IntToCharCode[instrument.imute]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.harm, base64IntToCharCode[instrument.harm]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.octoff, base64IntToCharCode[instrument.octoff]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.ipan, base64IntToCharCode[instrument.ipan]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tbuffer.push(SongTagCode.bars);\r\n\t\t\tbits = new BitFieldWriter();\r\n\t\t\tlet neededBits: number = 0;\r\n\t\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) for (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\tbits.write(neededBits, this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\t\t\tbits.encodeBase64(base64IntToCharCode, buffer);\r\n\t\t\t\r\n\t\t\tbuffer.push(SongTagCode.patterns);\r\n\t\t\tbits = new BitFieldWriter();\r\n\t\t\tlet neededInstrumentBits: number = 0;\r\n\t\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\tconst isDrum: boolean = this.getChannelIsDrum(channel);\r\n\t\t\t\tconst octaveOffset: number = isDrum ? 0 : this.channels[channel].octave * 12;\r\n\t\t\t\tlet lastPitch: number = (isDrum ? 4 : 12) + octaveOffset;\r\n\t\t\t\tconst recentPitches: number[] = isDrum ? [4,6,7,2,3,8,0,10] : [12, 19, 24, 31, 36, 7, 0];\r\n\t\t\t\tconst recentShapes: string[] = [];\r\n\t\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t\t}\r\n\t\t\t\tfor (const p of this.channels[channel].patterns) {\r\n\t\t\t\t\tbits.write(neededInstrumentBits, p.instrument);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (p.notes.length > 0) {\r\n\t\t\t\t\t\tbits.write(1, 1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\t\tfor (const t of p.notes) {\r\n\t\t\t\t\t\t\tif (t.start > curPart) {\r\n\t\t\t\t\t\t\t\tbits.write(2, 0); // rest\r\n\t\t\t\t\t\t\t\tbits.writePartDuration(t.start - curPart);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tconst shapeBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n\t\t\t\t\t\t\tfor (let i: number = 1; i < t.pitches.length; i++) shapeBits.write(1,1);\r\n\t\t\t\t\t\t\tif (t.pitches.length < 4) shapeBits.write(1,0);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tshapeBits.writePinCount(t.pins.length - 1);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tshapeBits.write(2, t.pins[0].volume); // volume\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlet shapePart: number = 0;\r\n\t\t\t\t\t\t\tlet startPitch: number = t.pitches[0];\r\n\t\t\t\t\t\t\tlet currentPitch: number = startPitch;\r\n\t\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\t\tfor (let i: number = 1; i < t.pins.length; i++) {\r\n\t\t\t\t\t\t\t\tconst pin: NotePin = t.pins[i];\r\n\t\t\t\t\t\t\t\tconst nextPitch: number = startPitch + pin.interval;\r\n\t\t\t\t\t\t\t\tif (currentPitch != nextPitch) {\r\n\t\t\t\t\t\t\t\t\tshapeBits.write(1, 1);\r\n\t\t\t\t\t\t\t\t\tpitchBends.push(nextPitch);\r\n\t\t\t\t\t\t\t\t\tcurrentPitch = nextPitch;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tshapeBits.write(1, 0);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tshapeBits.writePartDuration(pin.time - shapePart);\r\n\t\t\t\t\t\t\t\tshapePart = pin.time;\r\n\t\t\t\t\t\t\t\tshapeBits.write(2, pin.volume);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tconst shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64(base64IntToCharCode, []));\r\n\t\t\t\t\t\t\tconst shapeIndex: number = recentShapes.indexOf(shapeString);\r\n\t\t\t\t\t\t\tif (shapeIndex == -1) {\r\n\t\t\t\t\t\t\t\tbits.write(2, 1); // new shape\r\n\t\t\t\t\t\t\t\tbits.concat(shapeBits);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbits.write(1, 1); // old shape\r\n\t\t\t\t\t\t\t\tbits.writeLongTail(0, 0, shapeIndex);\r\n\t\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\trecentShapes.unshift(shapeString);\r\n\t\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tconst allPitches: number[] = t.pitches.concat(pitchBends);\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < allPitches.length; i++) {\r\n\t\t\t\t\t\t\t\tconst pitch: number = allPitches[i];\r\n\t\t\t\t\t\t\t\tconst pitchIndex: number = recentPitches.indexOf(pitch);\r\n\t\t\t\t\t\t\t\tif (pitchIndex == -1) {\r\n\t\t\t\t\t\t\t\t\tlet interval: number = 0;\r\n\t\t\t\t\t\t\t\t\tlet pitchIter: number = lastPitch;\r\n\t\t\t\t\t\t\t\t\tif (pitchIter < pitch) {\r\n\t\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitchIter++;\r\n\t\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitchIter--;\r\n\t\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t\t\t\t\t\tbits.writePitchInterval(interval);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tbits.write(1, 1);\r\n\t\t\t\t\t\t\t\t\tbits.write(3, pitchIndex);\r\n\t\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\t\tif (recentPitches.length > 8) recentPitches.pop();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (i == t.pitches.length - 1) {\r\n\t\t\t\t\t\t\t\t\tlastPitch = t.pitches[0];\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcurPart = t.end;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (curPart < this.beatsPerBar * this.partsPerBeat) {\r\n\t\t\t\t\t\t\tbits.write(2, 0); // rest\r\n\t\t\t\t\t\t\tbits.writePartDuration(this.beatsPerBar * this.partsPerBeat - curPart);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet stringLength: number = bits.lengthBase64();\r\n\t\t\tlet digits: number[] = [];\r\n\t\t\twhile (stringLength > 0) {\r\n\t\t\t\tdigits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n\t\t\t\tstringLength = stringLength >> 6;\r\n\t\t\t}\r\n\t\t\tbuffer.push(base64IntToCharCode[digits.length]);\r\n\t\t\tArray.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n\t\t\tbits.encodeBase64(base64IntToCharCode, buffer);\r\n\t\t\t\r\n\t\t\t// HACK: This breaks for strings longer than 65535. \r\n\t\t\tif (buffer.length >= 65535) throw new Error(\"Song hash code too long.\");\r\n\t\t\treturn String.fromCharCode.apply(null, buffer);\r\n\t\t}\r\n\t\t\r\n\t\tpublic fromBase64String(compressed: string): void {\r\n\t\t\tif (compressed == null || compressed == \"\") {\r\n\t\t\t\tthis.initToDefault(true);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlet charIndex: number = 0;\r\n\t\t\t// skip whitespace.\r\n\t\t\twhile (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n\t\t\t// skip hash mark.\r\n\t\t\tif (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n\t\t\t// if it starts with curly brace, treat it as JSON.\r\n\t\t\tif (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n\t\t\t\tthis.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst variantTest: number = compressed.charCodeAt(charIndex);\r\n        \tlet fromOld: boolean;\r\n        \tlet fromNepBox: boolean;\r\n\r\n\t\t\t// Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n\t\t\tif (variantTest == 0x6E) { //\"n\"\r\n\t\t\t\tfromOld = false;\r\n\t\t\t\tfromNepBox = true;\r\n\t\t\t\tcharIndex++;\r\n\t\t\t} else {\r\n\t\t\t\tfromOld = true;\r\n\t\t\t\tfromNepBox = false;\r\n\t\t\t}\r\n\r\n\t\t\tconst version: number = Song._base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\tif (fromOld && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n\t\t\tif (fromNepBox && (version == -1 || version > Song._latestNepBoxVersion || version < Song._oldestNepBoxVersion)) return;\r\n\t\t\t//const beforeTwo:   boolean = version < 2;\r\n\t\t\tconst beforeThree: boolean = version < 3;\r\n\t\t\tconst beforeFour:  boolean = version < 4;\r\n\t\t\tconst beforeFive:  boolean = version < 5;\r\n\t\t\tconst beforeSix:   boolean = version < 6;\r\n\t\t\tconst base64CharCodeToInt: ReadonlyArray<number> = Song._base64CharCodeToInt;\r\n\t\t\tthis.initToDefault((fromOld && beforeSix) || (fromNepBox));\r\n\t\t\t\r\n\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t// Originally, the only instrument transition was \"seamless\" and the only drum wave was \"retro\".\r\n\t\t\t\tfor (const channel of this.channels) channel.instruments[0].transition = 0;\r\n\t\t\t\tthis.channels[3].instruments[0].wave = 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet instrumentChannelIterator: number = 0;\r\n\t\t\tlet instrumentIndexIterator: number = -1;\r\n\t\t\t\r\n\t\t\twhile (charIndex < compressed.length) {\r\n\t\t\t\tconst command: number = compressed.charCodeAt(charIndex++);\r\n\t\t\t\tlet channel: number;\r\n\t\t\t\tif (command == SongTagCode.channelCount) {\r\n\t\t\t\t\tthis.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.drumChannelCount  = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.pitchChannelCount = clamp(Config.pitchChannelCountMin, Config.pitchChannelCountMax + 1, this.pitchChannelCount);\r\n\t\t\t\t\tthis.drumChannelCount = clamp(Config.drumChannelCountMin, Config.drumChannelCountMax + 1, this.drumChannelCount);\r\n\t\t\t\t\tfor (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t\t\t} else if (command == SongTagCode.scale) {\r\n\t\t\t\t\tthis.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tif ((fromOld && beforeThree) && this.scale == 10) this.scale = 11;\r\n\t\t\t\t} else if (command == SongTagCode.mix) {\r\n\t\t\t\t\tthis.mix = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else if (command == SongTagCode.key) {\r\n\t\t\t\t\t\tthis.key = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else if (command == SongTagCode.setSongTheme) {\r\n\t\t\t\t\tif (fromOld) {\r\n\t\t\t\t\t\tvar themeIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tvar themes = [\"none\", \"modbox2\", \"artic\", \"Cinnamon Roll\", \"Ocean\", \"rainbow\", \"float\", \"windows\", \"grassland\", \"dessert\", \"kahootiest\", \"beambit\", \"egg\", \"Poniryoshka\", \"gameboy\", \"woodkid\", \"midnight\", \"snedbox\", \"unnamed\", \"piano\", \"halloween\", \"frozen\"];\r\n\t\t\t\t\t\tthis.setSongTheme = themes[themeIndex];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar songThemeLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.setSongTheme = decodeURIComponent(compressed.substring(charIndex, charIndex + songThemeLength));\r\n\t\t\t\t\t\tcharIndex += songThemeLength;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.loopStart) {\r\n\t\t\t\t\tif (fromOld && beforeFive) {\r\n\t\t\t\t\t\tthis.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.loopEnd) {\r\n\t\t\t\t\tif (fromOld && beforeFive) {\r\n\t\t\t\t\t\tthis.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.tempo) {\r\n\t\t\t\t\tif (fromOld) {\r\n\t\t\t\t\t\tif (beforeFour) {\r\n\t\t\t\t\t\t\tthis.tempo = [1, 4, 7, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax, this.tempo);\r\n\t\t\t\t} else if (command == SongTagCode.reverb) {\r\n\t\t\t\t\tthis.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n\t\t\t\t} else if (command == SongTagCode.blend) {\r\n\t\t\t\t\tthis.blend = clamp(0, Config.blendRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.riff) {\r\n\t\t\t\t\tthis.riff = clamp(0, Config.riffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.sampleRate) {\r\n\t\t\t\t\tthis.sampleRate = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else if (command == SongTagCode.detune) {\r\n\t\t\t\t\tthis.detune = clamp(0, Config.detuneRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.muff) {\r\n\t\t\t\t\tthis.muff = clamp(0, Config.muffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.beatCount) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tthis.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n\t\t\t\t} else if (command == SongTagCode.barCount) {\r\n\t\t\t\t\tthis.barCount = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t\tthis.barCount = Math.max(Config.barCountMin, Math.min(Config.barCountMax, this.barCount));\r\n\t\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let bar = this.channels[channel].bars.length; bar < this.barCount; bar++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[bar] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.channels[channel].bars.length = this.barCount;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.patternCount) {\r\n\t\t\t\t\tthis.patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t\tthis.patternsPerChannel = Math.max(1, Math.min(Config.barCountMax, this.patternsPerChannel));\r\n\t\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let pattern = this.channels[channel].patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].patterns[pattern] = new Pattern();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.channels[channel].patterns.length = this.patternsPerChannel;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.instrumentCount) {\r\n\t\t\t\t\tthis.instrumentsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t\tthis.instrumentsPerChannel = Math.max(Config.instrumentsPerChannelMin, Math.min(Config.instrumentsPerChannelMax, this.instrumentsPerChannel));\r\n\t\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let instrument = this.channels[channel].instruments.length; instrument < this.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[instrument] = new Instrument();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.channels[channel].instruments.length = this.instrumentsPerChannel;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.rhythm) {\r\n\t\t\t\t\tthis.partsPerBeat = Config.partCounts[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else if (command == SongTagCode.channelOctave) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].octave = clamp(0, 5, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].octave = clamp(0, 5, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.startInstrument) {\r\n\t\t\t\t\tinstrumentIndexIterator++;\r\n\t\t\t\t\tif (instrumentIndexIterator >= this.instrumentsPerChannel) {\r\n\t\t\t\t\t\tinstrumentChannelIterator++;\r\n\t\t\t\t\t\tinstrumentIndexIterator = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst isPitchChannel: boolean = instrumentChannelIterator < this.pitchChannelCount;\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tconst rawInstrumentType: number = clamp(0, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tlet instrumentType: number = rawInstrumentType;\r\n\t\t\t\t\tif (instrumentType == InstrumentType.noise && isPitchChannel) {\r\n\t\t\t\t\t\tinstrumentType = InstrumentType.pwm;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinstrument.setTypeAndReset(instrumentType);\r\n\t\t\t\t} else if (command == SongTagCode.wave) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].wave = clamp(0, Config.waveNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tconst isDrums = (channel >= this.pitchChannelCount);\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].wave = clamp(0, isDrums ? Config.drumNames.length : Config.waveNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst isDrums = (instrumentChannelIterator >= this.pitchChannelCount);\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].wave = clamp(0, isDrums ? Config.drumNames.length : Config.waveNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.filter) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].filter = [1, 3, 4, 5][clamp(0, Config.filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].filter = clamp(0, Config.filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].filter = clamp(0, Config.filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.transition) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].transition = clamp(0, Config.transitionNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].transition = clamp(0, Config.transitionNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitionNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.effect) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tlet effect: number = clamp(0, Config.effectNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tif (effect == 1) effect = 3;\r\n\t\t\t\t\t\telse if (effect == 3) effect = 5;\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].effect = effect;\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].effect = clamp(0, Config.effectNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].effect = clamp(0, Config.effectNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.chorus) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].chorus = clamp(0, Config.chorusNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chorus = clamp(0, Config.chorusNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chorus = clamp(0, Config.chorusNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.harm) {\r\n\t\t\t\t\t// Harmony was added in this commit: https://github.com/ModdedBeepbox/modded-beepbox-2.3/commit/cd1cc3d1891eda506e77e7619822ec2a48f375f2\r\n\t\t\t\t\t// _latestVersion was 5 in that commit, so the beforeThree\r\n\t\t\t\t\t// if in the reading code shouldn't ever run. Thus, it has\r\n\t\t\t\t\t// been omitted here.\r\n\t\t\t\t\tif (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].harm = clamp(0, Config.harmNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].harm = clamp(0, Config.harmNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.fmChorus) {\r\n\t\t\t\t\t// FM chorus was added in this commit: https://github.com/ModdedBeepbox/beta/commit/5c47acd9e5892709596d81df987a496f468b7115\r\n\t\t\t\t\t// Smaller diff: https://github.com/ModdedBeepbox/beta/compare/5427a7c491aae9fef15576bbc33a0d43ca18f758..5c47acd9e5892709596d81df987a496f468b7115\r\n\t\t\t\t\t// _latestVersion remained 6 before and after this, and the\r\n\t\t\t\t\t// tag code was never used for anything else previously, so\r\n\t\t\t\t\t// no backwards compatibility code is needed here.\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].fmChorus = clamp(0, Config.fmChorusNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.imute) {\r\n\t\t\t\t\t// Muting was added in this commit: https://github.com/ModdedBeepbox/3.0/commit/f177e34831ab85c58e0492ae47a5df80e709d9b4\r\n\t\t\t\t\t// _latestVersion remained 6 before and after this, and the\r\n\t\t\t\t\t// tag code was never used for anything else previously, so\r\n\t\t\t\t\t// no backwards compatibility code is needed here.\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].imute = clamp(0, Config.imuteNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.ipan) {\r\n\t\t\t\t\t// @TODO: Add SongTagCode.oldIpan = CharCode.M? Normally it\r\n\t\t\t\t\t// will be ignored if present on songs made before Oct 22, 2018\r\n\t\t\t\t\t// or so.\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].ipan = clamp(0, Config.ipanValues.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.octoff) {\r\n\t\t\t\t\t// Octave offset was first added in this commit: https://github.com/ModdedBeepbox/3.0/commit/54bdad302110cbde72b18f041091e53e3c35c189 (see BeepBox_files/5_channel.js)\r\n\t\t\t\t\t// It used CharCode.VERTICAL_LINE as the tag code value.\r\n\t\t\t\t\t// Later, it was changed to use CharCode.B in this commit: https://github.com/ModdedBeepbox/3.0/commit/84b9a7608c22addf01af2acebee6d5f6c65a5122\r\n\t\t\t\t\t// _latestVersion was 5, and the only major difference here\r\n\t\t\t\t\t// is that the octave offsets were pushed for every channel\r\n\t\t\t\t\t// one after another.\r\n\t\t\t\t\t// The beforeThree if was never needed.\r\n\t\t\t\t\tif (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].octoff = clamp(0, Config.octoffNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].octoff = clamp(0, Config.octoffNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.volume) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].volume = clamp(0, Config.volumeNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].volume = clamp(0, Config.volumeNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].volume = clamp(0, Config.volumeNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.algorithm) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].algorithm = clamp(0, Config.operatorAlgorithmNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.feedbackType) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.operatorFeedbackNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.feedbackAmplitude) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.feedbackEnvelope) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackEnvelope = clamp(0, Config.operatorEnvelopeNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.operatorFrequencies) {\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencyNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.operatorAmplitudes) {\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.operatorEnvelopes) {\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].envelope = clamp(0, Config.operatorEnvelopeNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.bars) {\r\n\t\t\t\t\tlet subStringLength: number;\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tconst barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tsubStringLength = Math.ceil(barCount * 0.5);\r\n\t\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(base64CharCodeToInt, compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\t\tfor (let i: number = 0; i < barCount; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(3) + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (fromOld && beforeFive) {\r\n\t\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n\t\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(base64CharCodeToInt, compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits) + 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(base64CharCodeToInt, compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcharIndex += subStringLength;\r\n\t\t\t\t} else if (command == SongTagCode.patterns) {\r\n\t\t\t\t\tlet bitStringLength: number = 0;\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default. \r\n\t\t\t\t\t\tcharIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchannel = 0;\r\n\t\t\t\t\t\tlet bitStringLengthLength: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\twhile (bitStringLengthLength > 0) {\r\n\t\t\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\t\tbitStringLengthLength--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(base64CharCodeToInt, compressed, charIndex, charIndex + bitStringLength);\r\n\t\t\t\t\tcharIndex += bitStringLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet neededInstrumentBits: number = 0;\r\n\t\t\t\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\t\t\t\twhile (true) {\r\n\t\t\t\t\t\tconst isDrum: boolean = this.getChannelIsDrum(channel);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst octaveOffset: number = isDrum ? 0 : this.channels[channel].octave * 12;\r\n\t\t\t\t\t\tlet note: Note | null = null;\r\n\t\t\t\t\t\tlet pin: NotePin | null = null;\r\n\t\t\t\t\t\tlet lastPitch: number = (isDrum ? 4 : 12) + octaveOffset;\r\n\t\t\t\t\t\tconst recentPitches: number[] = isDrum ? [4,6,7,2,3,8,0,10] : [12, 19, 24, 31, 36, 7, 0];\r\n\t\t\t\t\t\tconst recentShapes: any[] = [];\r\n\t\t\t\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst newPattern: Pattern = this.channels[channel].patterns[i];\r\n\t\t\t\t\t\t\tnewPattern.reset();\r\n\t\t\t\t\t\t\tnewPattern.instrument = bits.read(neededInstrumentBits);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (((fromOld && !beforeThree) || fromNepBox) && bits.read(1) == 0) continue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\t\t\tconst newNotes: Note[] = newPattern.notes;\r\n\t\t\t\t\t\t\twhile (curPart < this.beatsPerBar * this.partsPerBeat) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst useOldShape: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\tlet newNote: boolean = false;\r\n\t\t\t\t\t\t\t\tlet shapeIndex: number = 0;\r\n\t\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\t\tshapeIndex = bits.readLongTail(0, 0);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tnewNote = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (!useOldShape && !newNote) {\r\n\t\t\t\t\t\t\t\t\tconst restLength: number = bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\tcurPart += restLength;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tlet shape: any;\r\n\t\t\t\t\t\t\t\t\tlet pinObj: any;\r\n\t\t\t\t\t\t\t\t\tlet pitch: number;\r\n\t\t\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\t\t\tshape = recentShapes[shapeIndex];\r\n\t\t\t\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tshape = {};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tshape.pitchCount = 1;\r\n\t\t\t\t\t\t\t\t\t\twhile (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tshape.pinCount = bits.readPinCount();\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(2);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tshape.pins = [];\r\n\t\t\t\t\t\t\t\t\t\tshape.length = 0;\r\n\t\t\t\t\t\t\t\t\t\tshape.bendCount = 0;\r\n\t\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pinCount; j++) {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj = {};\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.pitchBend = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) shape.bendCount++;\r\n\t\t\t\t\t\t\t\t\t\t\tshape.length += bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.time = shape.length;\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(2);\r\n\t\t\t\t\t\t\t\t\t\t\tshape.pins.push(pinObj);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\trecentShapes.unshift(shape);\r\n\t\t\t\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tnote = makeNote(0,curPart,curPart + shape.length, shape.initialVolume);\r\n\t\t\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\t\t\tnote.pins.length = 1;\r\n\t\t\t\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n\t\t\t\t\t\t\t\t\t\tconst useOldPitch: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\t\tif (!useOldPitch) {\r\n\t\t\t\t\t\t\t\t\t\t\tconst interval: number = bits.readPitchInterval();\r\n\t\t\t\t\t\t\t\t\t\t\tpitch = lastPitch;\r\n\t\t\t\t\t\t\t\t\t\t\tlet intervalIter: number = interval;\r\n\t\t\t\t\t\t\t\t\t\t\twhile (intervalIter > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tpitch++;\r\n\t\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch++;\r\n\t\t\t\t\t\t\t\t\t\t\t\tintervalIter--;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\twhile (intervalIter < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tpitch--;\r\n\t\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch--;\r\n\t\t\t\t\t\t\t\t\t\t\t\tintervalIter++;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tconst pitchIndex: number = bits.read(3);\r\n\t\t\t\t\t\t\t\t\t\t\tpitch = recentPitches[pitchIndex];\r\n\t\t\t\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.length > 8) recentPitches.pop();\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif (j < shape.pitchCount) {\r\n\t\t\t\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tpitchBends.push(pitch);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif (j == shape.pitchCount - 1) {\r\n\t\t\t\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tpitchBends.unshift(note.pitches[0]);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tfor (const pinObj of shape.pins) {\r\n\t\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) pitchBends.shift();\r\n\t\t\t\t\t\t\t\t\t\tpin = makeNotePin(pitchBends[0] - note.pitches[0], pinObj.time, pinObj.volume);\r\n\t\t\t\t\t\t\t\t\t\tnote.pins.push(pin);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tcurPart = note.end;\r\n\t\t\t\t\t\t\t\t\tnewNotes.push(note);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tchannel++;\r\n\t\t\t\t\t\t\tif (channel >= this.getChannelCount()) break;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} // while (true)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n\t\t\tconst channelArray: Object[] = [];\r\n\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\tconst instrumentArray: Object[] = [];\r\n\t\t\t\tconst isDrum: boolean = this.getChannelIsDrum(channel);\r\n\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\tif (isDrum) {\r\n\t\t\t\t\t\tinstrumentArray.push({\r\n\t\t\t\t\t\t\ttype: Config.instrumentTypeNames[InstrumentType.noise],\r\n\t\t\t\t\t\t\tvolume: (5 - instrument.volume) * 20,\r\n\t\t\t\t\t\t\timute: Config.imuteNames[instrument.imute],\r\n\t\t\t\t\t\t\twave: Config.drumNames[instrument.wave],\r\n\t\t\t\t\t\t\ttransition: Config.transitionNames[instrument.transition],\r\n\t\t\t\t\t\t\toctoff: Config.octoffNames[instrument.octoff],\r\n\t\t\t\t\t\t\tipan: Config.ipanValues[instrument.ipan],\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\t\t\tinstrumentArray.push({\r\n\t\t\t\t\t\t\t\ttype: Config.instrumentTypeNames[instrument.type],\r\n\t\t\t\t\t\t\t\tvolume: (5 - instrument.volume) * 20,\r\n\t\t\t\t\t\t\t\twave: Config.waveNames[instrument.wave],\r\n\t\t\t\t\t\t\t\ttransition: Config.transitionNames[instrument.transition],\r\n\t\t\t\t\t\t\t\tfilter: Config.filterNames[instrument.filter],\r\n\t\t\t\t\t\t\t\tchorus: Config.chorusNames[instrument.chorus],\r\n\t\t\t\t\t\t\t\teffect: Config.effectNames[instrument.effect],\r\n\t\t\t\t\t\t\t\tharm: Config.harmNames[instrument.harm],\r\n\t\t\t\t\t\t\t\timute: Config.imuteNames[instrument.imute],\r\n\t\t\t\t\t\t\t\toctoff: Config.octoffNames[instrument.octoff],\r\n\t\t\t\t\t\t\t\tipan: Config.ipanValues[instrument.ipan],\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\tconst operatorArray: Object[] = [];\r\n\t\t\t\t\t\t\tfor (const operator of instrument.operators) {\r\n\t\t\t\t\t\t\t\toperatorArray.push({\r\n\t\t\t\t\t\t\t\t\tfrequency: Config.operatorFrequencyNames[operator.frequency],\r\n\t\t\t\t\t\t\t\t\tamplitude: operator.amplitude,\r\n\t\t\t\t\t\t\t\t\tenvelope: Config.operatorEnvelopeNames[operator.envelope],\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tinstrumentArray.push({\r\n\t\t\t\t\t\t\t\ttype: Config.instrumentTypeNames[instrument.type],\r\n\t\t\t\t\t\t\t\tvolume: (5 - instrument.volume) * 20,\r\n\t\t\t\t\t\t\t\ttransition: Config.transitionNames[instrument.transition],\r\n\t\t\t\t\t\t\t\teffect: Config.effectNames[instrument.effect],\r\n\t\t\t\t\t\t\t\toctoff: Config.octoffNames[instrument.octoff],\r\n\t\t\t\t\t\t\t\tfmChorus: Config.fmChorusNames[instrument.fmChorus],\r\n\t\t\t\t\t\t\t\talgorithm: Config.operatorAlgorithmNames[instrument.algorithm],\r\n\t\t\t\t\t\t\t\tfeedbackType: Config.operatorFeedbackNames[instrument.feedbackType],\r\n\t\t\t\t\t\t\t\tfeedbackAmplitude: instrument.feedbackAmplitude,\r\n\t\t\t\t\t\t\t\tfeedbackEnvelope: Config.operatorEnvelopeNames[instrument.feedbackEnvelope],\r\n\t\t\t\t\t\t\t\toperators: operatorArray,\r\n\t\t\t\t\t\t\t\tipan: Config.ipanValues[instrument.ipan],\r\n\t\t\t\t\t\t\t\timute: Config.imuteNames[instrument.imute],\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t\t\t\t\tinstrumentArray.push({\r\n\t\t\t\t\t\t\t\t// This uses the wrong instrument type in order\r\n\t\t\t\t\t\t\t\t// to make JSON exports compatible with\r\n\t\t\t\t\t\t\t\t// https://thestarworld.github.io/modboxfixed/\r\n\t\t\t\t\t\t\t\ttype: Config.instrumentTypeNames[InstrumentType.noise],\r\n\t\t\t\t\t\t\t\tvolume: (5 - instrument.volume) * 20,\r\n\t\t\t\t\t\t\t\twave: Config.pwmwaveNames[instrument.wave],\r\n\t\t\t\t\t\t\t\ttransition: Config.transitionNames[instrument.transition],\r\n\t\t\t\t\t\t\t\tfilter: Config.filterNames[instrument.filter],\r\n\t\t\t\t\t\t\t\tchorus: Config.chorusNames[instrument.chorus],\r\n\t\t\t\t\t\t\t\teffect: Config.effectNames[instrument.effect],\r\n\t\t\t\t\t\t\t\tharm: Config.harmNames[instrument.harm],\r\n\t\t\t\t\t\t\t\timute: Config.imuteNames[instrument.imute],\r\n\t\t\t\t\t\t\t\toctoff: Config.octoffNames[instrument.octoff],\r\n\t\t\t\t\t\t\t\tipan: Config.ipanValues[instrument.ipan],\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(\"Unrecognized instrument type\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst patternArray: Object[] = [];\r\n\t\t\t\tfor (const pattern of this.channels[channel].patterns) {\r\n\t\t\t\t\tconst noteArray: Object[] = [];\r\n\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\tconst pointArray: Object[] = [];\r\n\t\t\t\t\t\tfor (const pin of note.pins) {\r\n\t\t\t\t\t\t\tpointArray.push({\r\n\t\t\t\t\t\t\t\ttick: pin.time + note.start,\r\n\t\t\t\t\t\t\t\tpitchBend: pin.interval,\r\n\t\t\t\t\t\t\t\tvolume: Math.round(pin.volume * 100 / 3),\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnoteArray.push({\r\n\t\t\t\t\t\t\tpitches: note.pitches,\r\n\t\t\t\t\t\t\tpoints: pointArray,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tpatternArray.push({\r\n\t\t\t\t\t\tinstrument: pattern.instrument + 1,\r\n\t\t\t\t\t\tnotes: noteArray, \r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst sequenceArray: number[] = [];\r\n\t\t\t\tif (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n\t\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t\t}\r\n\t\t\t\tfor (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n\t\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t\t}\r\n\t\t\t\tif (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n\t\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tchannelArray.push({\r\n\t\t\t\t\ttype: isDrum ? \"drum\" : \"pitch\",\r\n\t\t\t\t\toctaveScrollBar: this.channels[channel].octave,\r\n\t\t\t\t\tinstruments: instrumentArray,\r\n\t\t\t\t\tpatterns: patternArray,\r\n\t\t\t\t\tsequence: sequenceArray,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tformat: Song._format,\r\n\t\t\t\tversion: Song._latestNepBoxVersion,\r\n\t\t\t\ttheme: this.setSongTheme,\r\n\t\t\t\tscale: Config.scales[this.scale].name,\r\n\t\t\t\tmix: Config.mixNames[this.mix],\r\n\t\t\t\tsampleRate: Config.sampleRateNames[this.sampleRate],\r\n\t\t\t\tkey: Config.keys[this.key].name,\r\n\t\t\t\tintroBars: this.loopStart,\r\n\t\t\t\tloopBars: this.loopLength,\r\n\t\t\t\tbeatsPerBar: this.beatsPerBar,\r\n\t\t\t\tticksPerBeat: this.partsPerBeat,\r\n\t\t\t\tbeatsPerMinute: this.getBeatsPerMinute(), // represents tempo\r\n\t\t\t\treverb: this.reverb,\r\n\t\t\t\tblend: this.blend,\r\n\t\t\t\triff: this.riff,\r\n\t\t\t\tdetune: this.detune,\r\n\t\t\t\tmuff: this.muff,\r\n\t\t\t\t//outroBars: this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n\t\t\t\t//patternCount: this.patternsPerChannel, // derive this from pattern arrays?\r\n\t\t\t\t//instrumentsPerChannel: this.instrumentsPerChannel, //derive this from instrument arrays?\r\n\t\t\t\tchannels: channelArray,\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tpublic fromJsonObject(jsonObject: any): void {\r\n\t\t\tthis.initToDefault(true);\r\n\t\t\tif (!jsonObject) return;\r\n\t\t\tconst format: any = jsonObject.format;\r\n\t\t\tconst version: any = jsonObject.version;\r\n\t\t\tif (version > Song._format) return;\r\n\t\t\t\r\n\t\t\tthis.scale = 11; // default to expert.\r\n\t\t\tif (jsonObject.scale != undefined) {\r\n\t\t\t\tif (format == \"BeepBox\") {\r\n\t\t\t\tconst oldScaleNames: Dictionary<number> = {\"romani :)\": 8, \"romani :(\": 9};\r\n\t\t\t\tconst scale: number = oldScaleNames[jsonObject.scale] != undefined ? oldScaleNames[jsonObject.scale] : Config.scales.map(scale=>scale.name).indexOf(jsonObject.scale);\r\n\t\t\t\tif (scale != -1) this.scale = scale;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.scale = Config.scales.map(scale=>scale.name).indexOf(jsonObject[\"scale\"]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.theme != undefined) {\r\n\t\t\t\tif (format == \"BeepBox\") {\r\n\t\t\t\t\tif ((jsonObject[\"theme\"] != \"Nepbox\") && (jsonObject[\"theme\"] != \"Laffey\") && (jsonObject[\"theme\"] != \"ModBox\")) {\r\n\t\t\t\t\t\tvar themes = [\"none\", \"modbox2\", \"artic\", \"Cinnamon Roll\", \"Ocean\", \"rainbow\", \"float\", \"windows\", \"grassland\", \"dessert\", \"kahootiest\", \"beambit\", \"egg\", \"Poniryoshka\", \"gameboy\", \"woodkid\", \"midnight\", \"snedbox\", \"unnamed\", \"piano\", \"halloween\", \"frozen\"];\r\n\t\t\t\t\t\tvar themeIndex = Config.oldThemeNames.indexOf(jsonObject[\"theme\"]);\r\n\t\t\t\t\t\tthis.setSongTheme = themes[themeIndex];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar themes = [\"none\", \"nepbox\", \"laffey\"];\r\n\t\t\t\t\t\tvar oldThemes = [\"ModBox\", \"Nepbox\", \"Laffey\"];\r\n\t\t\t\t\t\tvar themeIndex = oldThemes.indexOf(jsonObject[\"theme\"]);\r\n\t\t\t\t\t\tthis.setSongTheme = themes[themeIndex];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\tthis.setSongTheme = jsonObject[\"theme\"];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.mix != undefined) {\r\n\t\t\t\tthis.mix = Config.mixNames.indexOf(jsonObject.mix);\r\n\t\t\t\tif (this.mix == -1) this.mix = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.sampleRate != undefined) {\r\n\t\t\t\tthis.sampleRate = Config.sampleRateNames.indexOf(jsonObject.sampleRate);\r\n\t\t\t\tif (this.sampleRate == -1) this.sampleRate = 2;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (jsonObject.key != undefined) {\r\n\t\t\t\tif (format == \"BeepBox\") {\r\n\t\t\t\t\tif (typeof(jsonObject.key) == \"number\") {\r\n\t\t\t\t\t\tthis.key = Config.oldKeys.length - 1 - (((jsonObject.key + 1200) >>> 0) % Config.oldKeys.length);\r\n\t\t\t\t\t} else if (typeof(jsonObject.key) == \"string\") {\r\n\t\t\t\t\t\tthis.key = Config.keys.map(key=>key.name).indexOf(jsonObject.key);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.key = Config.keys.map(key=>key.name).indexOf(jsonObject.key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (jsonObject.beatsPerMinute != undefined) {\r\n\t\t\t\tthis.tempo = jsonObject.beatsPerMinute;\r\n\t\t\t\tthis.tempo = clamp(Config.tempoMin, Config.tempoMax, this.tempo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (jsonObject.reverb != undefined) {\r\n\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, jsonObject.reverb | 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.blend != undefined) {\r\n\t\t\t\tthis.blend = clamp(0, Config.blendRange, jsonObject.blend | 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.riff != undefined) {\r\n\t\t\t\tthis.riff = clamp(0, Config.riffRange, jsonObject.riff | 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.detune != undefined) {\r\n\t\t\t\tthis.detune = clamp(0, Config.detuneRange, jsonObject.detune | 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.muff != undefined) {\r\n\t\t\t\tthis.muff = clamp(0, Config.muffRange, jsonObject.muff | 0);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (jsonObject.beatsPerBar != undefined) {\r\n\t\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject.beatsPerBar | 0));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (jsonObject.ticksPerBeat != undefined) {\r\n\t\t\t\tthis.partsPerBeat = jsonObject.ticksPerBeat | 0;\r\n\t\t\t\tif (Config.partCounts.indexOf(this.partsPerBeat) == -1) {\r\n\t\t\t\t\tthis.partsPerBeat = Config.partCounts[Config.partCounts.length - 1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet maxInstruments: number = 1;\r\n\t\t\tlet maxPatterns: number = 1;\r\n\t\t\tlet maxBars: number = 1;\r\n\t\t\tif (jsonObject.channels) {\r\n\t\t\t\tfor (const channelObject of jsonObject.channels) {\r\n\t\t\t\t\tif (channelObject.instruments) maxInstruments = Math.max(maxInstruments, channelObject.instruments.length | 0);\r\n\t\t\t\t\tif (channelObject.patterns) maxPatterns = Math.max(maxPatterns, channelObject.patterns.length | 0);\r\n\t\t\t\t\tif (channelObject.sequence) maxBars = Math.max(maxBars, channelObject.sequence.length | 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.instrumentsPerChannel = maxInstruments;\r\n\t\t\tthis.patternsPerChannel = maxPatterns;\r\n\t\t\tthis.barCount = maxBars;\r\n\t\t\t\r\n\t\t\tif (jsonObject.introBars != undefined) {\r\n\t\t\t\tthis.loopStart = clamp(0, this.barCount, jsonObject.introBars | 0);\r\n\t\t\t}\r\n\t\t\tif (jsonObject.loopBars != undefined) {\r\n\t\t\t\tthis.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject.loopBars | 0);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet pitchChannelCount = 0;\r\n\t\t\tlet drumChannelCount = 0;\r\n\t\t\tif (jsonObject.channels) {\r\n\t\t\t\tfor (let channel: number = 0; channel < jsonObject.channels.length; channel++) {\r\n\t\t\t\t\tlet channelObject: any = jsonObject.channels[channel];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (this.channels.length <= channel) this.channels[channel] = new Channel();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (channelObject.octaveScrollBar != undefined) {\r\n\t\t\t\t\t\tthis.channels[channel].octave = clamp(0, 5, channelObject.octaveScrollBar | 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = this.channels[channel].instruments.length; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].instruments[i] = new Instrument();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].instruments.length = this.instrumentsPerChannel;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = this.channels[channel].patterns.length; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].patterns[i] = new Pattern();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].patterns.length = this.patternsPerChannel;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[i] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].bars.length = this.barCount;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet isDrum: boolean = false;\r\n\t\t\t\t\tif (channelObject.type) {\r\n\t\t\t\t\t\tisDrum = (channelObject.type == \"drum\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// for older files, assume drums are channel 3.\r\n\t\t\t\t\t\tisDrum = (channel >= 3);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (isDrum) drumChannelCount++; else pitchChannelCount++;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\tlet instrumentObject: any = undefined;\r\n\t\t\t\t\t\tif (channelObject.instruments) instrumentObject = channelObject.instruments[i];\r\n\t\t\t\t\t\tif (instrumentObject == undefined) instrumentObject = {};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst oldTransitionNames: Dictionary<number> = {\"binary\": 0};\r\n\t\t\t\t\t\tconst transitionObject = instrumentObject.transition || instrumentObject.envelope; // the transition property used to be called envelope, so try that too.\r\n\t\t\t\t\t\tinstrument.transition = oldTransitionNames[transitionObject] != undefined ? oldTransitionNames[transitionObject] : Config.transitionNames.indexOf(transitionObject);\r\n\t\t\t\t\t\tif (instrument.transition == -1) instrument.transition = 1;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (isDrum) {\r\n\t\t\t\t\t\t\tif (instrumentObject.volume != undefined) {\r\n\t\t\t\t\t\t\t\tinstrument.volume = clamp(0, Config.volumeNames.length, Math.round(5 - (instrumentObject.volume | 0) / 20));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tinstrument.volume = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tinstrument.wave = Config.drumNames.indexOf(instrumentObject.wave);\r\n\t\t\t\t\t\t\tif (instrument.wave == -1) instrument.wave = 1;\r\n\t\t\t\t\t\t\tinstrument.imute = Config.imuteNames.indexOf(instrumentObject.imute);\r\n\t\t\t\t\t\t\tif (instrument.imute == -1) instrument.imute = 0;\r\n\t\t\t\t\t\t\tinstrument.ipan = Config.ipanValues.indexOf(instrumentObject.ipan);\r\n\t\t\t\t\t\t\tif (instrument.ipan == -1) instrument.ipan = 4;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinstrument.type = Config.instrumentTypeNames.indexOf(instrumentObject.type);\r\n\t\t\t\t\t\t\tif (instrument.type == null) instrument.type = InstrumentType.chip;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\t\t\t\tif (instrumentObject.volume != undefined) {\r\n\t\t\t\t\t\t\t\t\tinstrument.volume = clamp(0, Config.volumeNames.length, Math.round(5 - (instrumentObject.volume | 0) / 20));\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tinstrument.volume = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tinstrument.wave = Config.waveNames.indexOf(instrumentObject.wave);\r\n\t\t\t\t\t\t\t\tif (instrument.wave == -1) instrument.wave = 1;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst oldFilterNames: Dictionary<number> = {\"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4};\r\n\t\t\t\t\t\t\t\tinstrument.filter = oldFilterNames[instrumentObject.filter] != undefined ? oldFilterNames[instrumentObject.filter] : Config.filterNames.indexOf(instrumentObject.filter);\r\n\t\t\t\t\t\t\t\tif (instrument.filter == -1) instrument.filter = 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tinstrument.chorus = Config.chorusNames.indexOf(instrumentObject.chorus);\r\n\t\t\t\t\t\t\t\tif (instrument.chorus == -1) instrument.chorus = 0;\r\n\t\t\t\t\t\t\t\tinstrument.effect = Config.effectNames.indexOf(instrumentObject.effect);\r\n\t\t\t\t\t\t\t\tif (instrument.effect == -1) instrument.effect = 0;\r\n\t\t\t\t\t\t\t\tinstrument.harm = Config.harmNames.indexOf(instrumentObject.harm);\r\n\t\t\t\t\t\t\t\tif (instrument.harm == -1) instrument.harm = 0;\r\n\t\t\t\t\t\t\t\tinstrument.octoff = Config.octoffNames.indexOf(instrumentObject.octoff);\r\n\t\t\t\t\t\t\t\tif (instrument.octoff == -1) instrument.octoff = 0;\r\n\t\t\t\t\t\t\t\tinstrument.imute = Config.imuteNames.indexOf(instrumentObject.imute);\r\n\t\t\t\t\t\t\t\tif (instrument.imute == -1) instrument.imute = 0;\r\n\t\t\t\t\t\t\t\tinstrument.ipan = Config.ipanValues.indexOf(instrumentObject.ipan);\r\n\t\t\t\t\t\t\t\tif (instrument.ipan == -1) instrument.ipan = 4;\r\n\t\t\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t\t\tinstrument.type == InstrumentType.pwm\r\n\t\t\t\t\t\t\t\t|| instrument.type == InstrumentType.noise\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tif (instrument.type == InstrumentType.noise) {\r\n\t\t\t\t\t\t\t\t\tinstrument.type = InstrumentType.pwm;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (instrumentObject.volume != undefined) {\r\n\t\t\t\t\t\t\t\t\tinstrument.volume = clamp(0, Config.volumeNames.length, Math.round(5 - (instrumentObject.volume | 0) / 20));\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tinstrument.volume = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tinstrument.wave = Config.pwmwaveNames.indexOf(instrumentObject.wave);\r\n\t\t\t\t\t\t\t\tif (instrument.wave == -1) instrument.wave = 1;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst oldFilterNames: Dictionary<number> = {\"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4};\r\n\t\t\t\t\t\t\t\tinstrument.filter = oldFilterNames[instrumentObject.filter] != undefined ? oldFilterNames[instrumentObject.filter] : Config.filterNames.indexOf(instrumentObject.filter);\r\n\t\t\t\t\t\t\t\tif (instrument.filter == -1) instrument.filter = 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tinstrument.chorus = Config.chorusNames.indexOf(instrumentObject.chorus);\r\n\t\t\t\t\t\t\t\tif (instrument.chorus == -1) instrument.chorus = 0;\r\n\t\t\t\t\t\t\t\tinstrument.effect = Config.effectNames.indexOf(instrumentObject.effect);\r\n\t\t\t\t\t\t\t\tif (instrument.effect == -1) instrument.effect = 0;\r\n\t\t\t\t\t\t\t\tinstrument.harm = Config.harmNames.indexOf(instrumentObject.harm);\r\n\t\t\t\t\t\t\t\tif (instrument.harm == -1) instrument.harm = 0;\r\n\t\t\t\t\t\t\t\tinstrument.octoff = Config.octoffNames.indexOf(instrumentObject.octoff);\r\n\t\t\t\t\t\t\t\tif (instrument.octoff == -1) instrument.octoff = 0;\r\n\t\t\t\t\t\t\t\tinstrument.imute = Config.imuteNames.indexOf(instrumentObject.imute);\r\n\t\t\t\t\t\t\t\tif (instrument.imute == -1) instrument.imute = 0;\r\n\t\t\t\t\t\t\t\tinstrument.ipan = Config.ipanValues.indexOf(instrumentObject.ipan);\r\n\t\t\t\t\t\t\t\tif (instrument.ipan == -1) instrument.ipan = 4;\r\n\t\t\t\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\t\tinstrument.effect = Config.effectNames.indexOf(instrumentObject.effect);\r\n\t\t\t\t\t\t\t\tif (instrument.effect == -1) instrument.effect = 0;\r\n\r\n\t\t\t\t\t\t\t\tinstrument.octoff = Config.octoffNames.indexOf(instrumentObject.octoff);\r\n\t\t\t\t\t\t\t\tif (instrument.octoff == -1) instrument.octoff = 0;\r\n\r\n\t\t\t\t\t\t\t\tinstrument.fmChorus = Config.fmChorusNames.indexOf(instrumentObject.fmChorus);\r\n\t\t\t\t\t\t\t\tif (instrument.fmChorus == -1) instrument.fmChorus = 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tinstrument.algorithm = Config.operatorAlgorithmNames.indexOf(instrumentObject.algorithm);\r\n\t\t\t\t\t\t\t\tif (instrument.algorithm == -1) instrument.algorithm = 0;\r\n\t\t\t\t\t\t\t\tinstrument.feedbackType = Config.operatorFeedbackNames.indexOf(instrumentObject.feedbackType);\r\n\t\t\t\t\t\t\t\tif (instrument.feedbackType == -1) instrument.feedbackType = 0;\r\n\t\t\t\t\t\t\t\tif (instrumentObject.feedbackAmplitude != undefined) {\r\n\t\t\t\t\t\t\t\t\tinstrument.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject.feedbackAmplitude | 0);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tinstrument.feedbackAmplitude = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tinstrument.feedbackEnvelope = Config.operatorEnvelopeNames.indexOf(instrumentObject.feedbackEnvelope);\r\n\t\t\t\t\t\t\t\tif (instrument.feedbackEnvelope == -1) instrument.feedbackEnvelope = 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (let j: number = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\t\t\t\t\t\tconst operator: Operator = instrument.operators[j];\r\n\t\t\t\t\t\t\t\t\tlet operatorObject: any = undefined;\r\n\t\t\t\t\t\t\t\t\tif (instrumentObject.operators) operatorObject = instrumentObject.operators[j];\r\n\t\t\t\t\t\t\t\t\tif (operatorObject == undefined) operatorObject = {};\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\toperator.frequency = Config.operatorFrequencyNames.indexOf(operatorObject.frequency);\r\n\t\t\t\t\t\t\t\t\tif (operator.frequency == -1) operator.frequency = 0;\r\n\t\t\t\t\t\t\t\t\tif (operatorObject.amplitude != undefined) {\r\n\t\t\t\t\t\t\t\t\t\toperator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject.amplitude | 0);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\toperator.amplitude = 0;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\toperator.envelope = Config.operatorEnvelopeNames.indexOf(operatorObject.envelope);\r\n\t\t\t\t\t\t\t\t\tif (operator.envelope == -1) operator.envelope = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tinstrument.ipan = Config.ipanValues.indexOf(instrumentObject.ipan);\r\n\t\t\t\t\t\t\t\tif (instrument.ipan == -1) instrument.ipan = 4;\r\n\t\t\t\t\t\t\t\tinstrument.imute = Config.imuteNames.indexOf(instrumentObject.imute);\r\n\t\t\t\t\t\t\t\tif (instrument.imute == -1) instrument.imute = 0;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthrow new Error(\"Unrecognized instrument type.\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\t\tconst pattern: Pattern = this.channels[channel].patterns[i];\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tlet patternObject: any = undefined;\r\n\t\t\t\t\t\tif (channelObject.patterns) patternObject = channelObject.patterns[i];\r\n\t\t\t\t\t\tif (patternObject == undefined) continue;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tpattern.instrument = clamp(0, this.instrumentsPerChannel, (patternObject.instrument | 0) - 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tif (patternObject.notes && patternObject.notes.length > 0) {\r\n\t\t\t\t\t\t\tconst maxNoteCount: number = Math.min(this.beatsPerBar * this.partsPerBeat, patternObject.notes.length >>> 0);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t///@TODO: Consider supporting notes specified in any timing order, sorting them and truncating as necessary. \r\n\t\t\t\t\t\t\tlet tickClock: number = 0;\r\n\t\t\t\t\t\t\tfor (let j: number = 0; j < patternObject.notes.length; j++) {\r\n\t\t\t\t\t\t\t\tif (j >= maxNoteCount) break;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst noteObject = patternObject.notes[j];\r\n\t\t\t\t\t\t\t\tif (!noteObject || !noteObject.pitches || !(noteObject.pitches.length >= 1) || !noteObject.points || !(noteObject.points.length >= 2)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst note: Note = makeNote(0, 0, 0, 0);\r\n\t\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\t\tnote.pins = [];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject.pitches.length; k++) {\r\n\t\t\t\t\t\t\t\t\tconst pitch: number = noteObject.pitches[k] | 0;\r\n\t\t\t\t\t\t\t\t\tif (note.pitches.indexOf(pitch) != -1) continue;\r\n\t\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\t\tif (note.pitches.length >= 4) break;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlet noteClock: number = tickClock;\r\n\t\t\t\t\t\t\t\tlet startInterval: number = 0;\r\n\t\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject.points.length; k++) {\r\n\t\t\t\t\t\t\t\t\tconst pointObject: any = noteObject.points[k];\r\n\t\t\t\t\t\t\t\t\tif (pointObject == undefined || pointObject.tick == undefined) continue;\r\n\t\t\t\t\t\t\t\t\tconst interval: number = (pointObject.pitchBend == undefined) ? 0 : (pointObject.pitchBend | 0);\r\n\t\t\t\t\t\t\t\t\tconst time: number = pointObject.tick | 0;\r\n\t\t\t\t\t\t\t\t\tconst volume: number = (pointObject.volume == undefined) ? 3 : Math.max(0, Math.min(3, Math.round((pointObject.volume | 0) * 3 / 100)));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (time > this.beatsPerBar * this.partsPerBeat) continue;\r\n\t\t\t\t\t\t\t\t\tif (note.pins.length == 0) {\r\n\t\t\t\t\t\t\t\t\t\tif (time < noteClock) continue;\r\n\t\t\t\t\t\t\t\t\t\tnote.start = time;\r\n\t\t\t\t\t\t\t\t\t\tstartInterval = interval;\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tif (time <= noteClock) continue;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tnoteClock = time;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tnote.pins.push(makeNotePin(interval - startInterval, time - note.start, volume));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (note.pins.length < 2) continue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tnote.end = note.pins[note.pins.length - 1].time + note.start;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst maxPitch: number = isDrum ? Config.drumCount - 1 : Config.maxPitch;\r\n\t\t\t\t\t\t\t\tlet lowestPitch: number = maxPitch;\r\n\t\t\t\t\t\t\t\tlet highestPitch: number = 0;\r\n\t\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pitches.length; k++) {\r\n\t\t\t\t\t\t\t\t\tnote.pitches[k] += startInterval;\r\n\t\t\t\t\t\t\t\t\tif (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n\t\t\t\t\t\t\t\t\t\tnote.pitches.splice(k, 1);\r\n\t\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t\t\tif (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pins.length; k++) {\r\n\t\t\t\t\t\t\t\t\tconst pin: NotePin = note.pins[k];\r\n\t\t\t\t\t\t\t\t\tif (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n\t\t\t\t\t\t\t\t\tif (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n\t\t\t\t\t\t\t\t\tif (k >= 2) {\r\n\t\t\t\t\t\t\t\t\t\tif (pin.interval == note.pins[k-1].interval && \r\n\t\t\t\t\t\t\t\t\t\t\tpin.interval == note.pins[k-2].interval && \r\n\t\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k-1].volume && \r\n\t\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k-2].volume)\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tnote.pins.splice(k-1, 1);\r\n\t\t\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t\t\t}    \r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tpattern.notes.push(note);\r\n\t\t\t\t\t\t\t\ttickClock = note.end;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[i] = channelObject.sequence ? Math.min(this.patternsPerChannel, channelObject.sequence[i] >>> 0) : 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.pitchChannelCount = pitchChannelCount;\r\n\t\t\tthis.drumChannelCount = drumChannelCount;\r\n\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t}\r\n\t\t\r\n\t\tpublic getPattern(channel: number, bar: number): Pattern | null {\r\n\t\t\tconst patternIndex: number = this.channels[channel].bars[bar];\r\n\t\t\tif (patternIndex == 0) return null;\r\n\t\t\treturn this.channels[channel].patterns[patternIndex - 1];\r\n\t\t}\r\n\t\t\r\n\t\tpublic getPatternInstrument(channel: number, bar: number): number {\r\n\t\t\tconst pattern: Pattern | null = this.getPattern(channel, bar);\r\n\t\t\treturn pattern == null ? 0 : pattern.instrument;\r\n\t\t}\r\n\r\n\t\tpublic getPatternInstrumentMute(channel: number, bar: number): number {\r\n\t\t\tconst pattern: Pattern | null = this.getPattern(channel, bar);\r\n\t\t\tconst instrumentIndex: number = this.getPatternInstrument(channel, bar);\r\n\t\t\tconst instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\t\t\treturn pattern == null ? 0 : instrument.imute;\r\n\t\t}\r\n\r\n\t\tpublic getPatternInstrumentVolume(channel: number, bar: number): number {\r\n\t\t\tconst pattern: Pattern | null = this.getPattern(channel, bar);\r\n\t\t\tconst instrumentIndex: number = this.getPatternInstrument(channel, bar);\r\n\t\t\tconst instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\t\t\treturn pattern == null ? 0 : instrument.volume;\r\n\t\t}\r\n\t\t\r\n\t\tpublic getBeatsPerMinute(): number {\r\n\t\t\treturn this.tempo;\r\n\t\t}\r\n\t\t\r\n\t\tprivate readonly _fingerprint: Array<string | number> = [];\r\n\t\tpublic getChannelFingerprint(bar: number): string {\r\n\t\t\tconst channelCount: number = this.getChannelCount();\r\n\t\t\tlet charCount: number = 0;\r\n\t\t\tfor (let channel: number = 0; channel < channelCount; channel++) {\r\n\t\t\t\tif (channel < this.pitchChannelCount) {\r\n\t\t\t\t\tconst instrumentIndex: number = this.getPatternInstrument(channel, bar);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\t\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\t\tthis._fingerprint[charCount++] = \"c\";\r\n\t\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\t\tthis._fingerprint[charCount++] = \"f\"\r\n\t\t\t\t\t\tthis._fingerprint[charCount++] = instrument.algorithm;\r\n\t\t\t\t\t\tthis._fingerprint[charCount++] = instrument.feedbackType;\r\n\t\t\t\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t\t\t\tthis._fingerprint[charCount++] = \"p\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error(\"Unknown instrument type.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._fingerprint[charCount++] = \"d\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._fingerprint.length = charCount;\r\n\t\t\treturn this._fingerprint.join(\"\");\r\n\t\t}\r\n\t}","/*\r\nCopyright (C) 2018 John Nesky\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\nimport { Config, Dictionary, InstrumentType, EnvelopeType } from \"./SynthConfig\";\r\nimport { Instrument, Song, Note, NotePin, Pattern } from \"./song\";\r\n//import { Deque } from \"./Deque\";\r\n\r\n\tdeclare global {\r\n\t\tinterface Window {\r\n\t\t\tAudioContext: any;\r\n\t\t\twebkitAudioContext: any;\r\n\t\t}\r\n\t}\r\n\r\n\tclass SynthChannel {\r\n\t\tpublic sampleLeft: number = 0.0;\r\n\t\tpublic sampleRight: number = 0.0;\r\n\t\tpublic readonly phases: number[] = [];\r\n\t\tpublic readonly phaseDeltas: number[] = [];\r\n\t\tpublic readonly volumeStarts: number[] = [];\r\n\t\tpublic readonly volumeDeltas: number[] = [];\r\n\t\tpublic readonly volumeLeft: number[] = [];\r\n\t\tpublic readonly volumeRight: number[] = [];\r\n\t\tpublic phaseDeltaScale: number = 0.0;\r\n\t\tpublic filter: number = 0.0;\r\n\t\tpublic filterScale: number = 0.0;\r\n\t\tpublic vibratoScale: number = 0.0;\r\n\t\tpublic harmonyMult: number = 0.0;\r\n\t\tpublic harmonyVolumeMult: number = 1.0;\r\n\t\tpublic feedbackOutputs: number[] = [];\r\n\t\tpublic feedbackMult: number = 0.0;\r\n\t\tpublic feedbackDelta: number = 0.0;\r\n\t\t\r\n\t\tconstructor() {\r\n\t\t\tthis.reset();\r\n\t\t}\r\n\t\t\r\n\t\tpublic reset(): void {\r\n\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\tthis.phases[i] = 0.0;\r\n\t\t\t\tthis.feedbackOutputs[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.sampleLeft = 0.0;\r\n\t\t\tthis.sampleRight = 0.0;\r\n\t\t}\r\n\t}\r\n\t\r\n\texport class Tone {\r\n\t\tpublic instrument: Instrument;\r\n\t\tpublic readonly pitches: number[] = [0, 0, 0, 0];\r\n\t\tpublic pitchCount: number = 0;\r\n\t\tpublic chordSize: number = 0;\r\n\t\tpublic drumsetPitch: number = 0;\r\n\t\tpublic note: Note | null = null;\r\n\t\tpublic prevNote: Note | null = null;\r\n\t\tpublic nextNote: Note | null = null;\r\n\t\tpublic prevNotePitchIndex: number = 0;\r\n\t\tpublic nextNotePitchIndex: number = 0;\r\n\t\tpublic active: boolean = false;\r\n\t\tpublic noteStart: number = 0;\r\n\t\tpublic noteEnd: number = 0;\r\n\t\tpublic noteLengthTicks: number = 0;\r\n\t\tpublic ticksSinceReleased: number = 0;\r\n\t\tpublic liveInputSamplesHeld: number = 0;\r\n\t\tpublic lastInterval: number = 0;\r\n\t\tpublic lastVolume: number = 0;\r\n\t\tpublic stereoVolume1: number = 0.0;\r\n\t\tpublic stereoVolume2: number = 0.0;\r\n\t\tpublic stereoOffset: number = 0.0;\r\n\t\tpublic stereoDelay: number = 0.0;\r\n\t\tpublic sample: number = 0.0;\r\n\t\tpublic readonly phases: number[] = [];\r\n\t\tpublic readonly phaseDeltas: number[] = [];\r\n\t\tpublic readonly volumeStarts: number[] = [];\r\n\t\tpublic readonly volumeDeltas: number[] = [];\r\n\t\tpublic volumeStart: number = 0.0;\r\n\t\tpublic volumeDelta: number = 0.0;\r\n\t\tpublic phaseDeltaScale: number = 0.0;\r\n\t\tpublic pulseWidth: number = 0.0;\r\n\t\tpublic pulseWidthDelta: number = 0.0;\r\n\t\tpublic filter: number = 0.0;\r\n\t\tpublic filterScale: number = 0.0;\r\n\t\tpublic filterSample0: number = 0.0;\r\n\t\tpublic filterSample1: number = 0.0;\r\n\t\tpublic vibratoScale: number = 0.0;\r\n\t\tpublic intervalMult: number = 0.0;\r\n\t\tpublic intervalVolumeMult: number = 1.0;\r\n\t\tpublic feedbackOutputs: number[] = [];\r\n\t\tpublic feedbackMult: number = 0.0;\r\n\t\tpublic feedbackDelta: number = 0.0;\r\n\t\t\r\n\t\tconstructor() {\r\n\t\t\tthis.reset();\r\n\t\t}\r\n\t\t\r\n\t\tpublic reset(): void {\r\n\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\tthis.phases[i] = 0.0;\r\n\t\t\t\tthis.feedbackOutputs[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.sample = 0.0;\r\n\t\t\tthis.filterSample0 = 0.0;\r\n\t\t\tthis.filterSample1 = 0.0;\r\n\t\t\tthis.liveInputSamplesHeld = 0.0;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Synth {\r\n\t\t\r\n\t\tprivate static warmUpSynthesizer(song: Song | null): void {\r\n\t\t\t// Don't bother to generate the drum waves unless the song actually\r\n\t\t\t// uses them, since they may require a lot of computation.\r\n\t\t\tif (song != null) {\r\n\t\t\t\tfor (let i: number = 0; i < song.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tfor (let j: number = song.pitchChannelCount; j < song.pitchChannelCount + song.drumChannelCount; j++) {\r\n\t\t\t\t\t\tConfig.getDrumWave(song.channels[j].instruments[i].wave);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (let i: number = 0; i < song.barCount; i++) {\r\n\t\t\t\t\tSynth.getGeneratedSynthesizer(song, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tprivate static operatorAmplitudeCurve(amplitude: number): number {\r\n\t\t\treturn (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n\t\t}\r\n\t\t\r\n\t\tprivate static readonly negativePhaseGuard: number = 1000;\r\n\t\t\r\n\t\tpublic samplesPerSecond: number = 44100;\r\n\t\tprivate effectDuration: number = 0.14;\r\n\t\tprivate effectAngle: number = Math.PI * 2.0 / (this.effectDuration * this.samplesPerSecond);\r\n\t\tpublic effectYMult: number = 2.0 * Math.cos(this.effectAngle);\r\n\t\tpublic limitDecay: number = 1.0 / (2.0 * this.samplesPerSecond);\r\n\t\t\r\n\t\tpublic song: Song | null = null;\r\n\t\tpublic pianoPressed: boolean = false;\r\n\t\tpublic pianoPitch: number[] = [0];\r\n\t\tpublic pianoChannel: number = 0;\r\n\t\tpublic enableIntro: boolean = true;\r\n\t\tpublic enableOutro: boolean = false;\r\n\t\tpublic loopCount: number = -1;\r\n\t\tpublic volume: number = 1.0;\r\n\t\t\r\n\t\tpublic liveInputDuration: number = 0;\r\n\t\tpublic liveInputStarted: boolean = false;\r\n\t\tpublic liveInputPitches: number[] = [];\r\n\t\tpublic liveInputChannel: number = 0;\r\n\t\t\r\n\t\tprivate playheadInternal: number = 0.0;\r\n\t\tprivate bar: number = 0;\r\n\t\tprivate beat: number = 0;\r\n\t\tprivate part: number = 0;\r\n\t\tprivate arpeggio: number = 0;\r\n\t\tprivate arpSampleCountdown: number = 0;\r\n\t\tprivate isPlaying: boolean = false;\r\n\t\tprivate liveInputEndTime: number = 0.0;\r\n\t\tprivate browserAutomaticallyClearsAudioBuffer: boolean = true;\r\n\t\t\r\n\t\tprivate readonly channels: SynthChannel[] = [];\r\n\t\tpublic stillGoing: boolean = false;\r\n\t\tpublic effectPhase: number = 0.0;\r\n\t\tpublic limit: number = 0.0;\r\n\t\t\r\n\t\tprivate delayLineLeft: Float32Array = new Float32Array(16384);\r\n\t\tprivate delayLineRight: Float32Array = new Float32Array(16384);\r\n\t\tpublic delayPosLeft: number = 0;\r\n\t\tpublic delayPosRight: number = 0;\r\n\t\tpublic delayFeedback0Left: number = 0.0;\r\n\t\tpublic delayFeedback0Right: number = 0.0;\r\n\t\tpublic delayFeedback1Left: number = 0.0;\r\n\t\tpublic delayFeedback1Right: number = 0.0;\r\n\t\tpublic delayFeedback2Left: number = 0.0;\r\n\t\tpublic delayFeedback2Right: number = 0.0;\r\n\t\tpublic delayFeedback3Left: number = 0.0;\r\n\t\tpublic delayFeedback3Right: number = 0.0;\r\n\t\t\r\n\t\tprivate audioCtx: any | null = null;\r\n\t\tprivate scriptNode: any | null = null;\r\n\t\t\r\n\t\tpublic get playing(): boolean {\r\n\t\t\treturn this.isPlaying;\r\n\t\t}\r\n\t\t\r\n\t\tpublic get playhead(): number {\r\n\t\t\treturn this.playheadInternal;\r\n\t\t}\r\n\t\t\r\n\t\tpublic set playhead(value: number) {\r\n\t\t\tif (this.song != null) {\r\n\t\t\t\tthis.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n\t\t\t\tlet remainder: number = this.playheadInternal;\r\n\t\t\t\tthis.bar = Math.floor(remainder);\r\n\t\t\t\tremainder = this.song.beatsPerBar * (remainder - this.bar);\r\n\t\t\t\tthis.beat = Math.floor(remainder);\r\n\t\t\t\tremainder = this.song.partsPerBeat * (remainder - this.beat);\r\n\t\t\t\tthis.part = Math.floor(remainder);\r\n\t\t\t\tremainder = 4 * (remainder - this.part);\r\n\t\t\t\tthis.arpeggio = Math.floor(remainder);\r\n\t\t\t\tconst samplesPerTick: number = this.getSamplesPerArpeggio();\r\n\t\t\t\tremainder = samplesPerTick * (remainder - this.arpeggio);\r\n\t\t\t\tthis.arpSampleCountdown = Math.floor(samplesPerTick - remainder);\r\n\t\t\t\tif (this.bar < this.song.loopStart) {\r\n\t\t\t\t\tthis.enableIntro = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.bar > this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\tthis.enableOutro = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic get totalSamples(): number {\r\n\t\t\tif (this.song == null) return 0;\r\n\t\t\tconst samplesPerBar: number = this.getSamplesPerArpeggio() * 4 * this.song.partsPerBeat * this.song.beatsPerBar;\r\n\t\t\tlet loopMinCount: number = this.loopCount;\r\n\t\t\tif (loopMinCount < 0) loopMinCount = 1;\r\n\t\t\tlet bars: number = this.song.loopLength * loopMinCount;\r\n\t\t\tif (this.enableIntro) bars += this.song.loopStart;\r\n\t\t\tif (this.enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n\t\t\treturn bars * samplesPerBar;\r\n\t\t}\r\n\t\t\r\n\t\tpublic get totalSeconds(): number {\r\n\t\t\t// @TODO: Revisit\r\n\t\t\treturn Math.round(this.totalSamples / this.samplesPerSecond);\r\n\t\t}\r\n\t\t\r\n\t\tpublic get totalBars(): number {\r\n\t\t\tif (this.song == null) return 0.0;\r\n\t\t\treturn this.song.barCount;\r\n\t\t}\r\n\t\t\r\n\t\tconstructor(song: any = null) {\r\n\t\t\tif (song != null) this.setSong(song);\r\n\t\t}\r\n\t\t\r\n\t\tpublic setSong(song: any): void {\r\n\t\t\tif (typeof(song) == \"string\") {\r\n\t\t\t\tthis.song = new Song(song);\r\n\t\t\t} else if (song instanceof Song) {\r\n\t\t\t\tthis.song = song;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate spsCalc(): number {\r\n\t\t\tSynth.warmUpSynthesizer(this.song);\r\n\t\t\tif (this.song!.sampleRate == 0) return 44100;\r\n\t\t\telse if (this.song!.sampleRate == 1) return 48000;\r\n\t\t\telse if (this.song!.sampleRate == 2) return this.audioCtx.sampleRate;\r\n\t\t\telse if (this.song!.sampleRate == 3) return this.audioCtx.sampleRate * 4;\r\n\t\t\telse if (this.song!.sampleRate == 4) return this.audioCtx.sampleRate * 2;\r\n\t\t\telse if (this.song!.sampleRate == 5) return this.audioCtx.sampleRate / 2;\r\n\t\t\telse if (this.song!.sampleRate == 6) return this.audioCtx.sampleRate / 4;\r\n\t\t\telse if (this.song!.sampleRate == 7) return this.audioCtx.sampleRate / 8;\r\n\t\t\telse if (this.song!.sampleRate == 8) return this.audioCtx.sampleRate / 16;\r\n\t\t\telse return this.audioCtx.sampleRate;\r\n\t\t}\r\n\r\n\t\tprivate activateAudio(): void {\r\n\t\t\tif (this.audioCtx == null || this.scriptNode == null) {\r\n\t\t\t\tif (this.scriptNode != null) this.deactivateAudio();\r\n\t\t\t\tthis.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext);\r\n\t\t\t\tthis.samplesPerSecond = this.spsCalc();\r\n\t\t\t\tthis.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(2048, 0, 2) : this.audioCtx.createJavaScriptNode(2048, 0, 2); \r\n\t\t\t\tthis.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n\t\t\t\tthis.scriptNode.channelCountMode = 'explicit';\r\n\t\t\t\tthis.scriptNode.channelInterpretation = 'speakers';\r\n\r\n\t\t\t\tthis.effectAngle = Math.PI * 2.0 / (this.effectDuration * this.samplesPerSecond);\r\n\t\t\t\tthis.effectYMult = 2.0 * Math.cos(this.effectAngle);\r\n\t\t\t\tthis.limitDecay = 1.0 / (2.0 * this.samplesPerSecond);\r\n\t\t\t\t\r\n\t\t\t\tthis.scriptNode.connect(this.audioCtx.destination);\r\n\t\t\t}\r\n\t\t\tthis.audioCtx.resume();\r\n\t\t}\r\n\t\t\r\n\t\tprivate deactivateAudio(): void {\r\n\t\t\tif (this.audioCtx != null && this.scriptNode != null) {\r\n\t\t\t\tthis.scriptNode.disconnect(this.audioCtx.destination);\r\n\t\t\t\tthis.scriptNode = null;\r\n\t\t\t\tif (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n\t\t\t\tthis.audioCtx = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\tpublic maintainLiveInput(): void {\r\n\t\t\t\tthis.activateAudio();\r\n\t\t\t\tthis.liveInputEndTime = performance.now() + 10000.0;\r\n\t\t\t}\r\n\r\n\t\tpublic play(): void {\r\n\t\t\tif (this.isPlaying) return;\r\n\t\t\tthis.isPlaying = true;\r\n\t\t\t\r\n\t\t\tSynth.warmUpSynthesizer(this.song);\r\n\t\t\tthis.activateAudio();\r\n\t\t}\r\n\t\t\r\n\t\tpublic pause(): void {\r\n\t\t\tif (!this.isPlaying) return;\r\n\t\t\tthis.isPlaying = false;\r\n\t\t\tthis.deactivateAudio();\r\n\t\t\tthis.scriptNode = null;\r\n\t\t}\r\n\t\t\r\n\t\t/*private determineLiveInputTones(song: Song): void {\r\n\t\t\tconst toneList: Deque<Tone> = this.liveInputTones;\r\n\t\t\tconst pitches: number[] = this.liveInputPitches;\r\n\t\t\tlet toneCount: number = 0;\r\n\t\t\tif (this.liveInputDuration > 0) {\r\n\t\t\t\tconst instrument: Instrument = song.channels[this.liveInputChannel].instruments[song.getPatternInstrument(this.liveInputChannel, this.bar)];\r\n\t\t\t\t\r\n\t\t\t\tif (instrument.getChord().arpeggiates) {\r\n\t\t\t\t\tlet tone: Tone;\r\n\t\t\t\t\tif (toneList.count() == 0) {\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popFront());\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttone = toneList.get(0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttoneCount = 1;\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\t\ttone.pitches[i] = pitches[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttone.pitchCount = pitches.length;\r\n\t\t\t\t\ttone.chordSize = 1;\r\n\t\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//const transition: Transition = instrument.getTransition();\r\n\t\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\t\t//const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n\t\t\t\t\t\tlet tone: Tone;\r\n\t\t\t\t\t\tif (toneList.count() <= i) {\r\n\t\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.get(i));\r\n\t\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\t\ttoneList.set(i, tone);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttone = toneList.get(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttoneCount++;\r\n\r\n\t\t\t\t\t\ttone.pitches[0] = pitches[i];\r\n\t\t\t\t\t\ttone.pitchCount = 1;\r\n\t\t\t\t\t\ttone.chordSize = pitches.length;\r\n\t\t\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twhile (toneList.count() > toneCount) {\r\n\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popBack());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.liveInputStarted = false;\r\n\t\t}*/\r\n\r\n\t\tpublic snapToStart(): void {\r\n\t\t\tthis.bar = 0;\r\n\t\t\tthis.enableIntro = true;\r\n\t\t\tthis.snapToBar();\r\n\t\t}\r\n\t\t\r\n\t\tpublic snapToBar(bar?: number): void {\r\n\t\t\tif (bar !== undefined) this.bar = bar;\r\n\t\t\tthis.playheadInternal = this.bar;\r\n\t\t\tthis.beat = 0;\r\n\t\t\tthis.part = 0;\r\n\t\t\tthis.arpeggio = 0;\r\n\t\t\tthis.arpSampleCountdown = 0;\r\n\t\t\tthis.effectPhase = 0.0;\r\n\t\t\t\r\n\t\t\tfor (const channel of this.channels) channel.reset();\r\n\t\t\t\r\n\t\t\tthis.delayPosLeft = 0;\r\n\t\t\tthis.delayPosRight = 0;\r\n\t\t\tthis.delayFeedback0Left = 0.0;\r\n\t\t\tthis.delayFeedback0Right = 0.0;\r\n\t\t\tthis.delayFeedback1Left = 0.0;\r\n\t\t\tthis.delayFeedback1Right = 0.0;\r\n\t\t\tthis.delayFeedback2Left = 0.0;\r\n\t\t\tthis.delayFeedback2Right = 0.0;\r\n\t\t\tthis.delayFeedback3Left = 0.0;\r\n\t\t\tthis.delayFeedback3Right = 0.0;\r\n\t\t\tfor (let i: number = 0; i < this.delayLineLeft.length; i++) this.delayLineLeft[i] = 0.0;\r\n\t\t\tfor (let i: number = 0; i < this.delayLineRight.length; i++) this.delayLineRight[i] = 0.0;\r\n\t\t}\r\n\t\t\r\n\t\tpublic nextBar(): void {\r\n\t\t\tif (!this.song) return;\r\n\t\t\tconst oldBar: number = this.bar;\r\n\t\t\tthis.bar++;\r\n\t\t\tif (this.enableOutro) {\r\n\t\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\t\tthis.bar = this.enableIntro ? 0 : this.song.loopStart;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (this.bar >= this.song.loopStart + this.song.loopLength || this.bar >= this.song.barCount) {\r\n\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t}\r\n \t\t\t}\r\n\t\t\tthis.playheadInternal += this.bar - oldBar;\r\n\t\t}\r\n\t\t\r\n\t\tpublic prevBar(): void {\r\n\t\t\tif (!this.song) return;\r\n\t\t\tconst oldBar: number = this.bar;\r\n\t\t\tthis.bar--;\r\n\t\t\tif (this.bar < 0) {\r\n\t\t\t\tthis.bar = this.song.loopStart + this.song.loopLength - 1;\r\n\t\t\t}\r\n\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\tthis.bar = this.song.barCount - 1;\r\n\t\t\t}\r\n\t\t\tif (this.bar < this.song.loopStart) {\r\n\t\t\t\tthis.enableIntro = true;\r\n\t\t\t}\r\n\t\t\tif (!this.enableOutro && this.bar >= this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\tthis.bar = this.song.loopStart + this.song.loopLength - 1;\r\n\t\t\t}\r\n\t\t\tthis.playheadInternal += this.bar - oldBar;\r\n\t\t}\r\n\t\t\r\n\t\tprivate audioProcessCallback = (audioProcessingEvent: any): void => {\r\n\t\t\tconst outputBuffer = audioProcessingEvent.outputBuffer;\r\n\t\t\tconst outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n\t\t\tconst outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n\t\t\tif (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length-1] != 0.0 || outputDataR[outputBuffer.length-1] != 0.0)) {\r\n\t\t\t// If the buffer is ever initially nonzero, then this must be an older browser that doesn't automatically clear the audio buffer.\r\n\t\t\tthis.browserAutomaticallyClearsAudioBuffer = false;\r\n\t\t\t}\r\n\t\t\tif (!this.browserAutomaticallyClearsAudioBuffer) {\r\n\t\t\t\t// If this browser does not clear the buffer automatically, do so manually before continuing.\r\n\t\t\t\tconst length: number = outputBuffer.length;\r\n\t\t\t\tfor (let i: number = 0; i < length; i++) {\r\n\t\t\t\t\toutputDataL[i] = 0.0;\r\n\t\t\t\t\toutputDataR[i] = 0.0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.isPlaying && performance.now() >= this.liveInputEndTime) { \r\n\t\t\t\tthis.deactivateAudio();\r\n\t\t\t} else {\r\n\t\t\t\tthis.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlaying);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic synthesize(dataLeft: Float32Array, dataRight: Float32Array, bufferLength: number, playSong: boolean = true): void {\r\n\t\t\tif (this.song == null) {\r\n\t\t\t\tfor (let i: number = 0; i < bufferLength; i++) {\r\n\t\t\t\t\tdataLeft[i] = 0.0;\r\n\t\t\t\t\tdataRight[i] = 0.0;\r\n\t\t\t\t}\r\n\t\t\t\tthis.deactivateAudio();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst channelCount: number = this.song.getChannelCount();\r\n\t\t\tfor (let i: number = this.channels.length; i < channelCount; i++) {\r\n\t\t\t\tthis.channels[i] = new SynthChannel();\r\n\t\t\t}\r\n\t\t\tthis.channels.length = channelCount;\r\n\t\t\t\r\n\t\t\tconst samplesPerTick: number = this.getSamplesPerArpeggio();\r\n\t\t\tlet bufferIndex: number = 0;\r\n\t\t\tlet ended: boolean = false;\r\n\t\t\t\r\n\t\t\t// Check the bounds of the playhead:\r\n\t\t\tif (this.arpSampleCountdown == 0 || this.arpSampleCountdown > samplesPerTick) {\r\n\t\t\t\tthis.arpSampleCountdown = samplesPerTick;\r\n\t\t\t}\r\n\t\t\tif (playSong) {\r\n\t\t\t\tif (this.part >= this.song.partsPerBeat) {\r\n\t\t\t\t\tthis.beat++;\r\n\t\t\t\t\tthis.part = 0;\r\n\t\t\t\t\tthis.arpeggio = 0;\r\n\t\t\t\t\tthis.arpSampleCountdown = samplesPerTick;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.beat >= this.song.beatsPerBar) {\r\n\t\t\t\t\tthis.bar++;\r\n\t\t\t\t\tthis.beat = 0;\r\n\t\t\t\t\tthis.part = 0;\r\n\t\t\t\t\tthis.arpeggio = 0;\r\n\t\t\t\t\tthis.arpSampleCountdown = samplesPerTick;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (this.loopCount == -1) {\r\n\t\t\t\t\t\tif (this.bar < this.song.loopStart && !this.enableIntro) this.bar = this.song.loopStart;\r\n\t\t\t\t\t\tif (this.bar >= this.song.loopStart + this.song.loopLength && !this.enableOutro) this.bar = this.song.loopStart;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\t\tif (this.enableOutro) {\r\n\t\t\t\t\t\tthis.bar = 0;\r\n\t\t\t\t\t\tthis.enableIntro = true;\r\n\t\t\t\t\t\tended = true;\r\n\t\t\t\t\t\tthis.pause();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.bar >= this.song.loopStart) {\r\n\t\t\t\t\tthis.enableIntro = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n \t\t\twhile (true) {\r\n\t\t\t\tif (ended) {\r\n\t\t\t\t\twhile (bufferIndex < bufferLength) {\r\n\t\t\t\t\t\tdataLeft[bufferIndex] = 0.0;\r\n\t\t\t\t\t\tdataRight[bufferIndex] = 0.0;\r\n\t\t\t\t\t\tbufferIndex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst generatedSynthesizer: Function = Synth.getGeneratedSynthesizer(this.song, this.bar);\r\n\t\t\t\tbufferIndex = generatedSynthesizer(this, this.song, dataLeft, dataRight, bufferLength, bufferIndex, samplesPerTick);\r\n\t\t\t\t\r\n\t\t\t\tconst finishedBuffer: boolean = (bufferIndex == -1);\r\n\t\t\t\tif (finishedBuffer) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// bar changed, reset for next bar:\r\n\t\t\t\t\tthis.beat = 0;\r\n\t\t\t\t\tthis.effectPhase = 0.0;\r\n\t\t\t\t\tthis.bar++;\r\n\t\t\t\t\tif (this.bar < this.song.loopStart) {\r\n\t\t\t\t\t\tif (!this.enableIntro) this.bar = this.song.loopStart;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.enableIntro = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.bar >= this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\t\tif (this.loopCount > 0) this.loopCount--;\r\n\t\t\t\t\t\tif (this.loopCount > 0 || !this.enableOutro) {\r\n\t\t\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\t\t\tthis.bar = 0;\r\n\t\t\t\t\t\tthis.enableIntro = true;\r\n\t\t\t\t\t\tended = true;\r\n\t\t\t\t\t\tthis.pause();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.playheadInternal = (((this.arpeggio + 1.0 - this.arpSampleCountdown / samplesPerTick) / 4.0 + this.part) / this.song.partsPerBeat + this.beat) / this.song.beatsPerBar + this.bar;\r\n\t\t}\r\n\r\n\t\tprivate static computeOperatorEnvelope(envelope: number, time: number, beats: number, customVolume: number): number {\r\n\t\t\tswitch(Config.operatorEnvelopeType[envelope]) {\r\n\t\t\t\tcase EnvelopeType.custom: return customVolume;\r\n\t\t\t\tcase EnvelopeType.steady: return 1.0;\r\n\t\t\t\tcase EnvelopeType.pluck:\r\n\t\t\t\t\tlet curve: number = 1.0 / (1.0 + time * Config.operatorEnvelopeSpeed[envelope]);\r\n\t\t\t\t\tif (Config.operatorEnvelopeInverted[envelope]) {\r\n\t\t\t\t\t\treturn 1.0 - curve;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn curve;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase EnvelopeType.tremolo: \r\n\t\t\t\t\tif (Config.operatorSpecialCustomVolume[envelope]) {\r\n\t\t\t\t\t\treturn 0.5 - Math.cos(beats * 2.0 * Math.PI * (customVolume * 4)) * 0.5;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn 0.5 - Math.cos(beats * 2.0 * Math.PI * Config.operatorEnvelopeSpeed[envelope]) * 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase EnvelopeType.punch: \r\n\t\t\t\t\treturn Math.max(1.0, 2.0 - time * 10.0);\r\n\t\t\t\tcase EnvelopeType.flare:\r\n\t\t\t\t\tif (Config.operatorSpecialCustomVolume[envelope]) {\r\n\t\t\t\t\t\tconst attack: number = 0.25 / Math.sqrt(customVolume);\r\n\t\t\t\t\t\treturn time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * (customVolume * 16));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst speed: number = Config.operatorEnvelopeSpeed[envelope];\r\n\t\t\t\t\t\tconst attack: number = 0.25 / Math.sqrt(speed);\r\n\t\t\t\t\t\treturn time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * speed);\r\n\t\t\t\t\t}\r\n\t\t\t\tcase EnvelopeType.flute:\r\n\t\t\t\t\treturn Math.max(-1.0 - time, -2.0 + time);\r\n\t\t\t\tdefault: throw new Error(\"Unrecognized operator envelope type.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic static computeChannelInstrument(synth: Synth, song: Song, channel: number, time: number, sampleTime: number, samplesPerTick: number, samples: number): void {\r\n\t\t\tconst isDrum: boolean = song.getChannelIsDrum(channel);\r\n\t\t\tconst synthChannel: SynthChannel = synth.channels[channel];\r\n\t\t\tconst pattern: Pattern | null = song.getPattern(channel, synth.bar);\r\n\t\t\tconst instrument: Instrument = song.channels[channel].instruments[pattern == null ? 0 : pattern.instrument];\r\n\t\t\tconst pianoMode = (synth.pianoPressed && channel == synth.pianoChannel);\r\n\t\t\tconst basePitch: number = isDrum ? Config.drumBasePitches[instrument.wave] : Config.keys[song.key].basePitch;\r\n\t\t\tconst intervalScale: number = isDrum ? Config.drumInterval : 1;\r\n\t\t\tconst pitchDamping: number = isDrum ? (Config.drumWaveIsSoft[instrument.wave] ? 24.0 : 60.0) : 48.0;\r\n\t\t\tconst secondsPerPart: number = 4.0 * samplesPerTick / synth.samplesPerSecond;\r\n\t\t\tconst beatsPerPart: number = 1.0 / song.partsPerBeat;\r\n\t\t\t\r\n\t\t\tsynthChannel.phaseDeltaScale = 0.0;\r\n\t\t\tsynthChannel.filter = 1.0;\r\n\t\t\tsynthChannel.filterScale = 1.0;\r\n\t\t\tsynthChannel.vibratoScale = 0.0;\r\n\t\t\tsynthChannel.harmonyMult = 1.0;\r\n\t\t\tsynthChannel.harmonyVolumeMult = 1.0;\r\n\t\t\t\r\n\t\t\tlet partsSinceStart: number = 0.0;\r\n\t\t\tlet arpeggio: number = synth.arpeggio;\r\n\t\t\tlet arpSampleCountdown: number = synth.arpSampleCountdown;\r\n\t\t\t\r\n\t\t\tlet pitches: number[] | null = null;\r\n\t\t\tlet resetPhases: boolean = true;\r\n\t\t\t\r\n\t\t\tlet intervalStart: number = 0.0;\r\n\t\t\tlet intervalEnd: number = 0.0;\r\n\t\t\tlet transitionVolumeStart: number = 1.0;\r\n\t\t\tlet transitionVolumeEnd: number = 1.0;\r\n\t\t\tlet envelopeVolumeStart: number = 0.0;\r\n\t\t\tlet envelopeVolumeEnd: number = 0.0;\r\n\t\t\t// TODO: probably part time can be calculated independently of any notes?\r\n\t\t\tlet partTimeStart: number = 0.0;\r\n\t\t\tlet partTimeEnd:   number = 0.0;\r\n\t\t\tlet decayTimeStart: number = 0.0;\r\n\t\t\tlet decayTimeEnd:   number = 0.0;\r\n\t\t\t\r\n\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\tsynthChannel.phaseDeltas[i] = 0.0;\r\n\t\t\t\tsynthChannel.volumeStarts[i] = 0.0;\r\n\t\t\t\tsynthChannel.volumeDeltas[i] = 0.0;\r\n\t\t\t\tsynthChannel.volumeLeft[0] = 0.0;\r\n\t\t\t\tsynthChannel.volumeRight[0] = 0.0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (pianoMode) {\r\n\t\t\t\tpitches = synth.pianoPitch;\r\n\t\t\t\ttransitionVolumeStart = transitionVolumeEnd = 1;\r\n\t\t\t\tenvelopeVolumeStart = envelopeVolumeEnd = 1;\r\n\t\t\t\tresetPhases = false;\r\n\t\t\t\t// TODO: track time since live piano note started for transition, envelope, decays, delayed vibrato, etc.\r\n\t\t\t} else if (pattern != null) {\r\n\t\t\t\tlet note: Note | null = null;\r\n\t\t\t\tlet prevNote: Note | null = null;\r\n\t\t\t\tlet nextNote: Note | null = null;\r\n\t\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\t\tif (pattern.notes[i].end <= time) {\r\n\t\t\t\t\t\tprevNote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n\t\t\t\t\t\tnote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start > time) {\r\n\t\t\t\t\t\tnextNote = pattern.notes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (note != null && prevNote != null && prevNote.end != note.start) prevNote = null;\r\n\t\t\t\tif (note != null && nextNote != null && nextNote.start != note.end) nextNote = null;\r\n\t\t\t\t\r\n\t\t\t\tif (note != null) {\r\n\t\t\t\t\tpitches = note.pitches;\r\n\t\t\t\t\tpartsSinceStart = time - note.start;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet endPinIndex: number;\r\n\t\t\t\t\tfor (endPinIndex = 1; endPinIndex < note.pins.length - 1; endPinIndex++) {\r\n\t\t\t\t\t\tif (note.pins[endPinIndex].time + note.start > time) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst startPin: NotePin = note.pins[endPinIndex-1];\r\n\t\t\t\t\tconst endPin: NotePin = note.pins[endPinIndex];\r\n\t\t\t\t\tconst noteStart: number = note.start * 4;\r\n\t\t\t\t\tconst noteEnd:   number = note.end   * 4;\r\n\t\t\t\t\tconst pinStart: number  = (note.start + startPin.time) * 4;\r\n\t\t\t\t\tconst pinEnd:   number  = (note.start +   endPin.time) * 4;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst tickTimeStart: number = time * 4 + arpeggio;\r\n\t\t\t\t\tconst tickTimeEnd:   number = time * 4 + arpeggio + 1;\r\n\t\t\t\t\tconst pinRatioStart: number = (tickTimeStart - pinStart) / (pinEnd - pinStart);\r\n\t\t\t\t\tconst pinRatioEnd:   number = (tickTimeEnd   - pinStart) / (pinEnd - pinStart);\r\n\t\t\t\t\tlet envelopeVolumeTickStart: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioStart;\r\n\t\t\t\t\tlet envelopeVolumeTickEnd:   number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioEnd;\r\n\t\t\t\t\tlet transitionVolumeTickStart: number = 1.0;\r\n\t\t\t\t\tlet transitionVolumeTickEnd:   number = 1.0;\r\n\t\t\t\t\tlet intervalTickStart: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n\t\t\t\t\tlet intervalTickEnd:   number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n\t\t\t\t\tlet partTimeTickStart: number = startPin.time + (endPin.time - startPin.time) * pinRatioStart;\r\n\t\t\t\t\tlet partTimeTickEnd:   number = startPin.time + (endPin.time - startPin.time) * pinRatioEnd;\r\n\t\t\t\t\tlet decayTimeTickStart: number = partTimeTickStart;\r\n\t\t\t\t\tlet decayTimeTickEnd:   number = partTimeTickEnd;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst startRatio: number = 1.0 - (arpSampleCountdown + samples) / samplesPerTick;\r\n\t\t\t\t\tconst endRatio:   number = 1.0 - (arpSampleCountdown)           / samplesPerTick;\r\n\t\t\t\t\tresetPhases = (tickTimeStart + startRatio - noteStart == 0.0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst transition: number = instrument.transition;\r\n\t\t\t\t\tif (tickTimeStart == noteStart) {\r\n\t\t\t\t\t\tif (transition == 0) {\r\n\t\t\t\t\t\t\t// seamless start\r\n\t\t\t\t\t\t\tresetPhases = false;\r\n\t\t\t\t\t\t} else if (transition == 2) {\r\n\t\t\t\t\t\t\t// smooth start\r\n\t\t\t\t\t\t\ttransitionVolumeTickStart = 0.0;\r\n\t\t\t\t\t\t} else if (transition == 3) {\r\n\t\t\t\t\t\t\t// slide start\r\n\t\t\t\t\t\t\tif (prevNote == null) {\r\n\t\t\t\t\t\t\t\ttransitionVolumeTickStart = 0.0;\r\n\t\t\t\t\t\t\t} else if (prevNote.pins[prevNote.pins.length-1].volume == 0 || note.pins[0].volume == 0) {\r\n\t\t\t\t\t\t\t\ttransitionVolumeTickStart = 0.0;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tintervalTickStart = (prevNote.pitches[0] + prevNote.pins[prevNote.pins.length-1].interval - note.pitches[0]) * 0.5;\r\n\t\t\t\t\t\t\t\tdecayTimeTickStart = prevNote.pins[prevNote.pins.length-1].time * 0.5;\r\n\t\t\t\t\t\t\t\tresetPhases = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (transition == 4) {\r\n\t\t\t\t\t\t\t// trill start\r\n\t\t\t\t\t\t\ttransitionVolumeTickEnd = 0.0;\r\n\t\t\t\t\t\t} else if (transition == 5) {\r\n\t\t\t\t\t\t\t// click start\r\n\t\t\t\t\t\t\tintervalTickStart = 100.0;\r\n\t\t\t\t\t\t} else if (transition == 6) {\r\n\t\t\t\t\t\t\t// bow start\r\n\t\t\t\t\t\t\tintervalTickStart = -1.0;\r\n\t\t\t\t\t\t} else if (transition == 7) {\r\n\t\t\t\t\t\t\t// blip start\r\n\t\t\t\t\t\t\ttransitionVolumeTickStart = 6.0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tickTimeEnd == noteEnd) {\r\n\t\t\t\t\t\tif (transition == 0) {\r\n\t\t\t\t\t\t\t// seamless ending: fade out, unless adjacent to another note or at end of bar.\r\n\t\t\t\t\t\t\tif (nextNote == null && note.start + endPin.time != song.partsPerBeat * song.beatsPerBar) {\r\n\t\t\t\t\t\t\t\ttransitionVolumeTickEnd = 0.0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (transition == 1 || transition == 2) {\r\n\t\t\t\t\t\t\t// sudden/smooth ending\r\n\t\t\t\t\t\t\ttransitionVolumeTickEnd = 0.0;\r\n\t\t\t\t\t\t} else if (transition == 3) {\r\n\t\t\t\t\t\t\t// slide ending\r\n\t\t\t\t\t\t\tif (nextNote == null) {\r\n\t\t\t\t\t\t\t\ttransitionVolumeTickEnd = 0.0;\r\n\t\t\t\t\t\t\t} else if (note.pins[note.pins.length-1].volume == 0 || nextNote.pins[0].volume == 0) {\r\n\t\t\t\t\t\t\t\ttransitionVolumeTickEnd = 0.0;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tintervalTickEnd = (nextNote.pitches[0] - note.pitches[0] + note.pins[note.pins.length-1].interval) * 0.5;\r\n\t\t\t\t\t\t\t\tdecayTimeTickEnd *= 0.5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tintervalStart = intervalTickStart + (intervalTickEnd - intervalTickStart) * startRatio;\r\n\t\t\t\t\tintervalEnd   = intervalTickStart + (intervalTickEnd - intervalTickStart) * endRatio;\r\n\t\t\t\t\tenvelopeVolumeStart = synth.volumeConversion(envelopeVolumeTickStart + (envelopeVolumeTickEnd - envelopeVolumeTickStart) * startRatio);\r\n\t\t\t\t\tenvelopeVolumeEnd   = synth.volumeConversion(envelopeVolumeTickStart + (envelopeVolumeTickEnd - envelopeVolumeTickStart) * endRatio);\r\n\t\t\t\t\ttransitionVolumeStart = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * startRatio;\r\n\t\t\t\t\ttransitionVolumeEnd   = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * endRatio;\r\n\t\t\t\t\tpartTimeStart = note.start + partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n\t\t\t\t\tpartTimeEnd   = note.start + partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\t\t\t\t\tdecayTimeStart = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * startRatio;\r\n\t\t\t\t\tdecayTimeEnd   = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * endRatio;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (pitches != null) {\r\n\t\t\t\tif (!isDrum && instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\t// phase modulation!\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet sineVolumeBoost: number = 1.0;\r\n\t\t\t\t\tlet totalCarrierVolume: number = 0.0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst carrierCount: number = Config.operatorCarrierCounts[instrument.algorithm];\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\t\t\tconst isCarrier: boolean = i < Config.operatorCarrierCounts[instrument.algorithm];\r\n\t\t\t\t\t\tconst associatedCarrierIndex: number = Config.operatorAssociatedCarrier[instrument.algorithm][i] - 1;\r\n\t\t\t\t\t\tconst pitch: number = pitches[(i < pitches.length) ? i : ((associatedCarrierIndex < pitches.length) ? associatedCarrierIndex : 0)] + Config.octoffValues[instrument.octoff] + (song.detune / 24);\r\n\t\t\t\t\t\tconst freqMult = Config.operatorFrequencies[instrument.operators[i].frequency];\r\n\t\t\t\t\t\tconst chorusInterval = Config.operatorCarrierChorus[Config.fmChorusNames[instrument.fmChorus]][associatedCarrierIndex];\r\n\t\t\t\t\t\tconst startPitch: number = (pitch + intervalStart) * intervalScale + chorusInterval;\r\n\t\t\t\t\t\tconst startFreq: number = freqMult * (synth.frequencyFromPitch(basePitch + startPitch)) + Config.operatorHzOffsets[instrument.operators[i].frequency];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsynthChannel.phaseDeltas[i] = startFreq * sampleTime * Config.sineWaveLength;\r\n\t\t\t\t\t\tif (resetPhases) synthChannel.reset();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst amplitudeCurve: number = Synth.operatorAmplitudeCurve(instrument.operators[i].amplitude);\r\n\t\t\t\t\t\t// const amplitudeMult: number = amplitudeCurve * Config.operatorAmplitudeSigns[instrument.operators[i].frequency];\r\n\t\t\t\t\t\t// @TODO: Revisit\r\n\t\t\t\t\t\tlet amplitudeMult: number = 0;\r\n\t\t\t\t\t\tif ((Config.volumeValues[instrument.volume] != -1.0 && song.mix == 2) || (Config.volumeMValues[instrument.volume] != -1.0 && song.mix != 2)) {\r\n\t\t\t\t\t\t\tif (song.mix == 2) {\r\n\t\t\t\t\t\t\t\tamplitudeMult = isCarrier ? (amplitudeCurve * Config.operatorAmplitudeSigns[instrument.operators[i].frequency]) * (1 - Config.volumeValues[instrument.volume] / 2.3) : (amplitudeCurve * Config.operatorAmplitudeSigns[instrument.operators[i].frequency]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tamplitudeMult = (amplitudeCurve * Config.operatorAmplitudeSigns[instrument.operators[i].frequency]) * (1 - Config.volumeMValues[instrument.volume] / 2.3);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (Config.volumeValues[instrument.volume] != -1.0) {\r\n\t\t\t\t\t\t\tamplitudeMult = 0;\r\n\t\t\t\t\t\t} else if (Config.volumeMValues[instrument.volume] != -1.0) {\r\n\t\t\t\t\t\t\tamplitudeMult = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet volumeStart: number = amplitudeMult * Config.imuteValues[instrument.imute];\r\n\t\t\t\t\t\tlet volumeEnd: number = amplitudeMult * Config.imuteValues[instrument.imute];\r\n\t\t\t\t\t\tsynthChannel.volumeLeft[0] = Math.min(1, 1 + Config.ipanValues[instrument.ipan]);\r\n\t\t\t\t\t\tsynthChannel.volumeRight[0] = Math.min(1, 1 - Config.ipanValues[instrument.ipan]);\r\n\t\t\t\t\t\tif (i < carrierCount) {\r\n\t\t\t\t\t\t\t// carrier\r\n\t\t\t\t\t\t\tconst volumeMult: number = 0.03;\r\n\t\t\t\t\t\t\t// The commented out portion in the line below fixes\r\n\t\t\t\t\t\t\t// the crackling heard when using FM chorus. It seems\r\n\t\t\t\t\t\t\t// that it was accidentally omitted in BeepBox 2.3.\r\n\t\t\t\t\t\t\tconst endPitch: number = (pitch + intervalEnd) * intervalScale/* + chorusInterval */;\r\n\t\t\t\t\t\t\tlet pitchVolumeStart: number = 0;\r\n\t\t\t\t\t\t\tlet pitchVolumeEnd: number = 0;\r\n\t\t\t\t\t\t\tif (song.mix == 3) {\r\n\t\t\t\t\t\t\t\tpitchVolumeStart = Math.pow(5.0, -startPitch / pitchDamping);\r\n\t\t\t\t\t\t\t\tpitchVolumeEnd   = Math.pow(5.0,   -endPitch / pitchDamping);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tpitchVolumeStart = Math.pow(2.0, -startPitch / pitchDamping);\r\n\t\t\t\t\t\t\t\tpitchVolumeEnd   = Math.pow(2.0,   -endPitch / pitchDamping);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvolumeStart *= pitchVolumeStart * volumeMult * transitionVolumeStart;\r\n\t\t\t\t\t\t\tvolumeEnd *= pitchVolumeEnd * volumeMult * transitionVolumeEnd;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttotalCarrierVolume += amplitudeCurve;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// modulator\r\n\t\t\t\t\t\t\tvolumeStart *= Config.sineWaveLength * 1.5;\r\n\t\t\t\t\t\t\tvolumeEnd *= Config.sineWaveLength * 1.5;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tsineVolumeBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst envelope: number = instrument.operators[i].envelope;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvolumeStart *= Synth.computeOperatorEnvelope(envelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, envelopeVolumeStart);\r\n\t\t\t\t\t\tvolumeEnd *= Synth.computeOperatorEnvelope(envelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, envelopeVolumeEnd);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsynthChannel.volumeStarts[i] = volumeStart;\r\n\t\t\t\t\t\tsynthChannel.volumeDeltas[i] = (volumeEnd - volumeStart) / samples;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst feedbackAmplitude: number = Config.sineWaveLength * 0.3 * instrument.feedbackAmplitude / 15.0;\r\n\t\t\t\t\tlet feedbackStart: number = feedbackAmplitude * Synth.computeOperatorEnvelope(instrument.feedbackEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, envelopeVolumeStart);\r\n\t\t\t\t\tlet feedbackEnd: number = feedbackAmplitude * Synth.computeOperatorEnvelope(instrument.feedbackEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, envelopeVolumeEnd);\r\n\t\t\t\t\tsynthChannel.feedbackMult = feedbackStart;\r\n\t\t\t\t\tsynthChannel.feedbackDelta = (feedbackEnd - synthChannel.feedbackMult) / samples;\r\n\t\t\t\t\t\r\n\t\t\t\t\tsineVolumeBoost *= 1.0 - instrument.feedbackAmplitude / 15.0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tsineVolumeBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolume - 1) / 2.0);\r\n\t\t\t\t\tfor (let i: number = 0; i < carrierCount; i++) {\r\n\t\t\t\t\t\tsynthChannel.volumeStarts[i] *= 1.0 + sineVolumeBoost * 3.0;\r\n\t\t\t\t\t\tsynthChannel.volumeDeltas[i] *= 1.0 + sineVolumeBoost * 3.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet pitch: number = pitches[0];\r\n\t\t\t\t\t// if (Config.chorusHarmonizes[instrument.chorus]) {\r\n\t\t\t\t\t// \tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t// \tif (pitches.length == 2) {\r\n\t\t\t\t\t// \t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t// \t} else if (pitches.length == 3) {\r\n\t\t\t\t\t// \t\tharmonyOffset = pitches[(arpeggio >> 1) + 1] - pitches[0];\r\n\t\t\t\t\t// \t} else if (pitches.length == 4) {\r\n\t\t\t\t\t// \t\tharmonyOffset = pitches[(arpeggio == 3 ? 1 : arpeggio) + 1] - pitches[0];\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t// \tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t// } else {\r\n\t\t\t\t\t// \tif (pitches.length == 2) {\r\n\t\t\t\t\t// \t\tpitch = pitches[arpeggio >> 1];\r\n\t\t\t\t\t// \t} else if (pitches.length == 3) {\r\n\t\t\t\t\t// \t\tpitch = pitches[arpeggio == 3 ? 1 : arpeggio];\r\n\t\t\t\t\t// \t} else if (pitches.length == 4) {\r\n\t\t\t\t\t// \t\tpitch = pitches[arpeggio];\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// }\r\n\t\t\t\t\tif (!isDrum) {\r\n\t\t\t\t\t\tif (Config.harmNames[instrument.harm] == 1) {\r\n\t\t\t\t\t\t\t// duet\r\n\t\t\t\t\t\t\tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio >> 1) + 1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio == 3 ? 1 : arpeggio) + 1] - pitches[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t\t\tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 2) {\r\n\t\t\t\t\t\t\t// chord\r\n\t\t\t\t\t\t\tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[2] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio == 3 ? 2 : arpeggio) + 1] - pitches[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t\t\tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 3) {\r\n\t\t\t\t\t\t\t// seventh\r\n\t\t\t\t\t\t\tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[2] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[3] - pitches[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t\t\tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 4) {\r\n\t\t\t\t\t\t\t// half arpeggio\r\n\t\t\t\t\t\t\tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio >> 1) + 1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio >> 1) + 2] - pitches[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t\t\tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 5) {\r\n\t\t\t\t\t\t\t// arp-chord\r\n\t\t\t\t\t\t\tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[2] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio == 3 ? 2 : arpeggio)] - pitches[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t\t\tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 0) {\r\n\t\t\t\t\t\t\t// arpeggio\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio >> 1];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio == 3 ? 1 : arpeggio];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (Config.harmNames[instrument.harm] == 0) {\r\n\t\t\t\t\t\t\t// arpeggio\r\n\t\t\t\t\t\t\tif (pitches.length == 1) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio >> 1] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio == 3 ? 1 : arpeggio] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 1) {\r\n\t\t\t\t\t\t\t// duet\r\n\t\t\t\t\t\t\tif (pitches.length == 1) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[(arpeggio >> 1) + 1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[(arpeggio == 3 ? 1 : arpeggio) + 1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 2) {\r\n\t\t\t\t\t\t\t// chord\r\n\t\t\t\t\t\t\tif (pitches.length == 1) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[2] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[(arpeggio == 3 ? 2 : arpeggio) + 1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 3) {\r\n\t\t\t\t\t\t\t// seventh\r\n\t\t\t\t\t\t\tif (pitches.length == 1) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[2] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[3] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 4) {\r\n\t\t\t\t\t\t\t// half arpeggio\r\n\t\t\t\t\t\t\tif (pitches.length == 1) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[(arpeggio >> 1) + 1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[(arpeggio >> 1) + 2] + pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst startPitch: number = (pitch + intervalStart) * intervalScale;\r\n\t\t\t\t\tconst endPitch: number = (pitch + intervalEnd) * intervalScale;\r\n\t\t\t\t\tconst startFreq: number = synth.frequencyFromPitch(basePitch + startPitch);\r\n\t\t\t\t\tconst pitchVolumeStart: number = Math.pow(2.0, -startPitch / pitchDamping);\r\n\t\t\t\t\tconst pitchVolumeEnd: number   = Math.pow(2.0,   -endPitch / pitchDamping);\r\n\t\t\t\t\tif (isDrum && Config.drumWaveIsSoft[instrument.wave]) {\r\n\t\t\t\t\t\tsynthChannel.filter = Math.min(1.0, startFreq * sampleTime * Config.drumPitchFilterMult[instrument.wave]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet settingsVolumeMult: number;\r\n\t\t\t\t\tif (!isDrum) {\r\n\t\t\t\t\t\tconst filterScaleRate: number = Config.filterDecays[instrument.filter];\r\n\t\t\t\t\t\tsynthChannel.filter = Math.pow(2, -filterScaleRate * secondsPerPart * decayTimeStart);\r\n\t\t\t\t\t\tconst endFilter: number = Math.pow(2, -filterScaleRate * secondsPerPart * decayTimeEnd);\r\n\t\t\t\t\t\tsynthChannel.filterScale = Math.pow(endFilter / synthChannel.filter, 1.0 / samples);\r\n\t\t\t\t\t\tsettingsVolumeMult = 0.27 * 0.5 * Config.waveVolumes[instrument.wave] * Config.filterVolumes[instrument.filter] * Config.chorusVolumes[instrument.chorus];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (song.mix == 0) {\r\n\t\t\t\t\t\t\tsettingsVolumeMult = 0.19 * Config.drumVolumes[instrument.wave];\r\n\t\t\t\t\t\t} else if (song.mix == 3) {\r\n\t\t\t\t\t\t\tsettingsVolumeMult = 0.12 * Config.drumVolumes[instrument.wave];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsettingsVolumeMult = 0.09 * Config.drumVolumes[instrument.wave];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (resetPhases && !isDrum) {\r\n\t\t\t\t\t\tsynthChannel.reset();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tsynthChannel.phaseDeltas[0] = startFreq * sampleTime;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet instrumentVolumeMult: number = 0;\r\n\t\t\t\t\tif (song.mix == 2) {\r\n\t\t\t\t\t\tinstrumentVolumeMult = (instrument.volume == 9) ? 0.0 : Math.pow(3, -Config.volumeValues[instrument.volume]) * Config.imuteValues[instrument.imute];\r\n\t\t\t\t\t} else if (song.mix == 1) {\r\n\t\t\t\t\t\tinstrumentVolumeMult = (instrument.volume >= 5) ? 0.0 : Math.pow(3, -Config.volumeMValues[instrument.volume]) * Config.imuteValues[instrument.imute];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tinstrumentVolumeMult = (instrument.volume >= 5) ? 0.0 : Math.pow(2, -Config.volumeMValues[instrument.volume]) * Config.imuteValues[instrument.imute];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsynthChannel.volumeStarts[0] = transitionVolumeStart * envelopeVolumeStart * pitchVolumeStart * settingsVolumeMult * instrumentVolumeMult;\r\n\t\t\t\t\tconst volumeEnd: number = transitionVolumeEnd * envelopeVolumeEnd * pitchVolumeEnd * settingsVolumeMult * instrumentVolumeMult;\r\n\t\t\t\t\tsynthChannel.volumeDeltas[0] = (volumeEnd - synthChannel.volumeStarts[0]) / samples;\r\n\t\t\t\t\tsynthChannel.volumeLeft[0] = Math.min(1, 1 + Config.ipanValues[instrument.ipan]);\r\n\t\t\t\t\tsynthChannel.volumeRight[0] = Math.min(1, 1 - Config.ipanValues[instrument.ipan]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsynthChannel.phaseDeltaScale = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / 12.0) / samples);\r\n\t\t\t\tsynthChannel.vibratoScale = (partsSinceStart < Config.effectVibratoDelays[instrument.effect]) ? 0.0 : Math.pow(2.0, Config.effectVibratos[instrument.effect] / 12.0) - 1.0;\r\n\t\t\t} else {\r\n\t\t\t\t// @TODO: ModBox doesn't have this guard around .reset, why?\r\n\t\t\t\t// if (!isDrum) {\r\n\t\t\t\t\tsynthChannel.reset();\r\n\t\t\t\t// }\r\n\t\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\t\tsynthChannel.phaseDeltas[0] = 0.0;\r\n\t\t\t\t\tsynthChannel.volumeStarts[0] = 0.0;\r\n\t\t\t\t\tsynthChannel.volumeDeltas[0] = 0.0;\r\n\t\t\t\t\tsynthChannel.volumeLeft[0] = 0.0;\r\n\t\t\t\t\tsynthChannel.volumeRight[0] = 0.0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tprivate static readonly generatedSynthesizers: Dictionary<Function> = {};\r\n\t\t\r\n\t\tprivate static getGeneratedSynthesizer(song: Song, bar: number): Function {\r\n\t\t\tconst fingerprint: string = song.getChannelFingerprint(bar);\r\n\t\t\tif (Synth.generatedSynthesizers[fingerprint] == undefined) {\r\n\t\t\t\tconst synthSource: string[] = [];\r\n\t\t\t\tconst instruments: Instrument[] = [];\r\n\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\tinstruments[channel] = song.channels[channel].instruments[song.getPatternInstrument(channel, bar)];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor (const line of Synth.synthSourceTemplate) {\r\n\t\t\t\t\tif (line.indexOf(\"#\") != -1) {\r\n\t\t\t\t\t\tif (line.indexOf(\"// PITCH\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// JCHIP\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.chip) {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// CHIP\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.chip) {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t\t} else if (instruments[channel].type == InstrumentType.pwm) {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// FM\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\t\t\tif (line.indexOf(\"$\") != -1) {\r\n\t\t\t\t\t\t\t\t\t\tfor (let j = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\").replace(/\\$/g, j + \"\"));\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// PWM\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.pwm) {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\t\t\tconst outputs: string[] = [];\r\n\t\t\t\t\t\t\t\t\tfor (let j = 0; j < Config.operatorCarrierCounts[instruments[channel].algorithm]; j++) {\r\n\t\t\t\t\t\t\t\t\t\toutputs.push(\"channel\" + channel + \"Operator\" + j + \"Scaled\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\").replace(\"/*channel\" + channel + \"Operator$Scaled*/\", outputs.join(\" + \")));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// NOISE\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = song.pitchChannelCount; channel < song.pitchChannelCount + song.drumChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// ALL\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount + song.drumChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(\"Missing channel type annotation for line: \" + line);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n\t\t\t\t\t\tfor (let j = Config.operatorCount - 1; j >= 0; j--) {\r\n\t\t\t\t\t\t\tfor (const operatorLine of Synth.operatorSourceTemplate) {\r\n\t\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif (operatorLine.indexOf(\"/* + channel#Operator@Scaled*/\") != -1) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet modulators = \"\";\r\n\t\t\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of Config.operatorModulatedBy[instruments[channel].algorithm][j]) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tmodulators += \" + channel\" + channel + \"Operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tconst feedbackIndices: ReadonlyArray<number> = Config.operatorFeedbackIndices[instruments[channel].feedbackType][j];\r\n\t\t\t\t\t\t\t\t\t\t\tif (feedbackIndices.length > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tmodulators += \" + channel\" + channel + \"FeedbackMult * (\";\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst feedbacks: string[] = [];\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of feedbackIndices) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeedbacks.push(\"channel\" + channel + \"Operator\" + (modulatorNumber - 1) + \"Output\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\tmodulators += feedbacks.join(\" + \") + \")\";\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/#/g, channel + \"\").replace(/\\$/g, j + \"\").replace(\"/* + channel\" + channel + \"Operator@Scaled*/\", modulators));\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/#/g, channel + \"\").replace(/\\$/g, j + \"\"));\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsynthSource.push(line);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//console.log(synthSource.join(\"\\n\"));\r\n\t\t\t\t\r\n\t\t\t\tSynth.generatedSynthesizers[fingerprint] = new Function(\"synth\", \"song\", \"dataLeft\", \"dataRight\", \"bufferLength\", \"bufferIndex\", \"samplesPerTick\", synthSource.join(\"\\n\"));\r\n\t\t\t}\r\n\t\t\treturn Synth.generatedSynthesizers[fingerprint];\r\n\t\t}\r\n\r\n\t\tprivate static synthSourceTemplate: string[] = (`\r\n\t\t\tvar sampleTime = 1.0 / synth.samplesPerSecond;\r\n\t\t\tvar effectYMult = +synth.effectYMult;\r\n\t\t\tvar limitDecay = +synth.limitDecay;\r\n\t\t\tvar volume = +synth.volume;\r\n\t\t\tvar delayLineLeft = synth.delayLineLeft;\r\n\t\t\tvar delayLineRight = synth.delayLineRight;\r\n\t\t\tvar reverb = Math.pow(song.reverb / beepbox.Config.reverbRange, 0.667) * 0.425;\r\n\t\t\tvar blend = Math.pow(song.blend / beepbox.Config.blendRange, 0.667) * 0.425;\r\n\t\t\tvar mix = song.mix;\r\n\t\t\tvar muff = Math.pow(song.muff / beepbox.Config.muffRange, 0.667) * 0.425;\r\n\t\t\tvar detune = song.detune;\r\n\t\t\tvar riff = Math.pow(song.riff / beepbox.Config.riffRange, 0.667) * 0.425; \r\n\t\t\tvar sineWave = beepbox.Config.sineWave;\r\n\t\t\t\r\n\t\t\t// Initialize instruments based on current pattern.\r\n\t\t\tvar instrumentChannel# = song.getPatternInstrument(#, synth.bar); // ALL\r\n\t\t\tvar instrument# = song.channels[#].instruments[instrumentChannel#]; // ALL\r\n\t\t\tvar channel#Wave = (mix <= 1) ? beepbox.Config.waves[instrument#.wave] : beepbox.Config.wavesMixC[instrument#.wave]; // CHIP\r\n\t\t\tvar channel#Wave = beepbox.Config.getDrumWave(instrument#.wave); // NOISE\r\n\t\t\tvar channel#WaveLength = channel#Wave.length; // CHIP\r\n\t\t\tvar channel#Wave = beepbox.Config.pwmwaves[instrument#.wave]; // PWM\r\n\t\t\tvar channel#WaveLength = channel#Wave.length; // PWM\r\n\t\t\tvar channel#FilterBase = (song.mix == 2) ? Math.pow(2 - (blend * 2) + (muff * 2), -beepbox.Config.filterBases[instrument#.filter]) : Math.pow(2, -beepbox.Config.filterBases[instrument#.filter] + (blend * 4) - (muff * 4)); // CHIP\r\n\t\t\tvar channel#TremoloScale = beepbox.Config.effectTremolos[instrument#.effect]; // PITCH\r\n\t\t\t\r\n\t\t\twhile (bufferIndex < bufferLength) {\r\n\t\t\t\t\r\n\t\t\t\tvar samples;\r\n\t\t\t\tvar samplesLeftInBuffer = bufferLength - bufferIndex;\r\n\t\t\t\tif (synth.arpSampleCountdown <= samplesLeftInBuffer) {\r\n\t\t\t\t\tsamples = synth.arpSampleCountdown;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsamples = samplesLeftInBuffer;\r\n\t\t\t\t}\r\n\t\t\t\tsynth.arpSampleCountdown -= samples;\r\n\t\t\t\t\r\n\t\t\t\tvar time = synth.part + synth.beat * song.partsPerBeat;\r\n\t\t\t\t\r\n\t\t\t\tbeepbox.Synth.computeChannelInstrument(synth, song, #, time, sampleTime, samplesPerTick, samples); // ALL\r\n\t\t\t\tvar synthChannel# = synth.channels[#]; // ALL\r\n\t\t\t\t\r\n\t\t\t\tvar channel#ChorusA = Math.pow(2.0, (beepbox.Config.chorusOffsets[instrument#.chorus] + beepbox.Config.chorusIntervals[instrument#.chorus] + beepbox.Config.octoffValues[instrument#.octoff] + (detune / 24) * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1)) / 12.0); // CHIP\r\n\t\t\t\tvar channel#ChorusB = Math.pow(2.0, (beepbox.Config.chorusOffsets[instrument#.chorus] - beepbox.Config.chorusIntervals[instrument#.chorus] + beepbox.Config.octoffValues[instrument#.octoff] + (detune / 24) * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1)) / 12.0); // CHIP\r\n\t\t\t\tvar channel#ChorusSign = synthChannel#.harmonyVolumeMult * (beepbox.Config.chorusSigns[instrument#.chorus]); // CHIP\r\n\t\t\t\tchannel#ChorusB *= synthChannel#.harmonyMult; // CHIP\r\n\t\t\t\tvar channel#ChorusDeltaRatio = channel#ChorusB / channel#ChorusA * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1); // CHIP\r\n\t\t\t\t\r\n\t\t\t\tvar channel#PhaseDelta = synthChannel#.phaseDeltas[0] * channel#ChorusA * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1); // CHIP\r\n\t\t\t\tvar channel#PhaseDelta = synthChannel#.phaseDeltas[0] / 32768.0; // NOISE\r\n\t\t\t\tvar channel#PhaseDeltaScale = synthChannel#.phaseDeltaScale; // ALL\r\n\t\t\t\tvar channel#Volume = synthChannel#.volumeStarts[0]; // CHIP\r\n\t\t\t\tvar channel#Volume = synthChannel#.volumeStarts[0]; // NOISE\r\n\t\t\t\tvar channel#VolumeLeft = synthChannel#.volumeLeft[0]; // ALL\r\n\t\t\t\tvar channel#VolumeRight = synthChannel#.volumeRight[0]; // ALL\r\n\t\t\t\tvar channel#VolumeDelta = synthChannel#.volumeDeltas[0]; // CHIP\r\n\t\t\t\tvar channel#VolumeDelta = synthChannel#.volumeDeltas[0]; // NOISE\r\n\t\t\t\tvar channel#Filter = synthChannel#.filter * channel#FilterBase; // CHIP\r\n\t\t\t\tvar channel#Filter = synthChannel#.filter; // NOISE\r\n\t\t\t\tvar channel#FilterScale = synthChannel#.filterScale; // CHIP\r\n\t\t\t\tvar channel#VibratoScale = synthChannel#.vibratoScale; // PITCH\r\n\t\t\t\t\r\n\t\t\t\tvar effectY     = Math.sin(synth.effectPhase);\r\n\t\t\t\tvar prevEffectY = Math.sin(synth.effectPhase - synth.effectAngle);\r\n\t\t\t\t\r\n\t\t\t\tvar channel#PhaseA = synth.channels[#].phases[0] % 1; // CHIP\r\n\t\t\t\tvar channel#PhaseB = synth.channels[#].phases[1] % 1; // CHIP\r\n\t\t\t\tvar channel#Phase  = synth.channels[#].phases[0] % 1; // NOISE\r\n\t\t\t\t\r\n\t\t\t\tvar channel#Operator$Phase       = ((synth.channels[#].phases[$] % 1) + ` + Synth.negativePhaseGuard + `) * ` + Config.sineWaveLength + `; // FM\r\n\t\t\t\tvar channel#Operator$PhaseDelta  = synthChannel#.phaseDeltas[$]; // FM\r\n\t\t\t\tvar channel#Operator$OutputMult  = synthChannel#.volumeStarts[$]; // FM\r\n\t\t\t\tvar channel#Operator$OutputDelta = synthChannel#.volumeDeltas[$]; // FM\r\n\t\t\t\tvar channel#Operator$Output      = synthChannel#.feedbackOutputs[$]; // FM\r\n\t\t\t\tvar channel#FeedbackMult         = synthChannel#.feedbackMult; // FM\r\n\t\t\t\tvar channel#FeedbackDelta        = synthChannel#.feedbackDelta; // FM\r\n\t\t\t\t\r\n\t\t\t\tvar channel#SampleLeft = +synth.channels[#].sampleLeft; // ALL\r\n\t\t\t\tvar channel#SampleRight = +synth.channels[#].sampleRight; // ALL\r\n\t\t\t\t\r\n\t\t\t\tvar delayPosLeft = 0|synth.delayPosLeft;\r\n\t\t\t\tvar delayFeedback0Left = +synth.delayFeedback0Left;\r\n\t\t\t\tvar delayFeedback1Left = +synth.delayFeedback1Left;\r\n\t\t\t\tvar delayFeedback2Left = +synth.delayFeedback2Left;\r\n\t\t\t\tvar delayFeedback3Left = +synth.delayFeedback3Left;\r\n\t\t\t\tvar delayPosRight = 0|synth.delayPosRight;\r\n\t\t\t\tvar delayFeedback0Right = +synth.delayFeedback0Right;\r\n\t\t\t\tvar delayFeedback1Right = +synth.delayFeedback1Right;\r\n\t\t\t\tvar delayFeedback2Right = +synth.delayFeedback2Right;\r\n\t\t\t\tvar delayFeedback3Right = +synth.delayFeedback3Right;\r\n\t\t\t\tvar limit = +synth.limit;\r\n\t\t\t\t\r\n\t\t\t\twhile (samples) {\r\n\t\t\t\t\tvar channel#Vibrato = 1.0 + channel#VibratoScale * effectY; // PITCH\r\n\t\t\t\t\tvar channel#Tremolo = 1.0 + channel#TremoloScale * (effectY - 1.0); // PITCH\r\n\t\t\t\t\tvar temp = effectY;\r\n\t\t\t\t\teffectY = effectYMult * effectY - prevEffectY;\r\n\t\t\t\t\tprevEffectY = temp;\r\n\t\t\t\t\t\r\n\t\t\t\t\tchannel#SampleLeft += ((channel#Wave[0|(channel#PhaseA * channel#WaveLength)] + channel#Wave[0|(channel#PhaseB * channel#WaveLength)] * channel#ChorusSign) * channel#Volume * channel#Tremolo - channel#SampleLeft) * channel#Filter * channel#VolumeLeft; // CHIP \r\n\t\t\t\t\tchannel#SampleLeft += (channel#Wave[0|(channel#Phase * 32768.0)] * channel#Volume - channel#SampleLeft) * channel#Filter * channel#VolumeLeft; // NOISE\r\n\t\t\t\t\tchannel#SampleRight += ((channel#Wave[0|(channel#PhaseA * channel#WaveLength)] + channel#Wave[0|(channel#PhaseB * channel#WaveLength)] * channel#ChorusSign) * channel#Volume * channel#Tremolo - channel#SampleRight) * channel#Filter * channel#VolumeRight; // CHIP \r\n\t\t\t\t\tchannel#SampleRight += (channel#Wave[0|(channel#Phase * 32768.0)] * channel#Volume - channel#SampleRight) * channel#Filter * channel#VolumeRight; // NOISE\r\n\t\t\t\t\tchannel#Volume += channel#VolumeDelta; // CHIP\r\n\t\t\t\t\tchannel#Volume += channel#VolumeDelta; // NOISE\r\n\t\t\t\t\tchannel#PhaseA += channel#PhaseDelta * channel#Vibrato; // CHIP\r\n\t\t\t\t\tchannel#PhaseB += channel#PhaseDelta * channel#Vibrato * channel#ChorusDeltaRatio; // CHIP\r\n\t\t\t\t\tchannel#Phase += channel#PhaseDelta; // NOISE\r\n\t\t\t\t\tchannel#Filter *= channel#FilterScale; // CHIP\r\n\t\t\t\t\tchannel#PhaseA -= 0|channel#PhaseA; // CHIP\r\n\t\t\t\t\tchannel#PhaseB -= 0|channel#PhaseB; // CHIP\r\n\t\t\t\t\tchannel#Phase -= 0|channel#Phase; // NOISE\r\n\t\t\t\t\tchannel#PhaseDelta *= channel#PhaseDeltaScale; // CHIP\r\n\t\t\t\t\tchannel#PhaseDelta *= channel#PhaseDeltaScale; // NOISE\r\n\t\t\t\t\t\r\n\t\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\r\n\t\t\t\t\tchannel#SampleLeft = channel#Tremolo * (/*channel#Operator$Scaled*/) * channel#VolumeLeft; // CARRIER OUTPUTS\r\n\t\t\t\t\tchannel#SampleRight = channel#Tremolo * (/*channel#Operator$Scaled*/) * channel#VolumeRight; // CARRIER OUTPUTS\r\n\t\t\t\t\tchannel#FeedbackMult += channel#FeedbackDelta; // FM\r\n\t\t\t\t\tchannel#Operator$OutputMult += channel#Operator$OutputDelta; // FM\r\n\t\t\t\t\tchannel#Operator$Phase += channel#Operator$PhaseDelta * channel#Vibrato; // FM\r\n\t\t\t\t\tchannel#Operator$PhaseDelta *= channel#PhaseDeltaScale; // FM\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\r\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\r\n\t\t\t\t\tvar delayPos1Left = (delayPosLeft +  3041) & 0x3FFF;\r\n\t\t\t\t\tvar delayPos2Left = (delayPosLeft +  6426) & 0x3FFF;\r\n\t\t\t\t\tvar delayPos3Left = (delayPosLeft + 10907) & 0x3FFF;\r\n\t\t\t\t\tvar delaySampleLeft0 = (delayLineLeft[delayPosLeft]\r\n\t\t\t\t\t\t+ channel#SampleLeft // PITCH\r\n\t\t\t\t\t);\r\n\t\t\t\t\tvar delayPos1Right = (delayPosRight +  3041) & 0x3FFF;\r\n\t\t\t\t\tvar delayPos2Right = (delayPosRight +  6426) & 0x3FFF;\r\n\t\t\t\t\tvar delayPos3Right = (delayPosRight + 10907) & 0x3FFF;\r\n\t\t\t\t\tvar delaySampleRight0 = (delayLineRight[delayPosRight]\r\n\t\t\t\t\t\t+ channel#SampleRight // PITCH\r\n\t\t\t\t\t);\r\n\t\t\t\t\tvar delaySampleLeft1 = delayLineLeft[delayPos1Left];\r\n\t\t\t\t\tvar delaySampleLeft2 = delayLineLeft[delayPos2Left];\r\n\t\t\t\t\tvar delaySampleLeft3 = delayLineLeft[delayPos3Left];\r\n\t\t\t\t\tvar delayTemp0Left = -delaySampleLeft0 + delaySampleLeft1;\r\n\t\t\t\t\tvar delayTemp1Left = -delaySampleLeft0 - delaySampleLeft1;\r\n\t\t\t\t\tvar delayTemp2Left = -delaySampleLeft2 + delaySampleLeft3;\r\n\t\t\t\t\tvar delayTemp3Left = -delaySampleLeft2 - delaySampleLeft3;\r\n\t\t\t\t\tdelayFeedback0Left += ((delayTemp0Left + delayTemp2Left) * reverb - delayFeedback0Left) * 0.5;\r\n\t\t\t\t\tdelayFeedback1Left += ((delayTemp1Left + delayTemp3Left) * reverb - delayFeedback1Left) * 0.5;\r\n\t\t\t\t\tdelayFeedback2Left += ((delayTemp0Left - delayTemp2Left) * reverb - delayFeedback2Left) * 0.5;\r\n\t\t\t\t\tdelayFeedback3Left += ((delayTemp1Left - delayTemp3Left) * reverb - delayFeedback3Left) * 0.5;\r\n\t\t\t\t\tdelayLineLeft[delayPos1Left] = delayFeedback0Left;\r\n\t\t\t\t\tdelayLineLeft[delayPos2Left] = delayFeedback1Left;\r\n\t\t\t\t\tdelayLineLeft[delayPos3Left] = delayFeedback2Left;\r\n\t\t\t\t\tdelayLineLeft[delayPosLeft ] = delayFeedback3Left;\r\n\t\t\t\t\tdelayPosLeft = (delayPosLeft + 1) & 0x3FFF;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar delaySampleRight1 = delayLineRight[delayPos1Right];\r\n\t\t\t\t\tvar delaySampleRight2 = delayLineRight[delayPos2Right];\r\n\t\t\t\t\tvar delaySampleRight3 = delayLineRight[delayPos3Right];\r\n\t\t\t\t\tvar delayTemp0Right = -delaySampleRight0 + delaySampleRight1;\r\n\t\t\t\t\tvar delayTemp1Right = -delaySampleRight0 - delaySampleRight1;\r\n\t\t\t\t\tvar delayTemp2Right = -delaySampleRight2 + delaySampleRight3;\r\n\t\t\t\t\tvar delayTemp3Right = -delaySampleRight2 - delaySampleRight3;\r\n\t\t\t\t\tdelayFeedback0Right += ((delayTemp0Right + delayTemp2Right) * reverb - delayFeedback0Right) * 0.5;\r\n\t\t\t\t\tdelayFeedback1Right += ((delayTemp1Right + delayTemp3Right) * reverb - delayFeedback1Right) * 0.5;\r\n\t\t\t\t\tdelayFeedback2Right += ((delayTemp0Right - delayTemp2Right) * reverb - delayFeedback2Right) * 0.5;\r\n\t\t\t\t\tdelayFeedback3Right += ((delayTemp1Right - delayTemp3Right) * reverb - delayFeedback3Right) * 0.5;\r\n\t\t\t\t\tdelayLineRight[delayPos1Right] = delayFeedback0Right;\r\n\t\t\t\t\tdelayLineRight[delayPos2Right] = delayFeedback1Right;\r\n\t\t\t\t\tdelayLineRight[delayPos3Right] = delayFeedback2Right;\r\n\t\t\t\t\tdelayLineRight[delayPosRight ] = delayFeedback3Right;\r\n\t\t\t\t\tdelayPosRight = (delayPosRight + 1) & 0x3FFF;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar sampleLeft = delaySampleLeft0 + delaySampleLeft1 + delaySampleLeft2 + delaySampleLeft3\r\n\t\t\t\t\t\t+ channel#SampleLeft // NOISE\r\n\t\t\t\t\t;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar sampleRight = delaySampleRight0 + delaySampleRight1 + delaySampleRight2 + delaySampleRight3\r\n\t\t\t\t\t\t+ channel#SampleRight // NOISE\r\n\t\t\t\t\t;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar abs = sampleLeft < 0.0 ? -sampleLeft : sampleLeft;\r\n\t\t\t\t\tlimit -= limitDecay;\r\n\t\t\t\t\tif (limit < abs) limit = abs;\r\n\t\t\t\t\tsampleLeft /= limit * 0.75 + 0.25;\r\n\t\t\t\t\tsampleLeft *= volume;\r\n\t\t\t\t\tsampleLeft = sampleLeft;\r\n\t\t\t\t\tdataLeft[bufferIndex] = sampleLeft;\r\n\t\t\t\t\tsampleRight /= limit * 0.75 + 0.25;\r\n\t\t\t\t\tsampleRight *= volume;\r\n\t\t\t\t\tsampleRight = sampleRight;\r\n\t\t\t\t\tdataRight[bufferIndex] = sampleRight;\r\n\t\t\t\t\tbufferIndex++;\r\n\t\t\t\t\tsamples--;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsynthChannel#.phases[0] = channel#PhaseA; // CHIP\r\n\t\t\t\tsynthChannel#.phases[1] = channel#PhaseB; // CHIP\r\n\t\t\t\tsynthChannel#.phases[0] = channel#Phase; // NOISE\r\n\t\t\t\tsynthChannel#.phases[$] = channel#Operator$Phase / ` + Config.sineWaveLength + `; // FM\r\n\t\t\t\tsynthChannel#.feedbackOutputs[$] = channel#Operator$Output; // FM\r\n\t\t\t\tsynthChannel#.sampleLeft = channel#SampleLeft; // ALL\r\n\t\t\t\tsynthChannel#.sampleRight = channel#SampleRight; // ALL\r\n\t\t\t\t\r\n\t\t\t\tsynth.delayPosLeft = delayPosLeft;\r\n\t\t\t\tsynth.delayFeedback0Left = delayFeedback0Left;\r\n\t\t\t\tsynth.delayFeedback1Left = delayFeedback1Left;\r\n\t\t\t\tsynth.delayFeedback2Left = delayFeedback2Left;\r\n\t\t\t\tsynth.delayFeedback3Left = delayFeedback3Left;\r\n\t\t\t\tsynth.delayPosRight = delayPosRight;\r\n\t\t\t\tsynth.delayFeedback0Right = delayFeedback0Right;\r\n\t\t\t\tsynth.delayFeedback1Right = delayFeedback1Right;\r\n\t\t\t\tsynth.delayFeedback2Right = delayFeedback2Right;\r\n\t\t\t\tsynth.delayFeedback3Right = delayFeedback3Right;\r\n\t\t\t\tsynth.limit = limit;\r\n\t\t\t\t\r\n\t\t\t\tif (effectYMult * effectY - prevEffectY > prevEffectY) {\r\n\t\t\t\t\tsynth.effectPhase = Math.asin(effectY);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsynth.effectPhase = Math.PI - Math.asin(effectY);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (synth.arpSampleCountdown == 0) {\r\n\t\t\t\t\tsynth.arpeggio++;\r\n\t\t\t\t\tsynth.arpSampleCountdown = samplesPerTick;\r\n\t\t\t\t\tif (synth.arpeggio == 4) {\r\n\t\t\t\t\t\tsynth.arpeggio = 0;\r\n\t\t\t\t\t\tsynth.part++;\r\n\t\t\t\t\t\tif (synth.part == song.partsPerBeat) {\r\n\t\t\t\t\t\t\tsynth.part = 0;\r\n\t\t\t\t\t\t\tsynth.beat++;\r\n\t\t\t\t\t\t\tif (synth.beat == song.beatsPerBar) {\r\n\t\t\t\t\t\t\t\t// The bar ended, may need to regenerate synthesizer.\r\n\t\t\t\t\t\t\t\treturn bufferIndex;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Indicate that the buffer is finished generating.\r\n\t\t\treturn -1;\r\n\t\t`).split(\"\\n\");\r\n\t\t\r\n\t\tprivate static operatorSourceTemplate: string[] = (`\r\n\t\t\t\t\t\tvar channel#Operator$PhaseMix = channel#Operator$Phase/* + channel#Operator@Scaled*/;\r\n\t\t\t\t\t\tvar channel#Operator$PhaseInt = channel#Operator$PhaseMix|0;\r\n\t\t\t\t\t\tvar channel#Operator$Index    = channel#Operator$PhaseInt & ` + Config.sineWaveMask + `;\r\n\t\t\t\t\t\tvar channel#Operator$Sample   = sineWave[channel#Operator$Index];\r\n\t\t\t\t\t\tchannel#Operator$Output       = channel#Operator$Sample + (sineWave[channel#Operator$Index + 1] - channel#Operator$Sample) * (channel#Operator$PhaseMix - channel#Operator$PhaseInt);\r\n\t\t\t\t\t\tvar channel#Operator$Scaled   = channel#Operator$OutputMult * channel#Operator$Output;\r\n\t\t`).split(\"\\n\");\r\n\t\t\r\n\t\tprivate frequencyFromPitch(pitch: number): number {\r\n\t\t\treturn 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\r\n\t\t}\r\n\t\t\r\n\t\tprivate volumeConversion(noteVolume: number): number {\r\n\t\t\treturn Math.pow(noteVolume / 3.0, 1.5);\r\n\t\t}\r\n\t\t\r\n\t\tprivate getSamplesPerArpeggio(): number {\r\n\t\t\tif (this.song == null) return 0;\r\n\t\t\tconst beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n\t\t\tconst beatsPerSecond: number = beatsPerMinute / 60.0;\r\n\t\t\tconst partsPerSecond: number = beatsPerSecond * this.song.partsPerBeat;\r\n\t\t\tconst arpeggioPerSecond: number = partsPerSecond * 4.0;\r\n\t\t\treturn Math.floor(this.samplesPerSecond / arpeggioPerSecond);\r\n\t\t}\r\n\t}\r\n"],"mappings":"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","ignoreList":[]}