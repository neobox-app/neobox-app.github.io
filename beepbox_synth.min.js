var beepbox=function(t){"use strict";function e(t,e){for(let s=0;s<t.length;s++)t[s]*=e}function s(t){if(!function(t){return!(!t||t&t-1)}(t))throw new Error("FFT array length must be a power of 2.");return Math.round(Math.log(t)/Math.log(2))}function h(t){const e=t.length,h=s(e);if(e<4)throw new Error("FFT array length must be at least 4.");for(let s=h-1;s>=2;s--){const h=1<<s,n=h>>1,i=h<<1,a=2*Math.PI/i,l=Math.cos(a),r=Math.sin(a),o=2*l;for(let s=0;s<e;s+=i){const e=s,i=e+n,a=e+h,f=a+n,c=a+h,u=t[e],d=t[a];t[e]=u+d,t[i]*=2,t[a]=u-d,t[f]*=2;let m=l,p=-r,y=1,g=0;for(let s=1;s<n;s++){const h=e+s,n=a-s,i=a+s,l=c-s,r=t[h],f=t[n],u=t[i],d=t[l],b=r-f,v=u+d;t[h]=r+f,t[n]=d-u,t[i]=b*m-v*p,t[l]=v*m+b*p;const P=o*m-y,L=o*p-g;y=m,g=p,m=P,p=L}}}for(let s=0;s<e;s+=4){const e=s+1,h=s+2,n=s+3,i=t[s],a=2*t[e],l=t[h],r=2*t[n],o=i+l,f=i-l;t[s]=o+a,t[e]=o-a,t[h]=f+r,t[n]=f-r}!function(t){const e=t.length,h=s(e);if(h>16)throw new Error("FFT array length must not be greater than 2^16.");const n=16-h;for(let s=0;s<e;s++){let e;if(e=(43690&s)>>1|(21845&s)<<1,e=(52428&e)>>2|(13107&e)<<2,e=(61680&e)>>4|(3855&e)<<4,e=(e>>8|(255&e)<<8)>>n,e>s){let h=t[s];t[s]=t[e],t[e]=h}}}(t)}
/*!
    Copyright (c) 2012-2022 John Nesky and contributing authors

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    */class n{static t(t){let e=0;for(let s=0;s<t.length;s++)e+=t[s];const s=e/t.length;for(let e=0;e<t.length;e++)t[e]-=s;return new Float64Array(t)}static getDrumWave(t){let s=n.h[t];if(null==s)if(s=new Float32Array(32768),n.h[t]=s,0==t){let t=1;for(let e=0;e<32768;e++){s[e]=2*(1&t)-1;let h=t>>1;1==(t+h&1)&&(h+=16384),t=h}}else if(1==t)for(let t=0;t<32768;t++)s[t]=2*Math.random()-1;else if(2==t){let t=1;for(let e=0;e<32768;e++){s[e]=2*(1&t)-1;let h=t>>1;1==(t+h&1)&&(h+=32768),t=h}}else if(3==t){let t=1;for(let e=0;e<32767;e++){s[e]=2*(1&t)-1;let h=t>>2;1==(t+h&1)&&(h+=65536),t=h}}else if(4==t){let t=1;for(let e=0;e<32768;e++){s[e]=2*(1&t)-1;let h=t>>1;1==(t+h&1)&&(h+=40),t=h}}else if(5==t)n.drawNoiseSpectrum(s,10,11,1,1,0),n.drawNoiseSpectrum(s,11,14,-2,-2,0),h(s),e(s,1/Math.sqrt(s.length));else if(6==t)n.drawNoiseSpectrum(s,1,10,1,1,0),n.drawNoiseSpectrum(s,20,14,-2,-2,0),h(s),e(s,1/Math.sqrt(s.length));else if(7==t){let t=1;for(let e=0;e<32768;e++){s[e]=4*(1&t)*Math.random();let h=t>>1;1==(t+h&1)&&(h+=60),t=h}}else if(8==t){let t=1;for(let e=0;e<32768;e++){s[e]=(1&t)/2+.5;let h=t>>1;1==(t+h&1)&&(h-=40),t=h}}else{if(9!=t)throw new Error("Unrecognized drum index: "+t);for(let t=0;t<32768;t++)s[t]=2*Math.random()-1}return s}static drawNoiseSpectrum(t,e,s,h,n,i){const a=0|Math.pow(2,e),l=0|Math.pow(2,s),r=Math.log(2);for(let o=a;o<l;o++){let a=Math.pow(2,h+(n-h)*(Math.log(o)/r-e)/(s-e));a*=Math.pow(o/2048,i);const l=Math.random()*Math.PI*2;t[o]=Math.cos(l)*a,t[32768-o]=Math.sin(l)*a}}static generateSineWave(){const t=new Float64Array(n.sineWaveLength+1);for(let e=0;e<n.sineWaveLength+1;e++)t[e]=Math.sin(e*Math.PI*2/n.sineWaveLength);return t}}function i(t){const e={};for(let s=0;s<t.length;s++){const h=t[s];h.index=s,e[h.name]=h}const s=t;return s.dictionary=e,s}function a(t,e,s){return s<=(e-=1)?s>=t?s:t:e}n.scales=i([{name:"easy :)",realName:"pentatonic major",flags:[!0,!1,!0,!1,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"easy :(",realName:"pentatonic minor",flags:[!0,!1,!1,!0,!1,!0,!1,!0,!1,!1,!0,!1]},{name:"island :)",realName:"ryukyu",flags:[!0,!1,!1,!1,!0,!0,!1,!0,!1,!1,!1,!0]},{name:"island :(",realName:"pelog selisir",flags:[!0,!0,!1,!0,!1,!1,!1,!0,!0,!1,!1,!1]},{name:"blues :)",realName:"blues major",flags:[!0,!1,!0,!0,!0,!1,!1,!0,!1,!0,!1,!1]},{name:"blues :(",realName:"blues",flags:[!0,!1,!1,!0,!1,!0,!0,!0,!1,!1,!0,!1]},{name:"normal :)",realName:"ionian",flags:[!0,!1,!0,!1,!0,!0,!1,!0,!1,!0,!1,!0]},{name:"normal :(",realName:"aeolian",flags:[!0,!1,!0,!0,!1,!0,!1,!0,!0,!1,!0,!1]},{name:"dbl harmonic :)",realName:"double harmonic major",flags:[!0,!0,!1,!1,!0,!0,!1,!0,!0,!1,!1,!0]},{name:"dbl harmonic :(",realName:"double harmonic minor",flags:[!0,!1,!0,!0,!1,!1,!0,!0,!0,!1,!1,!0]},{name:"enigma",realName:"whole tone",flags:[!0,!1,!0,!1,!0,!1,!0,!1,!0,!1,!0,!1]},{name:"expert",realName:"chromatic",flags:[!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0,!0]},{name:"monotonic",realName:"monotonic",flags:[!0,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1]},{name:"no dabbing",realName:"no dabbing",flags:[!0,!0,!1,!0,!0,!0,!0,!0,!0,!1,!0,!1]}]),n.blackKeyNameParents=[-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1],n.pitchNames=["C",null,"D",null,"E","F",null,"G",null,"A",null,"B"],n.oldKeys=["B","A♯","A","G♯","F♯","F","E","D♯","D","C♯","C"],n.keys=i([{name:"C",isWhiteKey:!0,basePitch:12},{name:"C♯",isWhiteKey:!1,basePitch:13},{name:"D",isWhiteKey:!0,basePitch:14},{name:"D♯",isWhiteKey:!1,basePitch:15},{name:"E",isWhiteKey:!0,basePitch:16},{name:"F",isWhiteKey:!0,basePitch:17},{name:"F♯",isWhiteKey:!1,basePitch:18},{name:"G",isWhiteKey:!0,basePitch:19},{name:"G♯",isWhiteKey:!1,basePitch:20},{name:"A",isWhiteKey:!0,basePitch:21},{name:"A♯",isWhiteKey:!1,basePitch:22},{name:"B",isWhiteKey:!0,basePitch:23}]),n.mixNames=["Type A (B & S)","Type B (M)","Type C"],n.sampleRateNames=["44100kHz","48000kHz","default","×4","×2","÷2","÷4","÷8","÷16"],n.tempoMin=1,n.tempoMax=500,n.reverbRange=5,n.blendRange=4,n.riffRange=11,n.detuneRange=24,n.muffRange=24,n.beatsPerBarMin=1,n.beatsPerBarMax=24,n.barCountMin=1,n.barCountMax=256,n.patternsPerChannelMin=1,n.patternsPerChannelMax=64,n.instrumentsPerChannelMin=1,n.instrumentsPerChannelMax=64,n.pitchesPerOctave=12,n.drumCount=12,n.pitchOctaves=7,n.partNames=["÷3 (triplets)","÷4 (standard)","÷6","÷8","÷16 (arpfest)","÷12","÷9","÷5","÷50","÷24"],n.partCounts=[3,4,6,8,16,12,9,5,50,24],n.waveNames=["triangle","square","pulse wide","pulse narrow","sawtooth","double saw","double pulse","spiky","plateau","glitch","10% pulse","sunsoft bass","loud pulse","sax","guitar","sine","atari bass","atari pulse","1% pulse","curved sawtooth","viola","brass","acoustic bass","lyre","ramp pulse","piccolo","squaretooth","flatline","pnryshk a (u5)","pnryshk b (riff)"],n.waveVolumes=[1,.5,.5,.5,.65,.5,.4,.4,.94,.5,.5,1,.6,.1,.25,1,1,1,1,1,1,1,1,.2,.2,.9,.9,1,.4,.5],n.drumNames=["retro","white","periodic","detuned periodic","shine","hollow","deep","cutter","metallic","snare"],n.drumVolumes=[.25,1,.4,.3,.3,1.5,1.5,.25,1,1],n.drumBasePitches=[69,69,69,69,69,96,120,96,96,69],n.drumPitchFilterMult=[100,8,100,100,100,1,100,100,100,100],n.drumWaveIsSoft=[!1,!0,!1,!1,!1,!0,!0,!1,!1,!1],n.h=[null,null,null,null,null,null,null,null,null,null],n.pwmwaveNames=["5%","10%","15%","20%","25%","30%","35%","40%","45%","50%"],n.pwmwaveVolumes=[1,1,1,1,1,1,1,1,1,1],n.filterNames=["none","sustain sharp","sustain medium","sustain soft","decay sharp","decay medium","decay soft","decay drawn","fade sharp","fade medium","fade soft","ring","muffled","submerged","shift","overtone","woosh","undertone"],n.filterBases=[0,2,3.5,5,1,2.5,4,1,5,7.5,10,-1,4,6,0,1,2,5],n.filterDecays=[0,0,0,0,10,7,4,.5,-10,-7,-4,.2,.2,.3,0,0,-6,0],n.filterVolumes=[.2,.4,.7,1,.5,.75,1,.5,.4,.7,1,.5,.75,.4,.4,1,.5,1.75],n.transitionNames=["seamless","sudden","smooth","slide","trill","click","bow","blip"],n.effectNames=["none","vibrato light","vibrato delayed","vibrato heavy","tremolo light","tremolo heavy","alien","stutter","strum"],n.effectVibratos=[0,.15,.3,.45,0,0,1,0,.05],n.effectTremolos=[0,0,0,0,.25,.5,0,1,.025],n.effectVibratoDelays=[0,0,3,0,0,0,0,0],n.chorusNames=["union","shimmer","hum","honky tonk","dissonant","fifths","octaves","spinner","detune","bowed","rising","vibrate","fourths","bass","dirty","stationary","harmonic (legacy)","recurve","voiced","fluctuate"],n.chorusIntervals=[0,.02,.05,.1,.25,3.5,6,.02,0,.02,1,3.5,4,0,0,3.5,0,.005,.25,12],n.chorusOffsets=[0,0,0,0,0,3.5,6,0,.25,0,.7,7,4,-7,.1,0,0,0,3,0],n.chorusVolumes=[.9,.9,1,1,.95,.95,.9,1,1,1,.95,.975,.95,1,.975,.9,1,1,.9,1],n.chorusSigns=[1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,-1,1,-1,1,1],n.chorusRiffApp=[0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1],n.chorusHarmonizes=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1],n.harmDisplay=["arpeggio","duet","chord","seventh","half arpeggio","arp-chord"],n.harmNames=[0,1,2,3,4,5],n.fmChorusDisplay=["none","default","detune","honky tonk","consecutive","alt. major thirds","alt. minor thirds","fifths","octaves"],n.fmChorusNames=[0,1,2,3,4,5,6,7,8],n.imuteNames=["◉","◎"],n.imuteValues=[1,0],n.octoffNames=["none","+2 (2 octaves)","+1 1/2 (octave and fifth)","+1 (octave)","+1/2 (fifth)","-1/2 (fifth)","-1 (octave)","-1 1/2 (octave and fifth)","-2 (2 octaves"],n.octoffValues=[0,24,19,12,7,-7,-12,-19,-24],n.volumeNames=["loudest","loud","medium","quiet","quietest","mute","i","couldnt","be","bothered"],n.volumeValues=[0,.25,.5,.75,1,1.25,1.5,1.75,2,-1],n.volumeMValues=[0,.5,1,1.5,2,-1],n.ipanValues=[-1,-.75,-.5,-.25,0,.25,.5,.75,1],n.operatorCount=4,n.operatorAlgorithmNames=["1←(2 3 4)","1←(2 3←4)","1←2←(3 4)","1←(2 3)←4","1←2←3←4","1←3 2←4","1 2←(3 4)","1 2←3←4","(1 2)←3←4","(1 2)←(3 4)","1 2 3←4","(1 2 3)←4","1 2 3 4"],n.midiAlgorithmNames=["1<(2 3 4)","1<(2 3<4)","1<2<(3 4)","1<(2 3)<4","1<2<3<4","1<3 2<4","1 2<(3 4)","1 2<3<4","(1 2)<3<4","(1 2)<(3 4)","1 2 3<4","(1 2 3)<4","1 2 3 4"],n.operatorModulatedBy=[[[2,3,4],[],[],[]],[[2,3],[],[4],[]],[[2],[3,4],[],[]],[[2,3],[4],[4],[]],[[2],[3],[4],[]],[[3],[4],[],[]],[[],[3,4],[],[]],[[],[3],[4],[]],[[3],[3],[4],[]],[[3,4],[3,4],[],[]],[[],[],[4],[]],[[4],[4],[4],[]],[[],[],[],[]]],n.operatorAssociatedCarrier=[[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,2,1,2],[1,2,2,2],[1,2,2,2],[1,2,2,2],[1,2,2,2],[1,2,3,3],[1,2,3,3],[1,2,3,4]],n.operatorCarrierCounts=[1,1,1,1,1,2,2,2,2,2,3,3,4],n.operatorCarrierChorus=[[0,0,0,0],[0,.04,-.073,.091],[.5,.54,.427,.591],[0,.26,-.45,.67],[0,1,2,3],[0,4,7,11],[0,3,7,10],[0,7,14,21],[0,12,24,36]],n.operatorAmplitudeMax=15,n.operatorFrequencyNames=["1×","~1×","2×","~2×","3×","4×","5×","6×","7×","8×","9×","10×","11×","13×","16×","20×"],n.midiFrequencyNames=["1x","~1x","2x","~2x","3x","4x","5x","6x","7x","8x","9x","10x","11x","13x","16x","20x"],n.operatorFrequencies=[1,1,2,2,3,4,5,6,7,8,9,10,11,13,16,20],n.operatorHzOffsets=[0,1.5,0,-1.3,0,0,0,0,0,0,0,0,0,0,0,0],n.operatorAmplitudeSigns=[1,-1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1],n.operatorEnvelopeNames=["custom","steady","punch","flare 1","flare 2","flare 3","pluck 1","pluck 2","pluck 3","swell 1","swell 2","swell 3","tremolo1","tremolo2","tremolo3","custom flare","custom tremolo","flute 1","flute 2","flute 3"],n.operatorEnvelopeType=[0,1,2,3,3,3,4,4,4,4,4,4,5,5,5,3,5,6,6,6],n.operatorSpecialCustomVolume=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!0,!0,!1,!1,!1],n.operatorEnvelopeSpeed=[0,0,0,32,8,2,32,8,2,32,8,2,4,2,1,8,0,16,8,4],n.operatorEnvelopeInverted=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!0,!0,!0,!1,!1,!1,!1,!1,!1,!1,!1],n.operatorFeedbackNames=["1⟲","2⟲","3⟲","4⟲","1⟲ 2⟲","3⟲ 4⟲","1⟲ 2⟲ 3⟲ ","2⟲ 3⟲ 4⟲ ","1⟲ 2⟲ 3⟲ 4⟲ ","1→2","1→3","1→4","2→3","2→4","3→4","1→3 2→4","1→4 2→3","1→2→3→4","1🗘2","1🗘3","1🗘4","2🗘3","2🗘4","3🗘4"],n.midiFeedbackNames=["1","2","3","4","1 2","3 4","1 2 3","2 3 4","1 2 3 4","1>2","1>3","1>4","2>3","2>4","3>4","1>3 2>4","1>4 2>3","1>2>3>4","1-2","1-3","1-4","2-3","2-4","3-4"],n.operatorFeedbackIndices=[[[1],[],[],[]],[[],[2],[],[]],[[],[],[3],[]],[[],[],[],[4]],[[1],[2],[],[]],[[],[],[3],[4]],[[1],[2],[3],[]],[[],[2],[3],[4]],[[1],[2],[3],[4]],[[],[1],[],[]],[[],[],[1],[]],[[],[],[],[1]],[[],[],[2],[]],[[],[],[],[2]],[[],[],[],[3]],[[],[],[1],[2]],[[],[],[2],[1]],[[],[1],[2],[3]],[[2],[1],[],[]],[[3],[],[1],[]],[[4],[],[],[1]],[[],[3],[2],[]],[[],[4],[],[2]],[[],[],[4],[3]]],n.pitchChannelTypeNames=["chip","FM (expert)","PWM (beta)"],n.pitchChannelTypeValues=[0,1,3],n.drumChannelTypeNames=["noise"],n.instrumentTypeNames=["chip","FM","noise","PWM"],n.oldThemeNames=["Default","ModBox 2.0","Artic","Cinnamon Roll [!]","Ocean","Rainbow [!]","Float [!]","Windows","Grassland","Dessert","Kahootiest","Beam to the Bit [!]","Pretty Egg","Poniryoshka","Gameboy [!]","Woodkid","Midnight","Snedbox","unnamed","Piano [!] [↻]","Halloween","FrozenOver❄️"],n.channelOneBrightColorPallet="#25f3ff",n.channelTwoBrightColorPallet="#44ff44",n.channelThreeBrightColorPallet="#ffff25",n.channelFourBrightColorPallet="#ff9752",n.channelFiveBrightColorPallet="#ff90ff",n.channelSixBrightColorPallet="#9f31ea",n.channelSevenBrightColorPallet="#2b6aff",n.channelEightBrightColorPallet="#00ff9f",n.channelNineBrightColorPallet="#ffbf00",n.channelTenBrightColorPallet="#d85d00",n.channelElevenBrightColorPallet="#ff00a1",n.channelTwelveBrightColorPallet="#c26afc",n.channelThirteenBrightColorPallet="#ff1616",n.channelFourteenBrightColorPallet="#ffffff",n.channelFifteenBrightColorPallet="#768dfc",n.channelSixteenBrightColorPallet="#a5ff00",n.channelOneDimColorPallet="#0099a1",n.channelTwoDimColorPallet="#439143",n.channelThreeDimColorPallet="#a1a100",n.channelFourDimColorPallet="#c75000",n.channelFiveDimColorPallet="#d020d0",n.channelSixDimColorPallet="#552377",n.channelSevenDimColorPallet="#221b89",n.channelEightDimColorPallet="#00995f",n.channelNineDimColorPallet="#d6b03e",n.channelTenDimColorPallet="#b25915",n.channelElevenDimColorPallet="#891a60",n.channelTwelveDimColorPallet="#965cbc",n.channelThirteenDimColorPallet="#991010",n.channelFourteenDimColorPallet="#aaaaaa",n.channelFifteenDimColorPallet="#5869BD",n.channelSixteenDimColorPallet="#7c9b42",n.pitchChannelColorsDim=[n.channelOneDimColorPallet,n.channelTwoDimColorPallet,n.channelThreeDimColorPallet,n.channelFourDimColorPallet,n.channelFiveDimColorPallet,n.channelSixDimColorPallet,n.channelSevenDimColorPallet,n.channelEightDimColorPallet,n.channelNineDimColorPallet,n.channelTenDimColorPallet,n.channelElevenDimColorPallet,n.channelTwelveDimColorPallet],n.pitchChannelColorsBright=[n.channelOneBrightColorPallet,n.channelTwoBrightColorPallet,n.channelThreeBrightColorPallet,n.channelFourBrightColorPallet,n.channelFiveBrightColorPallet,n.channelSixBrightColorPallet,n.channelSevenBrightColorPallet,n.channelEightBrightColorPallet,n.channelNineBrightColorPallet,n.channelTenBrightColorPallet,n.channelElevenBrightColorPallet,n.channelTwelveBrightColorPallet],n.pitchNoteColorsDim=[n.channelOneDimColorPallet,n.channelTwoDimColorPallet,n.channelThreeDimColorPallet,n.channelFourDimColorPallet,n.channelFiveDimColorPallet,n.channelSixDimColorPallet,n.channelSevenDimColorPallet,n.channelEightDimColorPallet,n.channelNineDimColorPallet,n.channelTenDimColorPallet,n.channelElevenDimColorPallet,n.channelTwelveDimColorPallet],n.pitchNoteColorsBright=[n.channelOneBrightColorPallet,n.channelTwoBrightColorPallet,n.channelThreeBrightColorPallet,n.channelFourBrightColorPallet,n.channelFiveBrightColorPallet,n.channelSixBrightColorPallet,n.channelSevenBrightColorPallet,n.channelEightBrightColorPallet,n.channelNineBrightColorPallet,n.channelTenBrightColorPallet,n.channelElevenBrightColorPallet,n.channelTwelveBrightColorPallet],n.drumChannelColorsDim=[n.channelThirteenDimColorPallet,n.channelFourteenDimColorPallet,n.channelFifteenDimColorPallet,n.channelSixteenDimColorPallet],n.drumChannelColorsBright=[n.channelThirteenBrightColorPallet,n.channelFourteenBrightColorPallet,n.channelFifteenBrightColorPallet,n.channelSixteenBrightColorPallet],n.drumNoteColorsDim=[n.channelThirteenDimColorPallet,n.channelFourteenDimColorPallet,n.channelFifteenDimColorPallet,n.channelSixteenDimColorPallet],n.drumNoteColorsBright=[n.channelThirteenBrightColorPallet,n.channelFourteenBrightColorPallet,n.channelFifteenBrightColorPallet,n.channelSixteenBrightColorPallet],n.midiPitchChannelNames=["cyan channel","yellow channel","orange channel","green channel","purple channel","blue channel"],n.midiDrumChannelNames=["gray channel","brown channel","indigo channel"],n.midiSustainInstruments=[71,80,70,68,81,81,81,81,74],n.midiDecayInstruments=[46,46,6,24,25,25,106,106,33],n.drumInterval=6,n.pitchCount=37,n.maxPitch=84,n.pitchChannelCountMin=0,n.pitchChannelCountMax=12,n.drumChannelCountMin=0,n.drumChannelCountMax=4,n.waves=[n.t([1/15,.2,5/15,7/15,.6,11/15,13/15,1,1,13/15,11/15,.6,7/15,5/15,.2,1/15,-1/15,-.2,-5/15,-7/15,-.6,-11/15,-13/15,-1,-1,-13/15,-11/15,-.6,-7/15,-5/15,-.2,-1/15]),n.t([1,-1]),n.t([1,-1,-1,-1]),n.t([1,-1,-1,-1,-1,-1,-1,-1]),n.t([1/31,3/31,5/31,7/31,9/31,11/31,13/31,15/31,17/31,19/31,21/31,23/31,25/31,27/31,29/31,1,-1,-29/31,-27/31,-25/31,-23/31,-21/31,-19/31,-17/31,-15/31,-13/31,-11/31,-9/31,-7/31,-5/31,-3/31,-1/31]),n.t([0,-.2,-.4,-.6,-.8,-1,1,-.8,-.6,-.4,-.2,1,.8,.6,.4,.2]),n.t([1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1]),n.t([1,-1,1,-1,1,0]),n.t([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0,-.2,-.4,-.5,-.6,-.7,-.8,-.85,-.9,-.95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-.95,-.9,-.85,-.8,-.7,-.6,-.5,-.4,-.2]),n.t([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1]),n.t([1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),n.t([0,.1875,.3125,.5625,.5,.75,.875,1,1,.6875,.5,.625,.625,.5,.375,.5625,.4375,.5625,.4375,.4375,.3125,.1875,.1875,.375,.5625,.5625,.5625,.5625,.5625,.4375,.25,0]),n.t([1,.7,.1,.1,0,0,0,0,0,.1,.2,.15,.25,.125,.215,.345,4]),n.t([1/15,.2,5/15,9,.06]),n.t([-.5,3.5,3,-.5,-.25,-1]),n.t([0,.05,.125,.2,.25,.3,.425,.475,.525,.625,.675,.725,.775,.8,.825,.875,.9,.925,.95,.975,.98,.99,.995,1,.995,.99,.98,.975,.95,.925,.9,.875,.825,.8,.775,.725,.675,.625,.525,.475,.425,.3,.25,.2,.125,.05,0,-.05,-.125,-.2,-.25,-.3,-.425,-.475,-.525,-.625,-.675,-.725,-.775,-.8,-.825,-.875,-.9,-.925,-.95,-.975,-.98,-.99,-.995,-1,-.995,-.99,-.98,-.975,-.95,-.925,-.9,-.875,-.825,-.8,-.775,-.725,-.675,-.625,-.525,-.475,-.425,-.3,-.25,-.2,-.125,-.05]),n.t([1,1,1,1,0,1,0,1,1,0,0,1,0,0,0]),n.t([0,0,1,1,1,1,1,1,1,1,1,1,1,1,1]),n.t([1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),n.t([1,.5,1/3,1/4]),n.t([-.9,-1,-.85,-.775,-.7,-.6,-.5,-.4,-.325,-.225,-.2,-.125,-.1,-.11,-.125,-.15,-.175,-.18,-.2,-.21,-.22,-.21,-.2,-.175,-.15,-.1,-.5,.75,.11,.175,.2,.25,.26,.275,.26,.25,.225,.2,.19,.18,.19,.2,.21,.22,.23,.24,.25,.26,.275,.28,.29,.3,.29,.28,.27,.26,.25,.225,.2,.175,.15,.1,.075,0,-.01,-.025,.025,.075,.2,.3,.475,.6,.75,.85,.85,1,.99,.95,.8,.675,.475,.275,.01,-.15,-.3,-.475,-.5,-.6,-.71,-.81,-.9,-1,-.9]),n.t([-1,-.95,-.975,-.9,-.85,-.8,-.775,-.65,-.6,-.5,-.475,-.35,-.275,-.2,-.125,-.05,0,.075,.125,.15,.2,.21,.225,.25,.225,.21,.2,.19,.175,.125,.1,.075,.06,.05,.04,.025,.04,.05,.1,.15,.225,.325,.425,.575,.7,.85,.95,1,.9,.675,.375,.2,.275,.4,.5,.55,.6,.625,.65,.65,.65,.65,.64,.6,.55,.5,.4,.325,.25,.15,.05,-.05,-.15,-.275,-.35,-.45,-.55,-.65,-.7,-.78,-.825,-.9,-.925,-.95,-.975]),n.t([1,0,.1,-.1,-.2,-.4,-.3,-1]),n.t([1,-1,4,2.15,4.13,5.15,0,-.05,1]),n.t([6.1,-2.9,1.4,-2.9]),n.t([1,4,2,1,-.1,-1,-.12]),n.t([.2,1,2.6,1,0,-2.4]),n.t([1,.9,.8,.7,.6,.5,.4,.3,.2,.1,0,.1,.2,.3,.4,.5,.6,.7,.8,.9]),n.t([1,.9,.8,.7,.6,.5,.4,.3,.2,.1,0]),n.t([1,-.9,.8,-.7,.6,-.5,.4,-.3,.2,-.1,0,-.1,.2,-.3,.4,-.5,.6,-.7,.8,-.9,1])],n.wavesMixC=[n.t([1/15,.2,5/15,7/15,.6,11/15,13/15,1,1,13/15,11/15,.6,7/15,5/15,.2,1/15,-1/15,-.2,-5/15,-7/15,-.6,-11/15,-13/15,-1,-1,-13/15,-11/15,-.6,-7/15,-5/15,-.2,-1/15]),n.t([1,-1]),n.t([1,-1,-1,-1]),n.t([1,-1,-1,-1,-1,-1,-1,-1]),n.t([1/31,3/31,5/31,7/31,9/31,11/31,13/31,15/31,17/31,19/31,21/31,23/31,25/31,27/31,29/31,1,-1,-29/31,-27/31,-25/31,-23/31,-21/31,-19/31,-17/31,-15/31,-13/31,-11/31,-9/31,-7/31,-5/31,-3/31,-1/31]),n.t([0,-.2,-.4,-.6,-.8,-1,1,-.8,-.6,-.4,-.2,1,.8,.6,.4,.2]),n.t([1,1,1,1,1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1]),n.t([1,-1,1,-1,1,0]),n.t([0,.2,.4,.5,.6,.7,.8,.85,.9,.95,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,.95,.9,.85,.8,.7,.6,.5,.4,.2,0,-.2,-.4,-.5,-.6,-.7,-.8,-.85,-.9,-.95,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-.95,-.9,-.85,-.8,-.7,-.6,-.5,-.4,-.2]),n.t([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,-1]),n.t([1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),n.t([0,.1875,.3125,.5625,.5,.75,.875,1,1,.6875,.5,.625,.625,.5,.375,.5625,.4375,.5625,.4375,.4375,.3125,.1875,.1875,.375,.5625,.5625,.5625,.5625,.5625,.4375,.25,0]),n.t([1,.7,.1,.1,0,0,0,0,0,.1,.2,.15,.25,.125,.215,.345,4]),n.t([1/15,.2,5/15,9,.06]),n.t([-.5,3.5,3,-.5,-.25,-1]),n.t([0,.05,.125,.2,.25,.3,.425,.475,.525,.625,.675,.725,.775,.8,.825,.875,.9,.925,.95,.975,.98,.99,.995,1,.995,.99,.98,.975,.95,.925,.9,.875,.825,.8,.775,.725,.675,.625,.525,.475,.425,.3,.25,.2,.125,.05,0,-.05,-.125,-.2,-.25,-.3,-.425,-.475,-.525,-.625,-.675,-.725,-.775,-.8,-.825,-.875,-.9,-.925,-.95,-.975,-.98,-.99,-.995,-1,-.995,-.99,-.98,-.975,-.95,-.925,-.9,-.875,-.825,-.8,-.775,-.725,-.675,-.625,-.525,-.475,-.425,-.3,-.25,-.2,-.125,-.05]),n.t([1,1,1,1,0,1,0,1,1,0,0,1,0,0,0]),n.t([0,0,1,1,1,1,1,1,1,1,1,1,1,1,1]),n.t([1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),n.t([1,.5,1/3,1/4]),n.t([-.9,-1,-.85,-.775,-.7,-.6,-.5,-.4,-.325,-.225,-.2,-.125,-.1,-.11,-.125,-.15,-.175,-.18,-.2,-.21,-.22,-.21,-.2,-.175,-.15,-.1,-.5,.75,.11,.175,.2,.25,.26,.275,.26,.25,.225,.2,.19,.18,.19,.2,.21,.22,.23,.24,.25,.26,.275,.28,.29,.3,.29,.28,.27,.26,.25,.225,.2,.175,.15,.1,.075,0,-.01,-.025,.025,.075,.2,.3,.475,.6,.75,.85,.85,1,.99,.95,.8,.675,.475,.275,.01,-.15,-.3,-.475,-.5,-.6,-.71,-.81,-.9,-1,-.9]),n.t([-1,-.95,-.975,-.9,-.85,-.8,-.775,-.65,-.6,-.5,-.475,-.35,-.275,-.2,-.125,-.05,0,.075,.125,.15,.2,.21,.225,.25,.225,.21,.2,.19,.175,.125,.1,.075,.06,.05,.04,.025,.04,.05,.1,.15,.225,.325,.425,.575,.7,.85,.95,1,.9,.675,.375,.2,.275,.4,.5,.55,.6,.625,.65,.65,.65,.65,.64,.6,.55,.5,.4,.325,.25,.15,.05,-.05,-.15,-.275,-.35,-.45,-.55,-.65,-.7,-.78,-.825,-.9,-.925,-.95,-.975]),n.t([.7,0,.1,-.1,-.2,-.4,-.3,-.7]),n.t([1,-1,4,2.15,4.1,5.05,0,-.05,1]),n.t([4.5,-1.7,1,-1.7]),n.t([.1,.4,.2,.1,-.1,-1,-.12]),n.t([.03,.13,.3,1,0,-.26]),n.t([2,1.75,1.5,1.25,1,.75,.5,.25,0,.25,.5,.75,1,1.25,1.5,1.75]),n.t([1,1.9,1.8,1.7,1.6,1.5,1.4,1.3,1.2,1.1,1]),n.t([-1,-.9,.8,-.7,.6,-.5,.4,-.3,.2,-.1,0,-.1,.2,-.3,.4,-.5,.6,-.7,.8,-.9,-1])],n.pwmwaves=[n.t([1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),n.t([1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),n.t([1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),n.t([1,1,-1,-1,-1,-1,-1,-1,-1,-1]),n.t([1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),n.t([1,1,1,-1,-1,-1,-1,-1,-1,-1]),n.t([1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),n.t([1,1,1,1,-1,-1,-1,-1,-1,-1]),n.t([1,1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]),n.t([1,1,1,1,1,-1,-1,-1,-1,-1])],n.sineWaveLength=256,n.sineWaveMask=n.sineWaveLength-1,n.sineWave=n.generateSineWave();class l{constructor(t,e,s,h){this.i=[],this.l=0;for(let n=s;n<h;n++){const s=t[e.charCodeAt(n)];this.i.push(s>>5&1),this.i.push(s>>4&1),this.i.push(s>>3&1),this.i.push(s>>2&1),this.i.push(s>>1&1),this.i.push(1&s)}}read(t){let e=0;for(;t>0;)e<<=1,e+=this.i[this.l++],t--;return e}readLongTail(t,e){let s=t,h=e;for(;this.i[this.l++];)s+=1<<h,h++;for(;h>0;)h--,this.i[this.l++]&&(s+=1<<h);return s}readPartDuration(){return this.readLongTail(1,2)}readPinCount(){return this.readLongTail(1,0)}readPitchInterval(){return this.read(1)?-this.readLongTail(1,3):this.readLongTail(1,3)}}class r{constructor(){this.i=[]}write(t,e){for(t--;t>=0;)this.i.push(e>>>t&1),t--}writeLongTail(t,e,s){if(s<t)throw new Error("value out of bounds");s-=t;let h=e;for(;s>=1<<h;)this.i.push(1),s-=1<<h,h++;for(this.i.push(0);h>0;)h--,this.i.push(s>>>h&1)}writePartDuration(t){this.writeLongTail(1,2,t)}writePinCount(t){this.writeLongTail(1,0,t)}writePitchInterval(t){t<0?(this.write(1,1),this.writeLongTail(1,3,-t)):(this.write(1,0),this.writeLongTail(1,3,t))}concat(t){this.i=this.i.concat(t.i)}encodeBase64(t,e){for(let s=0;s<this.i.length;s+=6){const h=this.i[s]<<5|this.i[s+1]<<4|this.i[s+2]<<3|this.i[s+3]<<2|this.i[s+4]<<1|this.i[s+5];e.push(t[h])}return e}lengthBase64(){return Math.ceil(this.i.length/6)}}class o{constructor(t){this.frequency=0,this.amplitude=0,this.envelope=0,this.reset(t)}reset(t){this.frequency=0,this.amplitude=t<=1?n.operatorAmplitudeMax:0,this.envelope=1}copy(t){this.frequency=t.frequency,this.amplitude=t.amplitude,this.envelope=t.envelope}}function f(t,e,s){return{interval:t,time:e,volume:s}}function c(t,e,s,h,n=!1){return{pitches:[t],pins:[f(0,0,h),f(0,s-e,n?0:h)],start:e,end:s}}class u{constructor(){this.type=0,this.wave=1,this.filter=1,this.transition=1,this.effect=0,this.harm=0,this.fmChorus=1,this.imute=0,this.octoff=0,this.chorus=0,this.volume=0,this.ipan=4,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0,this.feedbackEnvelope=1,this.operators=[];for(let t=0;t<n.operatorCount;t++)this.operators.push(new o(t))}reset(){this.type=0,this.wave=1,this.filter=1,this.transition=1,this.effect=0,this.harm=0,this.fmChorus=1,this.imute=0,this.ipan=4,this.octoff=0,this.chorus=0,this.volume=0,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0,this.feedbackEnvelope=1;for(let t=0;t<this.operators.length;t++)this.operators[t].reset(t)}setTypeAndReset(t){switch(this.type=t,t){case 0:case 3:this.wave=1,this.filter=1,this.transition=1,this.effect=0,this.harm=0,this.imute=0,this.ipan=4,this.octoff=0,this.chorus=0,this.volume=0;break;case 1:this.wave=1,this.transition=1,this.volume=0,this.imute=0,this.ipan=4,this.harm=0,this.octoff=0;break;case 2:this.transition=1,this.octoff=0,this.fmChorus=1,this.ipan=4,this.effect=0,this.algorithm=0,this.feedbackType=0,this.feedbackAmplitude=0,this.feedbackEnvelope=1,this.volume=0;for(let t=0;t<this.operators.length;t++)this.operators[t].reset(t)}}copy(t){this.type=t.type,this.wave=t.wave,this.filter=t.filter,this.transition=t.transition,this.effect=t.effect,this.chorus=t.chorus,this.volume=t.volume,this.harm=t.harm,this.fmChorus=t.fmChorus,this.imute=t.imute,this.ipan=t.ipan,this.octoff=t.octoff,this.algorithm=t.algorithm,this.feedbackType=t.feedbackType,this.feedbackAmplitude=t.feedbackAmplitude,this.feedbackEnvelope=t.feedbackEnvelope;for(let e=0;e<this.operators.length;e++)this.operators[e].copy(t.operators[e])}}class d{constructor(){this.octave=0,this.instruments=[],this.patterns=[],this.bars=[]}}class m{constructor(){this.notes=[],this.instrument=0}cloneNotes(){const t=[];for(const e of this.notes){const s=c(-1,e.start,e.end,3);s.pitches=e.pitches.concat(),s.pins=[];for(const t of e.pins)s.pins.push(f(t.interval,t.time,t.volume));t.push(s)}return t}reset(){this.notes.length=0,this.instrument=0}}class p{constructor(t){this.channels=[],this.o=[],null!=t?this.fromBase64String(t):this.initToDefault(!0)}getChannelCount(){return this.pitchChannelCount+this.drumChannelCount}getChannelUnusedCount(){return n.pitchChannelCountMax+n.drumChannelCountMax-(this.pitchChannelCount+this.drumChannelCount)}getTimeSig(){return this.beatsPerBar+"/"+this.partsPerBeat+" with "+this.barCount+" bars."}getScaleNKey(){return' "'+n.scales[this.scale].name+'" and your key is '+n.keys[this.key].name}getChannelIsDrum(t){return t>=this.pitchChannelCount}getChannelColorDim(t){return t<this.pitchChannelCount?n.pitchChannelColorsDim[t]:n.drumChannelColorsDim[t-this.pitchChannelCount]}getChannelColorBright(t){return t<this.pitchChannelCount?n.pitchChannelColorsBright[t]:n.drumChannelColorsBright[t-this.pitchChannelCount]}getNoteColorDim(t){return t<this.pitchChannelCount?n.pitchNoteColorsDim[t]:n.drumNoteColorsDim[t-this.pitchChannelCount]}getNoteColorBright(t){return t<this.pitchChannelCount?n.pitchNoteColorsBright[t]:n.drumNoteColorsBright[t-this.pitchChannelCount]}initToDefault(t=!0){if(this.scale=0,this.setSongTheme="none",this.key=n.keys.map((t=>t.name)).indexOf("C"),this.mix=1,this.sampleRate=2,this.loopStart=0,this.loopLength=4,this.tempo=151,this.reverb=0,this.blend=0,this.riff=0,this.detune=0,this.muff=0,this.beatsPerBar=8,this.barCount=16,this.patternsPerChannel=8,this.partsPerBeat=4,this.instrumentsPerChannel=1,t){this.pitchChannelCount=4,this.drumChannelCount=1;for(let t=0;t<this.getChannelCount();t++){this.channels.length<=t&&(this.channels[t]=new d);const e=this.channels[t];e.octave=4-t;for(let t=0;t<this.patternsPerChannel;t++)e.patterns.length<=t?e.patterns[t]=new m:e.patterns[t].reset();e.patterns.length=this.patternsPerChannel;for(let t=0;t<this.instrumentsPerChannel;t++)e.instruments.length<=t?e.instruments[t]=new u:e.instruments[t].reset();e.instruments.length=this.instrumentsPerChannel;for(let t=0;t<this.barCount;t++)e.bars[t]=t<4?1:0;e.bars.length=this.barCount}this.channels.length=this.getChannelCount()}}toBase64String(){let t,e=[];const s=p.u;e.push(p.m),e.push(s[p.p]),e.push(110,s[this.pitchChannelCount],s[this.drumChannelCount]),e.push(122);var h=encodeURIComponent(this.setSongTheme);e.push(s[h.length>>6],s[63&h.length]);for(let t=0;t<h.length;t++)e.push(h.charCodeAt(t));e.push(115,s[this.scale]),e.push(117,s[this.mix]),e.push(124,s[this.sampleRate]),e.push(107,s[this.key]),e.push(108,s[this.loopStart>>6],s[63&this.loopStart]),e.push(101,s[this.loopLength-1>>6],s[this.loopLength-1&63]),e.push(116,s[this.tempo>>6],s[63&this.tempo]),e.push(109,s[this.reverb]),e.push(120,s[this.blend]),e.push(121,s[this.riff]),e.push(72,s[this.detune]),e.push(36,s[this.muff]),e.push(97,s[this.beatsPerBar-1]),e.push(103,s[this.barCount-1>>6],s[this.barCount-1&63]),e.push(106,s[this.patternsPerChannel-1]),e.push(105,s[this.instrumentsPerChannel-1]),e.push(114,s[n.partCounts.indexOf(this.partsPerBeat)]),e.push(111);for(let t=0;t<this.getChannelCount();t++)e.push(s[this.channels[t].octave]);for(let t=0;t<this.getChannelCount();t++)for(let h=0;h<this.instrumentsPerChannel;h++){const i=this.channels[t].instruments[h];if(t<this.pitchChannelCount)if(e.push(84,s[i.type]),0==i.type)e.push(119,s[i.wave]),e.push(102,s[i.filter]),e.push(100,s[i.transition]),e.push(99,s[i.effect]),e.push(113,s[i.harm]),e.push(71,s[i.imute]),e.push(76,s[i.ipan]),e.push(66,s[i.octoff]),e.push(104,s[i.chorus]),e.push(118,s[i.volume]);else if(1==i.type){e.push(100,s[i.transition]),e.push(99,s[i.effect]),e.push(66,s[i.octoff]),e.push(35,s[i.fmChorus]),e.push(71,s[i.imute]),e.push(76,s[i.ipan]),e.push(65,s[i.algorithm]),e.push(70,s[i.feedbackType]),e.push(95,s[i.feedbackAmplitude]),e.push(86,s[i.feedbackEnvelope]),e.push(118,s[i.volume]),e.push(81);for(let t=0;t<n.operatorCount;t++)e.push(s[i.operators[t].frequency]);e.push(80);for(let t=0;t<n.operatorCount;t++)e.push(s[i.operators[t].amplitude]);e.push(69);for(let t=0;t<n.operatorCount;t++)e.push(s[i.operators[t].envelope])}else{if(3!=i.type)throw new Error("Unknown instrument type.");e.push(119,s[i.wave]),e.push(102,s[i.filter]),e.push(100,s[i.transition]),e.push(99,s[i.effect]),e.push(113,s[i.harm]),e.push(71,s[i.imute]),e.push(76,s[i.ipan]),e.push(66,s[i.octoff]),e.push(104,s[i.chorus]),e.push(118,s[i.volume])}else e.push(84,s[2]),e.push(119,s[i.wave]),e.push(100,s[i.transition]),e.push(118,s[i.volume]),e.push(71,s[i.imute]),e.push(113,s[i.harm]),e.push(66,s[i.octoff]),e.push(76,s[i.ipan])}e.push(98),t=new r;let i=0;for(;1<<i<this.patternsPerChannel+1;)i++;for(let e=0;e<this.getChannelCount();e++)for(let s=0;s<this.barCount;s++)t.write(i,this.channels[e].bars[s]);t.encodeBase64(s,e),e.push(112),t=new r;let a=0;for(;1<<a<this.instrumentsPerChannel;)a++;for(let e=0;e<this.getChannelCount();e++){const h=this.getChannelIsDrum(e),n=h?0:12*this.channels[e].octave;let i=(h?4:12)+n;const l=h?[4,6,7,2,3,8,0,10]:[12,19,24,31,36,7,0],o=[];for(let t=0;t<l.length;t++)l[t]+=n;for(const h of this.channels[e].patterns)if(t.write(a,h.instrument),h.notes.length>0){t.write(1,1);let e=0;for(const n of h.notes){n.start>e&&(t.write(2,0),t.writePartDuration(n.start-e));const h=new r;for(let t=1;t<n.pitches.length;t++)h.write(1,1);n.pitches.length<4&&h.write(1,0),h.writePinCount(n.pins.length-1),h.write(2,n.pins[0].volume);let a=0,f=n.pitches[0],c=f;const u=[];for(let t=1;t<n.pins.length;t++){const e=n.pins[t],s=f+e.interval;c!=s?(h.write(1,1),u.push(s),c=s):h.write(1,0),h.writePartDuration(e.time-a),a=e.time,h.write(2,e.volume)}const d=String.fromCharCode.apply(null,h.encodeBase64(s,[])),m=o.indexOf(d);-1==m?(t.write(2,1),t.concat(h)):(t.write(1,1),t.writeLongTail(0,0,m),o.splice(m,1)),o.unshift(d),o.length>10&&o.pop();const p=n.pitches.concat(u);for(let e=0;e<p.length;e++){const s=p[e],h=l.indexOf(s);if(-1==h){let e=0,h=i;if(h<s)for(;h!=s;)h++,-1==l.indexOf(h)&&e++;else for(;h!=s;)h--,-1==l.indexOf(h)&&e--;t.write(1,0),t.writePitchInterval(e)}else t.write(1,1),t.write(3,h),l.splice(h,1);l.unshift(s),l.length>8&&l.pop(),i=e==n.pitches.length-1?n.pitches[0]:s}e=n.end}e<this.beatsPerBar*this.partsPerBeat&&(t.write(2,0),t.writePartDuration(this.beatsPerBar*this.partsPerBeat-e))}else t.write(1,0)}let l=t.lengthBase64(),o=[];for(;l>0;)o.unshift(s[63&l]),l>>=6;if(e.push(s[o.length]),Array.prototype.push.apply(e,o),t.encodeBase64(s,e),e.length>=65535)throw new Error("Song hash code too long.");return String.fromCharCode.apply(null,e)}fromBase64String(t){if(null==t||""==t)return void this.initToDefault(!0);let e=0;for(;t.charCodeAt(e)<=32;)e++;if(35==t.charCodeAt(e)&&e++,123==t.charCodeAt(e))return void this.fromJsonObject(JSON.parse(0==e?t:t.substring(e)));let s,h;110==t.charCodeAt(e)?(s=!1,h=!0,e++):(s=!0,h=!1);const i=p.v[t.charCodeAt(e++)];if(s&&(-1==i||i>p.P||i<p.L))return;if(h&&(-1==i||i>p.p||i<p.M))return;const r=i<3,o=i<4,y=i<5,g=i<6,b=p.v;if(this.initToDefault(s&&g||h),s&&r){for(const t of this.channels)t.instruments[0].transition=0;this.channels[3].instruments[0].wave=0}let v=0,P=-1;for(;e<t.length;){const i=t.charCodeAt(e++);let p;if(110==i){this.pitchChannelCount=b[t.charCodeAt(e++)],this.drumChannelCount=b[t.charCodeAt(e++)],this.pitchChannelCount=a(n.pitchChannelCountMin,n.pitchChannelCountMax+1,this.pitchChannelCount),this.drumChannelCount=a(n.drumChannelCountMin,n.drumChannelCountMax+1,this.drumChannelCount);for(let t=this.channels.length;t<this.getChannelCount();t++)this.channels[t]=new d;this.channels.length=this.getChannelCount()}else if(115==i)this.scale=b[t.charCodeAt(e++)],s&&r&&10==this.scale&&(this.scale=11);else if(117==i)this.mix=b[t.charCodeAt(e++)];else if(107==i)this.key=b[t.charCodeAt(e++)];else if(122==i)if(s){var L=b[t.charCodeAt(e++)];this.setSongTheme=["none","modbox2","artic","Cinnamon Roll","Ocean","rainbow","float","windows","grassland","dessert","kahootiest","beambit","egg","Poniryoshka","gameboy","woodkid","midnight","snedbox","unnamed","piano","halloween","frozen"][L]}else{var M=(b[t.charCodeAt(e++)]<<6)+b[t.charCodeAt(e++)];this.setSongTheme=decodeURIComponent(t.substring(e,e+M)),e+=M}else if(108==i)this.loopStart=s&&y?b[t.charCodeAt(e++)]:(b[t.charCodeAt(e++)]<<6)+b[t.charCodeAt(e++)];else if(101==i)this.loopLength=s&&y?b[t.charCodeAt(e++)]:(b[t.charCodeAt(e++)]<<6)+b[t.charCodeAt(e++)]+1;else if(116==i)this.tempo=s?o?[1,4,7,10][b[t.charCodeAt(e++)]]:[88,95,103,111,120,130,140,151,163,176,190,206,222,240,259][b[t.charCodeAt(e++)]]:(b[t.charCodeAt(e++)]<<6)+b[t.charCodeAt(e++)],this.tempo=a(n.tempoMin,n.tempoMax,this.tempo);else if(109==i)this.reverb=b[t.charCodeAt(e++)],this.reverb=a(0,n.reverbRange,this.reverb);else if(120==i)this.blend=a(0,n.blendRange,b[t.charCodeAt(e++)]);else if(121==i)this.riff=a(0,n.riffRange,b[t.charCodeAt(e++)]);else if(124==i)this.sampleRate=b[t.charCodeAt(e++)];else if(72==i)this.detune=a(0,n.detuneRange,b[t.charCodeAt(e++)]);else if(36==i)this.muff=a(0,n.muffRange,b[t.charCodeAt(e++)]);else if(97==i)this.beatsPerBar=s&&r?[6,7,8,9,10][b[t.charCodeAt(e++)]]:b[t.charCodeAt(e++)]+1,this.beatsPerBar=Math.max(n.beatsPerBarMin,Math.min(n.beatsPerBarMax,this.beatsPerBar));else if(103==i){this.barCount=(b[t.charCodeAt(e++)]<<6)+b[t.charCodeAt(e++)]+1,this.barCount=Math.max(n.barCountMin,Math.min(n.barCountMax,this.barCount));for(let t=0;t<this.getChannelCount();t++){for(let e=this.channels[t].bars.length;e<this.barCount;e++)this.channels[t].bars[e]=1;this.channels[t].bars.length=this.barCount}}else if(106==i){this.patternsPerChannel=b[t.charCodeAt(e++)]+1,this.patternsPerChannel=Math.max(1,Math.min(n.barCountMax,this.patternsPerChannel));for(let t=0;t<this.getChannelCount();t++){for(let e=this.channels[t].patterns.length;e<this.patternsPerChannel;e++)this.channels[t].patterns[e]=new m;this.channels[t].patterns.length=this.patternsPerChannel}}else if(105==i){this.instrumentsPerChannel=b[t.charCodeAt(e++)]+1,this.instrumentsPerChannel=Math.max(n.instrumentsPerChannelMin,Math.min(n.instrumentsPerChannelMax,this.instrumentsPerChannel));for(let t=0;t<this.getChannelCount();t++){for(let e=this.channels[t].instruments.length;e<this.instrumentsPerChannel;e++)this.channels[t].instruments[e]=new u;this.channels[t].instruments.length=this.instrumentsPerChannel}}else if(114==i)this.partsPerBeat=n.partCounts[b[t.charCodeAt(e++)]];else if(111==i)if(s&&r)p=b[t.charCodeAt(e++)],this.channels[p].octave=a(0,5,b[t.charCodeAt(e++)]);else for(p=0;p<this.getChannelCount();p++)this.channels[p].octave=a(0,5,b[t.charCodeAt(e++)]);else if(84==i){P++,P>=this.instrumentsPerChannel&&(v++,P=0);const s=v<this.pitchChannelCount,h=this.channels[v].instruments[P];let n=a(0,4,b[t.charCodeAt(e++)]);2==n&&s&&(n=3),h.setTypeAndReset(n)}else if(119==i)if(s&&r)p=b[t.charCodeAt(e++)],this.channels[p].instruments[0].wave=a(0,n.waveNames.length,b[t.charCodeAt(e++)]);else if(s&&g)for(p=0;p<this.getChannelCount();p++){const s=p>=this.pitchChannelCount;for(let h=0;h<this.instrumentsPerChannel;h++)this.channels[p].instruments[h].wave=a(0,s?n.drumNames.length:n.waveNames.length,b[t.charCodeAt(e++)])}else{const s=v>=this.pitchChannelCount;this.channels[v].instruments[P].wave=a(0,s?n.drumNames.length:n.waveNames.length,b[t.charCodeAt(e++)])}else if(102==i)if(s&&r)p=b[t.charCodeAt(e++)],this.channels[p].instruments[0].filter=[1,3,4,5][a(0,n.filterNames.length,b[t.charCodeAt(e++)])];else if(s&&g)for(p=0;p<this.getChannelCount();p++)for(let s=0;s<this.instrumentsPerChannel;s++)this.channels[p].instruments[s].filter=a(0,n.filterNames.length,b[t.charCodeAt(e++)]+1);else this.channels[v].instruments[P].filter=a(0,n.filterNames.length,b[t.charCodeAt(e++)]);else if(100==i)if(s&&r)p=b[t.charCodeAt(e++)],this.channels[p].instruments[0].transition=a(0,n.transitionNames.length,b[t.charCodeAt(e++)]);else if(s&&g)for(p=0;p<this.getChannelCount();p++)for(let s=0;s<this.instrumentsPerChannel;s++)this.channels[p].instruments[s].transition=a(0,n.transitionNames.length,b[t.charCodeAt(e++)]);else this.channels[v].instruments[P].transition=a(0,n.transitionNames.length,b[t.charCodeAt(e++)]);else if(99==i)if(s&&r){p=b[t.charCodeAt(e++)];let s=a(0,n.effectNames.length,b[t.charCodeAt(e++)]);1==s?s=3:3==s&&(s=5),this.channels[p].instruments[0].effect=s}else if(s&&g)for(p=0;p<this.getChannelCount();p++)for(let s=0;s<this.instrumentsPerChannel;s++)this.channels[p].instruments[s].effect=a(0,n.effectNames.length,b[t.charCodeAt(e++)]);else this.channels[v].instruments[P].effect=a(0,n.effectNames.length,b[t.charCodeAt(e++)]);else if(104==i)if(s&&r)p=b[t.charCodeAt(e++)],this.channels[p].instruments[0].chorus=a(0,n.chorusNames.length,b[t.charCodeAt(e++)]);else if(s&&g)for(p=0;p<this.getChannelCount();p++)for(let s=0;s<this.instrumentsPerChannel;s++)this.channels[p].instruments[s].chorus=a(0,n.chorusNames.length,b[t.charCodeAt(e++)]);else this.channels[v].instruments[P].chorus=a(0,n.chorusNames.length,b[t.charCodeAt(e++)]);else if(113==i)if(s&&g)for(p=0;p<this.getChannelCount();p++)for(let s=0;s<this.instrumentsPerChannel;s++)this.channels[p].instruments[s].harm=a(0,n.harmNames.length,b[t.charCodeAt(e++)]);else this.channels[v].instruments[P].harm=a(0,n.harmNames.length,b[t.charCodeAt(e++)]);else if(35==i)this.channels[v].instruments[P].fmChorus=a(0,n.fmChorusNames.length,b[t.charCodeAt(e++)]);else if(71==i)this.channels[v].instruments[P].imute=a(0,n.imuteNames.length,b[t.charCodeAt(e++)]);else if(76==i)this.channels[v].instruments[P].ipan=a(0,n.ipanValues.length,b[t.charCodeAt(e++)]);else if(66==i)if(s&&g)for(p=0;p<this.getChannelCount();p++)for(let s=0;s<this.instrumentsPerChannel;s++)this.channels[p].instruments[s].octoff=a(0,n.octoffNames.length,b[t.charCodeAt(e++)]);else this.channels[v].instruments[P].octoff=a(0,n.octoffNames.length,b[t.charCodeAt(e++)]);else if(118==i)if(s&&r)p=b[t.charCodeAt(e++)],this.channels[p].instruments[0].volume=a(0,n.volumeNames.length,b[t.charCodeAt(e++)]);else if(s&&g)for(p=0;p<this.getChannelCount();p++)for(let s=0;s<this.instrumentsPerChannel;s++)this.channels[p].instruments[s].volume=a(0,n.volumeNames.length,b[t.charCodeAt(e++)]);else this.channels[v].instruments[P].volume=a(0,n.volumeNames.length,b[t.charCodeAt(e++)]);else if(65==i)this.channels[v].instruments[P].algorithm=a(0,n.operatorAlgorithmNames.length,b[t.charCodeAt(e++)]);else if(70==i)this.channels[v].instruments[P].feedbackType=a(0,n.operatorFeedbackNames.length,b[t.charCodeAt(e++)]);else if(95==i)this.channels[v].instruments[P].feedbackAmplitude=a(0,n.operatorAmplitudeMax+1,b[t.charCodeAt(e++)]);else if(86==i)this.channels[v].instruments[P].feedbackEnvelope=a(0,n.operatorEnvelopeNames.length,b[t.charCodeAt(e++)]);else if(81==i)for(let s=0;s<n.operatorCount;s++)this.channels[v].instruments[P].operators[s].frequency=a(0,n.operatorFrequencyNames.length,b[t.charCodeAt(e++)]);else if(80==i)for(let s=0;s<n.operatorCount;s++)this.channels[v].instruments[P].operators[s].amplitude=a(0,n.operatorAmplitudeMax+1,b[t.charCodeAt(e++)]);else if(69==i)for(let s=0;s<n.operatorCount;s++)this.channels[v].instruments[P].operators[s].envelope=a(0,n.operatorEnvelopeNames.length,b[t.charCodeAt(e++)]);else if(98==i){let h;if(s&&r){p=b[t.charCodeAt(e++)];const s=b[t.charCodeAt(e++)];h=Math.ceil(.5*s);const n=new l(b,t,e,e+h);for(let t=0;t<s;t++)this.channels[p].bars[t]=n.read(3)+1}else if(s&&y){let s=0;for(;1<<s<this.patternsPerChannel;)s++;h=Math.ceil(this.getChannelCount()*this.barCount*s/6);const n=new l(b,t,e,e+h);for(p=0;p<this.getChannelCount();p++)for(let t=0;t<this.barCount;t++)this.channels[p].bars[t]=n.read(s)+1}else{let s=0;for(;1<<s<this.patternsPerChannel+1;)s++;h=Math.ceil(this.getChannelCount()*this.barCount*s/6);const n=new l(b,t,e,e+h);for(p=0;p<this.getChannelCount();p++)for(let t=0;t<this.barCount;t++)this.channels[p].bars[t]=n.read(s)}e+=h}else if(112==i){let n=0;if(s&&r)p=b[t.charCodeAt(e++)],e++,n=b[t.charCodeAt(e++)],n<<=6,n+=b[t.charCodeAt(e++)];else{p=0;let s=b[t.charCodeAt(e++)];for(;s>0;)n<<=6,n+=b[t.charCodeAt(e++)],s--}const i=new l(b,t,e,e+n);e+=n;let a=0;for(;1<<a<this.instrumentsPerChannel;)a++;for(;;){const t=this.getChannelIsDrum(p),e=t?0:12*this.channels[p].octave;let n=null,l=null,o=(t?4:12)+e;const u=t?[4,6,7,2,3,8,0,10]:[12,19,24,31,36,7,0],d=[];for(let t=0;t<u.length;t++)u[t]+=e;for(let t=0;t<this.patternsPerChannel;t++){const e=this.channels[p].patterns[t];if(e.reset(),e.instrument=i.read(a),(s&&!r||h)&&0==i.read(1))continue;let m=0;const y=e.notes;for(;m<this.beatsPerBar*this.partsPerBeat;){const t=1==i.read(1);let e=!1,s=0;if(t?s=i.readLongTail(0,0):e=1==i.read(1),t||e){let e,h,a;if(t)e=d[s],d.splice(s,1);else{for(e={},e.pitchCount=1;e.pitchCount<4&&1==i.read(1);)e.pitchCount++;e.pinCount=i.readPinCount(),e.initialVolume=i.read(2),e.pins=[],e.length=0,e.bendCount=0;for(let t=0;t<e.pinCount;t++)h={},h.pitchBend=1==i.read(1),h.pitchBend&&e.bendCount++,e.length+=i.readPartDuration(),h.time=e.length,h.volume=i.read(2),e.pins.push(h)}d.unshift(e),d.length>10&&d.pop(),n=c(0,m,m+e.length,e.initialVolume),n.pitches=[],n.pins.length=1;const r=[];for(let t=0;t<e.pitchCount+e.bendCount;t++){if(1==i.read(1)){const t=i.read(3);a=u[t],u.splice(t,1)}else{a=o;let t=i.readPitchInterval();for(;t>0;){for(a++;-1!=u.indexOf(a);)a++;t--}for(;t<0;){for(a--;-1!=u.indexOf(a);)a--;t++}}u.unshift(a),u.length>8&&u.pop(),t<e.pitchCount?n.pitches.push(a):r.push(a),o=t==e.pitchCount-1?n.pitches[0]:a}r.unshift(n.pitches[0]);for(const t of e.pins)t.pitchBend&&r.shift(),l=f(r[0]-n.pitches[0],t.time,t.volume),n.pins.push(l);m=n.end,y.push(n)}else{m+=i.readPartDuration()}}}if(s&&r)break;if(p++,p>=this.getChannelCount())break}}}}toJsonObject(t=!0,e=1,s=!0){const h=[];for(let i=0;i<this.getChannelCount();i++){const a=[],l=this.getChannelIsDrum(i);for(let t=0;t<this.instrumentsPerChannel;t++){const e=this.channels[i].instruments[t];if(l)a.push({type:n.instrumentTypeNames[2],volume:20*(5-e.volume),imute:n.imuteNames[e.imute],wave:n.drumNames[e.wave],transition:n.transitionNames[e.transition],octoff:n.octoffNames[e.octoff],ipan:n.ipanValues[e.ipan]});else if(0==e.type)a.push({type:n.instrumentTypeNames[e.type],volume:20*(5-e.volume),wave:n.waveNames[e.wave],transition:n.transitionNames[e.transition],filter:n.filterNames[e.filter],chorus:n.chorusNames[e.chorus],effect:n.effectNames[e.effect],harm:n.harmNames[e.harm],imute:n.imuteNames[e.imute],octoff:n.octoffNames[e.octoff],ipan:n.ipanValues[e.ipan]});else if(1==e.type){const t=[];for(const s of e.operators)t.push({frequency:n.operatorFrequencyNames[s.frequency],amplitude:s.amplitude,envelope:n.operatorEnvelopeNames[s.envelope]});a.push({type:n.instrumentTypeNames[e.type],volume:20*(5-e.volume),transition:n.transitionNames[e.transition],effect:n.effectNames[e.effect],octoff:n.octoffNames[e.octoff],fmChorus:n.fmChorusNames[e.fmChorus],algorithm:n.operatorAlgorithmNames[e.algorithm],feedbackType:n.operatorFeedbackNames[e.feedbackType],feedbackAmplitude:e.feedbackAmplitude,feedbackEnvelope:n.operatorEnvelopeNames[e.feedbackEnvelope],operators:t,ipan:n.ipanValues[e.ipan],imute:n.imuteNames[e.imute]})}else{if(3!=e.type)throw new Error("Unrecognized instrument type");a.push({type:n.instrumentTypeNames[2],volume:20*(5-e.volume),wave:n.pwmwaveNames[e.wave],transition:n.transitionNames[e.transition],filter:n.filterNames[e.filter],chorus:n.chorusNames[e.chorus],effect:n.effectNames[e.effect],harm:n.harmNames[e.harm],imute:n.imuteNames[e.imute],octoff:n.octoffNames[e.octoff],ipan:n.ipanValues[e.ipan]})}}const r=[];for(const t of this.channels[i].patterns){const e=[];for(const s of t.notes){const t=[];for(const e of s.pins)t.push({tick:e.time+s.start,pitchBend:e.interval,volume:Math.round(100*e.volume/3)});e.push({pitches:s.pitches,points:t})}r.push({instrument:t.instrument+1,notes:e})}const o=[];if(t)for(let t=0;t<this.loopStart;t++)o.push(this.channels[i].bars[t]);for(let t=0;t<e;t++)for(let t=this.loopStart;t<this.loopStart+this.loopLength;t++)o.push(this.channels[i].bars[t]);if(s)for(let t=this.loopStart+this.loopLength;t<this.barCount;t++)o.push(this.channels[i].bars[t]);h.push({type:l?"drum":"pitch",octaveScrollBar:this.channels[i].octave,instruments:a,patterns:r,sequence:o})}return{format:p.R,version:p.p,theme:this.setSongTheme,scale:n.scales[this.scale].name,mix:n.mixNames[this.mix],sampleRate:n.sampleRateNames[this.sampleRate],key:n.keys[this.key].name,introBars:this.loopStart,loopBars:this.loopLength,beatsPerBar:this.beatsPerBar,ticksPerBeat:this.partsPerBeat,beatsPerMinute:this.getBeatsPerMinute(),reverb:this.reverb,blend:this.blend,riff:this.riff,detune:this.detune,muff:this.muff,channels:h}}fromJsonObject(t){if(this.initToDefault(!0),!t)return;const e=t.format;if(t.version>p.R)return;if(this.scale=11,null!=t.scale)if("BeepBox"==e){const e={"romani :)":8,"romani :(":9},s=null!=e[t.scale]?e[t.scale]:n.scales.map((t=>t.name)).indexOf(t.scale);-1!=s&&(this.scale=s)}else this.scale=n.scales.map((t=>t.name)).indexOf(t.scale);if(null!=t.theme)if("BeepBox"==e)if("Nepbox"!=t.theme&&"Laffey"!=t.theme&&"ModBox"!=t.theme){var s=["none","modbox2","artic","Cinnamon Roll","Ocean","rainbow","float","windows","grassland","dessert","kahootiest","beambit","egg","Poniryoshka","gameboy","woodkid","midnight","snedbox","unnamed","piano","halloween","frozen"],h=n.oldThemeNames.indexOf(t.theme);this.setSongTheme=s[h]}else{s=["none","nepbox","laffey"],h=["ModBox","Nepbox","Laffey"].indexOf(t.theme);this.setSongTheme=s[h]}else this.setSongTheme=t.theme;null!=t.mix&&(this.mix=n.mixNames.indexOf(t.mix),-1==this.mix&&(this.mix=1)),null!=t.sampleRate&&(this.sampleRate=n.sampleRateNames.indexOf(t.sampleRate),-1==this.sampleRate&&(this.sampleRate=2)),null!=t.key&&("BeepBox"==e?"number"==typeof t.key?this.key=n.oldKeys.length-1-(t.key+1200>>>0)%n.oldKeys.length:"string"==typeof t.key&&(this.key=n.keys.map((t=>t.name)).indexOf(t.key)):this.key=n.keys.map((t=>t.name)).indexOf(t.key)),null!=t.beatsPerMinute&&(this.tempo=t.beatsPerMinute,this.tempo=a(n.tempoMin,n.tempoMax,this.tempo)),null!=t.reverb&&(this.reverb=a(0,n.reverbRange,0|t.reverb)),null!=t.blend&&(this.blend=a(0,n.blendRange,0|t.blend)),null!=t.riff&&(this.riff=a(0,n.riffRange,0|t.riff)),null!=t.detune&&(this.detune=a(0,n.detuneRange,0|t.detune)),null!=t.muff&&(this.muff=a(0,n.muffRange,0|t.muff)),null!=t.beatsPerBar&&(this.beatsPerBar=Math.max(n.beatsPerBarMin,Math.min(n.beatsPerBarMax,0|t.beatsPerBar))),null!=t.ticksPerBeat&&(this.partsPerBeat=0|t.ticksPerBeat,-1==n.partCounts.indexOf(this.partsPerBeat)&&(this.partsPerBeat=n.partCounts[n.partCounts.length-1]));let i=1,l=1,r=1;if(t.channels)for(const e of t.channels)e.instruments&&(i=Math.max(i,0|e.instruments.length)),e.patterns&&(l=Math.max(l,0|e.patterns.length)),e.sequence&&(r=Math.max(r,0|e.sequence.length));this.instrumentsPerChannel=i,this.patternsPerChannel=l,this.barCount=r,null!=t.introBars&&(this.loopStart=a(0,this.barCount,0|t.introBars)),null!=t.loopBars&&(this.loopLength=a(1,this.barCount-this.loopStart+1,0|t.loopBars));let o=0,y=0;if(t.channels)for(let e=0;e<t.channels.length;e++){let s=t.channels[e];this.channels.length<=e&&(this.channels[e]=new d),null!=s.octaveScrollBar&&(this.channels[e].octave=a(0,5,0|s.octaveScrollBar));for(let t=this.channels[e].instruments.length;t<this.instrumentsPerChannel;t++)this.channels[e].instruments[t]=new u;this.channels[e].instruments.length=this.instrumentsPerChannel;for(let t=this.channels[e].patterns.length;t<this.patternsPerChannel;t++)this.channels[e].patterns[t]=new m;this.channels[e].patterns.length=this.patternsPerChannel;for(let t=0;t<this.barCount;t++)this.channels[e].bars[t]=1;this.channels[e].bars.length=this.barCount;let h=!1;h=s.type?"drum"==s.type:e>=3,h?y++:o++;for(let t=0;t<this.instrumentsPerChannel;t++){const i=this.channels[e].instruments[t];let l;s.instruments&&(l=s.instruments[t]),null==l&&(l={});const r={binary:0},o=l.transition||l.envelope;if(i.transition=null!=r[o]?r[o]:n.transitionNames.indexOf(o),-1==i.transition&&(i.transition=1),h)null!=l.volume?i.volume=a(0,n.volumeNames.length,Math.round(5-(0|l.volume)/20)):i.volume=0,i.wave=n.drumNames.indexOf(l.wave),-1==i.wave&&(i.wave=1),i.imute=n.imuteNames.indexOf(l.imute),-1==i.imute&&(i.imute=0),i.ipan=n.ipanValues.indexOf(l.ipan),-1==i.ipan&&(i.ipan=4);else if(i.type=n.instrumentTypeNames.indexOf(l.type),null==i.type&&(i.type=0),0==i.type){null!=l.volume?i.volume=a(0,n.volumeNames.length,Math.round(5-(0|l.volume)/20)):i.volume=0,i.wave=n.waveNames.indexOf(l.wave),-1==i.wave&&(i.wave=1);const t={"sustain sharp":1,"sustain medium":2,"sustain soft":3,"decay sharp":4};i.filter=null!=t[l.filter]?t[l.filter]:n.filterNames.indexOf(l.filter),-1==i.filter&&(i.filter=0),i.chorus=n.chorusNames.indexOf(l.chorus),-1==i.chorus&&(i.chorus=0),i.effect=n.effectNames.indexOf(l.effect),-1==i.effect&&(i.effect=0),i.harm=n.harmNames.indexOf(l.harm),-1==i.harm&&(i.harm=0),i.octoff=n.octoffNames.indexOf(l.octoff),-1==i.octoff&&(i.octoff=0),i.imute=n.imuteNames.indexOf(l.imute),-1==i.imute&&(i.imute=0),i.ipan=n.ipanValues.indexOf(l.ipan),-1==i.ipan&&(i.ipan=4)}else if(3==i.type||2==i.type){2==i.type&&(i.type=3),null!=l.volume?i.volume=a(0,n.volumeNames.length,Math.round(5-(0|l.volume)/20)):i.volume=0,i.wave=n.pwmwaveNames.indexOf(l.wave),-1==i.wave&&(i.wave=1);const t={"sustain sharp":1,"sustain medium":2,"sustain soft":3,"decay sharp":4};i.filter=null!=t[l.filter]?t[l.filter]:n.filterNames.indexOf(l.filter),-1==i.filter&&(i.filter=0),i.chorus=n.chorusNames.indexOf(l.chorus),-1==i.chorus&&(i.chorus=0),i.effect=n.effectNames.indexOf(l.effect),-1==i.effect&&(i.effect=0),i.harm=n.harmNames.indexOf(l.harm),-1==i.harm&&(i.harm=0),i.octoff=n.octoffNames.indexOf(l.octoff),-1==i.octoff&&(i.octoff=0),i.imute=n.imuteNames.indexOf(l.imute),-1==i.imute&&(i.imute=0),i.ipan=n.ipanValues.indexOf(l.ipan),-1==i.ipan&&(i.ipan=4)}else{if(1!=i.type)throw new Error("Unrecognized instrument type.");i.effect=n.effectNames.indexOf(l.effect),-1==i.effect&&(i.effect=0),i.octoff=n.octoffNames.indexOf(l.octoff),-1==i.octoff&&(i.octoff=0),i.fmChorus=n.fmChorusNames.indexOf(l.fmChorus),-1==i.fmChorus&&(i.fmChorus=0),i.algorithm=n.operatorAlgorithmNames.indexOf(l.algorithm),-1==i.algorithm&&(i.algorithm=0),i.feedbackType=n.operatorFeedbackNames.indexOf(l.feedbackType),-1==i.feedbackType&&(i.feedbackType=0),null!=l.feedbackAmplitude?i.feedbackAmplitude=a(0,n.operatorAmplitudeMax+1,0|l.feedbackAmplitude):i.feedbackAmplitude=0,i.feedbackEnvelope=n.operatorEnvelopeNames.indexOf(l.feedbackEnvelope),-1==i.feedbackEnvelope&&(i.feedbackEnvelope=0);for(let t=0;t<n.operatorCount;t++){const e=i.operators[t];let s;l.operators&&(s=l.operators[t]),null==s&&(s={}),e.frequency=n.operatorFrequencyNames.indexOf(s.frequency),-1==e.frequency&&(e.frequency=0),null!=s.amplitude?e.amplitude=a(0,n.operatorAmplitudeMax+1,0|s.amplitude):e.amplitude=0,e.envelope=n.operatorEnvelopeNames.indexOf(s.envelope),-1==e.envelope&&(e.envelope=0)}i.ipan=n.ipanValues.indexOf(l.ipan),-1==i.ipan&&(i.ipan=4),i.imute=n.imuteNames.indexOf(l.imute),-1==i.imute&&(i.imute=0)}}for(let t=0;t<this.patternsPerChannel;t++){const i=this.channels[e].patterns[t];let l;if(s.patterns&&(l=s.patterns[t]),null!=l&&(i.instrument=a(0,this.instrumentsPerChannel,(0|l.instrument)-1),l.notes&&l.notes.length>0)){const t=Math.min(this.beatsPerBar*this.partsPerBeat,l.notes.length>>>0);let e=0;for(let s=0;s<l.notes.length&&!(s>=t);s++){const t=l.notes[s];if(!(t&&t.pitches&&t.pitches.length>=1&&t.points&&t.points.length>=2))continue;const a=c(0,0,0,0);a.pitches=[],a.pins=[];for(let e=0;e<t.pitches.length;e++){const s=0|t.pitches[e];if(-1==a.pitches.indexOf(s)&&(a.pitches.push(s),a.pitches.length>=4))break}if(a.pitches.length<1)continue;let r=e,o=0;for(let e=0;e<t.points.length;e++){const s=t.points[e];if(null==s||null==s.tick)continue;const h=null==s.pitchBend?0:0|s.pitchBend,n=0|s.tick,i=null==s.volume?3:Math.max(0,Math.min(3,Math.round(3*(0|s.volume)/100)));if(!(n>this.beatsPerBar*this.partsPerBeat)){if(0==a.pins.length){if(n<r)continue;a.start=n,o=h}else if(n<=r)continue;r=n,a.pins.push(f(h-o,n-a.start,i))}}if(a.pins.length<2)continue;a.end=a.pins[a.pins.length-1].time+a.start;const u=h?n.drumCount-1:n.maxPitch;let d=u,m=0;for(let t=0;t<a.pitches.length;t++)a.pitches[t]+=o,(a.pitches[t]<0||a.pitches[t]>u)&&(a.pitches.splice(t,1),t--),a.pitches[t]<d&&(d=a.pitches[t]),a.pitches[t]>m&&(m=a.pitches[t]);if(!(a.pitches.length<1)){for(let t=0;t<a.pins.length;t++){const e=a.pins[t];e.interval+d<0&&(e.interval=-d),e.interval+m>u&&(e.interval=u-m),t>=2&&e.interval==a.pins[t-1].interval&&e.interval==a.pins[t-2].interval&&e.volume==a.pins[t-1].volume&&e.volume==a.pins[t-2].volume&&(a.pins.splice(t-1,1),t--)}i.notes.push(a),e=a.end}}}}for(let t=0;t<this.barCount;t++)this.channels[e].bars[t]=s.sequence?Math.min(this.patternsPerChannel,s.sequence[t]>>>0):0}this.pitchChannelCount=o,this.drumChannelCount=y,this.channels.length=this.getChannelCount()}getPattern(t,e){const s=this.channels[t].bars[e];return 0==s?null:this.channels[t].patterns[s-1]}getPatternInstrument(t,e){const s=this.getPattern(t,e);return null==s?0:s.instrument}getPatternInstrumentMute(t,e){const s=this.getPattern(t,e),h=this.getPatternInstrument(t,e),n=this.channels[t].instruments[h];return null==s?0:n.imute}getPatternInstrumentVolume(t,e){const s=this.getPattern(t,e),h=this.getPatternInstrument(t,e),n=this.channels[t].instruments[h];return null==s?0:n.volume}getBeatsPerMinute(){return this.tempo}getChannelFingerprint(t){const e=this.getChannelCount();let s=0;for(let h=0;h<e;h++)if(h<this.pitchChannelCount){const e=this.getPatternInstrument(h,t),n=this.channels[h].instruments[e];if(0==n.type)this.o[s++]="c";else if(1==n.type)this.o[s++]="f",this.o[s++]=n.algorithm,this.o[s++]=n.feedbackType;else{if(3!=n.type)throw new Error("Unknown instrument type.");this.o[s++]="p"}}else this.o[s++]="d";return this.o.length=s,this.o.join("")}}p.R="NepBox",p.L=2,p.P=6,p.M=1,p.p=1,p.m=110,p.v=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0],p.u=[48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95];class y{constructor(){this.sampleLeft=0,this.sampleRight=0,this.phases=[],this.phaseDeltas=[],this.volumeStarts=[],this.volumeDeltas=[],this.volumeLeft=[],this.volumeRight=[],this.phaseDeltaScale=0,this.filter=0,this.filterScale=0,this.vibratoScale=0,this.harmonyMult=0,this.harmonyVolumeMult=1,this.feedbackOutputs=[],this.feedbackMult=0,this.feedbackDelta=0,this.reset()}reset(){for(let t=0;t<n.operatorCount;t++)this.phases[t]=0,this.feedbackOutputs[t]=0;this.sampleLeft=0,this.sampleRight=0}}class g{static warmUpSynthesizer(t){if(null!=t){for(let e=0;e<t.instrumentsPerChannel;e++)for(let s=t.pitchChannelCount;s<t.pitchChannelCount+t.drumChannelCount;s++)n.getDrumWave(t.channels[s].instruments[e].wave);for(let e=0;e<t.barCount;e++)g.getGeneratedSynthesizer(t,e)}}static operatorAmplitudeCurve(t){return(Math.pow(16,t/15)-1)/15}get playing(){return this.isPlaying}get playhead(){return this.playheadInternal}set playhead(t){if(null!=this.song){this.playheadInternal=Math.max(0,Math.min(this.song.barCount,t));let e=this.playheadInternal;this.bar=Math.floor(e),e=this.song.beatsPerBar*(e-this.bar),this.beat=Math.floor(e),e=this.song.partsPerBeat*(e-this.beat),this.part=Math.floor(e),e=4*(e-this.part),this.arpeggio=Math.floor(e);const s=this.getSamplesPerArpeggio();e=s*(e-this.arpeggio),this.arpSampleCountdown=Math.floor(s-e),this.bar<this.song.loopStart&&(this.enableIntro=!0),this.bar>this.song.loopStart+this.song.loopLength&&(this.enableOutro=!0)}}get totalSamples(){if(null==this.song)return 0;const t=4*this.getSamplesPerArpeggio()*this.song.partsPerBeat*this.song.beatsPerBar;let e=this.loopCount;e<0&&(e=1);let s=this.song.loopLength*e;return this.enableIntro&&(s+=this.song.loopStart),this.enableOutro&&(s+=this.song.barCount-(this.song.loopStart+this.song.loopLength)),s*t}get totalSeconds(){return Math.round(this.totalSamples/this.samplesPerSecond)}get totalBars(){return null==this.song?0:this.song.barCount}constructor(t=null){this.samplesPerSecond=44100,this.effectDuration=.14,this.effectAngle=2*Math.PI/(this.effectDuration*this.samplesPerSecond),this.effectYMult=2*Math.cos(this.effectAngle),this.limitDecay=1/(2*this.samplesPerSecond),this.song=null,this.pianoPressed=!1,this.pianoPitch=[0],this.pianoChannel=0,this.enableIntro=!0,this.enableOutro=!1,this.loopCount=-1,this.volume=1,this.liveInputDuration=0,this.liveInputStarted=!1,this.liveInputPitches=[],this.liveInputChannel=0,this.playheadInternal=0,this.bar=0,this.beat=0,this.part=0,this.arpeggio=0,this.arpSampleCountdown=0,this.isPlaying=!1,this.liveInputEndTime=0,this.browserAutomaticallyClearsAudioBuffer=!0,this.channels=[],this.stillGoing=!1,this.effectPhase=0,this.limit=0,this.delayLineLeft=new Float32Array(16384),this.delayLineRight=new Float32Array(16384),this.delayPosLeft=0,this.delayPosRight=0,this.delayFeedback0Left=0,this.delayFeedback0Right=0,this.delayFeedback1Left=0,this.delayFeedback1Right=0,this.delayFeedback2Left=0,this.delayFeedback2Right=0,this.delayFeedback3Left=0,this.delayFeedback3Right=0,this.audioCtx=null,this.scriptNode=null,this.audioProcessCallback=t=>{const e=t.outputBuffer,s=e.getChannelData(0),h=e.getChannelData(1);if(!this.browserAutomaticallyClearsAudioBuffer||0==s[0]&&0==h[0]&&0==s[e.length-1]&&0==h[e.length-1]||(this.browserAutomaticallyClearsAudioBuffer=!1),!this.browserAutomaticallyClearsAudioBuffer){const t=e.length;for(let e=0;e<t;e++)s[e]=0,h[e]=0}!this.isPlaying&&performance.now()>=this.liveInputEndTime?this.deactivateAudio():this.synthesize(s,h,e.length,this.isPlaying)},null!=t&&this.setSong(t)}setSong(t){"string"==typeof t?this.song=new p(t):t instanceof p&&(this.song=t)}spsCalc(){return g.warmUpSynthesizer(this.song),0==this.song.sampleRate?44100:1==this.song.sampleRate?48e3:2==this.song.sampleRate?this.audioCtx.sampleRate:3==this.song.sampleRate?4*this.audioCtx.sampleRate:4==this.song.sampleRate?2*this.audioCtx.sampleRate:5==this.song.sampleRate?this.audioCtx.sampleRate/2:6==this.song.sampleRate?this.audioCtx.sampleRate/4:7==this.song.sampleRate?this.audioCtx.sampleRate/8:8==this.song.sampleRate?this.audioCtx.sampleRate/16:this.audioCtx.sampleRate}activateAudio(){null!=this.audioCtx&&null!=this.scriptNode||(null!=this.scriptNode&&this.deactivateAudio(),this.audioCtx=this.audioCtx||new(window.AudioContext||window.webkitAudioContext),this.samplesPerSecond=this.spsCalc(),this.scriptNode=this.audioCtx.createScriptProcessor?this.audioCtx.createScriptProcessor(2048,0,2):this.audioCtx.createJavaScriptNode(2048,0,2),this.scriptNode.onaudioprocess=this.audioProcessCallback,this.scriptNode.channelCountMode="explicit",this.scriptNode.channelInterpretation="speakers",this.effectAngle=2*Math.PI/(this.effectDuration*this.samplesPerSecond),this.effectYMult=2*Math.cos(this.effectAngle),this.limitDecay=1/(2*this.samplesPerSecond),this.scriptNode.connect(this.audioCtx.destination)),this.audioCtx.resume()}deactivateAudio(){null!=this.audioCtx&&null!=this.scriptNode&&(this.scriptNode.disconnect(this.audioCtx.destination),this.scriptNode=null,this.audioCtx.close&&this.audioCtx.close(),this.audioCtx=null)}maintainLiveInput(){this.activateAudio(),this.liveInputEndTime=performance.now()+1e4}play(){this.isPlaying||(this.isPlaying=!0,g.warmUpSynthesizer(this.song),this.activateAudio())}pause(){this.isPlaying&&(this.isPlaying=!1,this.deactivateAudio(),this.scriptNode=null)}snapToStart(){this.bar=0,this.enableIntro=!0,this.snapToBar()}snapToBar(t){void 0!==t&&(this.bar=t),this.playheadInternal=this.bar,this.beat=0,this.part=0,this.arpeggio=0,this.arpSampleCountdown=0,this.effectPhase=0;for(const t of this.channels)t.reset();this.delayPosLeft=0,this.delayPosRight=0,this.delayFeedback0Left=0,this.delayFeedback0Right=0,this.delayFeedback1Left=0,this.delayFeedback1Right=0,this.delayFeedback2Left=0,this.delayFeedback2Right=0,this.delayFeedback3Left=0,this.delayFeedback3Right=0;for(let t=0;t<this.delayLineLeft.length;t++)this.delayLineLeft[t]=0;for(let t=0;t<this.delayLineRight.length;t++)this.delayLineRight[t]=0}nextBar(){if(!this.song)return;const t=this.bar;this.bar++,this.enableOutro?this.bar>=this.song.barCount&&(this.bar=this.enableIntro?0:this.song.loopStart):(this.bar>=this.song.loopStart+this.song.loopLength||this.bar>=this.song.barCount)&&(this.bar=this.song.loopStart),this.playheadInternal+=this.bar-t}prevBar(){if(!this.song)return;const t=this.bar;this.bar--,this.bar<0&&(this.bar=this.song.loopStart+this.song.loopLength-1),this.bar>=this.song.barCount&&(this.bar=this.song.barCount-1),this.bar<this.song.loopStart&&(this.enableIntro=!0),!this.enableOutro&&this.bar>=this.song.loopStart+this.song.loopLength&&(this.bar=this.song.loopStart+this.song.loopLength-1),this.playheadInternal+=this.bar-t}synthesize(t,e,s,h=!0){if(null==this.song){for(let h=0;h<s;h++)t[h]=0,e[h]=0;return void this.deactivateAudio()}const n=this.song.getChannelCount();for(let t=this.channels.length;t<n;t++)this.channels[t]=new y;this.channels.length=n;const i=this.getSamplesPerArpeggio();let a=0,l=!1;for((0==this.arpSampleCountdown||this.arpSampleCountdown>i)&&(this.arpSampleCountdown=i),h&&(this.part>=this.song.partsPerBeat&&(this.beat++,this.part=0,this.arpeggio=0,this.arpSampleCountdown=i),this.beat>=this.song.beatsPerBar&&(this.bar++,this.beat=0,this.part=0,this.arpeggio=0,this.arpSampleCountdown=i,-1==this.loopCount&&(this.bar<this.song.loopStart&&!this.enableIntro&&(this.bar=this.song.loopStart),this.bar>=this.song.loopStart+this.song.loopLength&&!this.enableOutro&&(this.bar=this.song.loopStart))),this.bar>=this.song.barCount&&(this.enableOutro?(this.bar=0,this.enableIntro=!0,l=!0,this.pause()):this.bar=this.song.loopStart),this.bar>=this.song.loopStart&&(this.enableIntro=!1));;){if(l){for(;a<s;)t[a]=0,e[a]=0,a++;break}a=g.getGeneratedSynthesizer(this.song,this.bar)(this,this.song,t,e,s,a,i);if(-1==a)break;this.beat=0,this.effectPhase=0,this.bar++,this.bar<this.song.loopStart?this.enableIntro||(this.bar=this.song.loopStart):this.enableIntro=!1,this.bar>=this.song.loopStart+this.song.loopLength&&(this.loopCount>0&&this.loopCount--,(this.loopCount>0||!this.enableOutro)&&(this.bar=this.song.loopStart)),this.bar>=this.song.barCount&&(this.bar=0,this.enableIntro=!0,l=!0,this.pause())}this.playheadInternal=(((this.arpeggio+1-this.arpSampleCountdown/i)/4+this.part)/this.song.partsPerBeat+this.beat)/this.song.beatsPerBar+this.bar}static computeOperatorEnvelope(t,e,s,h){switch(n.operatorEnvelopeType[t]){case 0:return h;case 1:return 1;case 4:let i=1/(1+e*n.operatorEnvelopeSpeed[t]);return n.operatorEnvelopeInverted[t]?1-i:i;case 5:return n.operatorSpecialCustomVolume[t]?.5-.5*Math.cos(2*s*Math.PI*(4*h)):.5-.5*Math.cos(2*s*Math.PI*n.operatorEnvelopeSpeed[t]);case 2:return Math.max(1,2-10*e);case 3:if(n.operatorSpecialCustomVolume[t]){const t=.25/Math.sqrt(h);return e<t?e/t:1/(1+16*h*(e-t))}{const s=n.operatorEnvelopeSpeed[t],h=.25/Math.sqrt(s);return e<h?e/h:1/(1+(e-h)*s)}case 6:return Math.max(-1-e,-2+e);default:throw new Error("Unrecognized operator envelope type.")}}static computeChannelInstrument(t,e,s,h,i,a,l){const r=e.getChannelIsDrum(s),o=t.channels[s],f=e.getPattern(s,t.bar),c=e.channels[s].instruments[null==f?0:f.instrument],u=t.pianoPressed&&s==t.pianoChannel,d=r?n.drumBasePitches[c.wave]:n.keys[e.key].basePitch,m=r?n.drumInterval:1,p=r?n.drumWaveIsSoft[c.wave]?24:60:48,y=4*a/t.samplesPerSecond,b=1/e.partsPerBeat;o.phaseDeltaScale=0,o.filter=1,o.filterScale=1,o.vibratoScale=0,o.harmonyMult=1,o.harmonyVolumeMult=1;let v=0,P=t.arpeggio,L=t.arpSampleCountdown,M=null,R=!0,C=0,F=0,S=1,w=1,k=0,I=0,x=0,O=0,T=0,B=0;for(let t=0;t<n.operatorCount;t++)o.phaseDeltas[t]=0,o.volumeStarts[t]=0,o.volumeDeltas[t]=0,o.volumeLeft[0]=0,o.volumeRight[0]=0;if(u)M=t.pianoPitch,S=w=1,k=I=1,R=!1;else if(null!=f){let s=null,n=null,i=null;for(let t=0;t<f.notes.length;t++)if(f.notes[t].end<=h)n=f.notes[t];else if(f.notes[t].start<=h&&f.notes[t].end>h)s=f.notes[t];else if(f.notes[t].start>h){i=f.notes[t];break}if(null!=s&&null!=n&&n.end!=s.start&&(n=null),null!=s&&null!=i&&i.start!=s.end&&(i=null),null!=s){let r;for(M=s.pitches,v=h-s.start,r=1;r<s.pins.length-1&&!(s.pins[r].time+s.start>h);r++);const o=s.pins[r-1],f=s.pins[r],u=4*s.start,d=4*s.end,m=4*(s.start+o.time),p=4*(s.start+f.time),y=4*h+P,g=4*h+P+1,b=(y-m)/(p-m),A=(g-m)/(p-m);let D=o.volume+(f.volume-o.volume)*b,E=o.volume+(f.volume-o.volume)*A,W=1,N=1,$=o.interval+(f.interval-o.interval)*b,H=o.interval+(f.interval-o.interval)*A,V=o.time+(f.time-o.time)*b,U=o.time+(f.time-o.time)*A,Y=V,z=U;const K=1-(L+l)/a,j=1-L/a;R=y+K-u==0;const q=c.transition;y==u&&(0==q?R=!1:2==q?W=0:3==q?null==n||0==n.pins[n.pins.length-1].volume||0==s.pins[0].volume?W=0:($=.5*(n.pitches[0]+n.pins[n.pins.length-1].interval-s.pitches[0]),Y=.5*n.pins[n.pins.length-1].time,R=!1):4==q?N=0:5==q?$=100:6==q?$=-1:7==q&&(W=6)),g==d&&(0==q?null==i&&s.start+f.time!=e.partsPerBeat*e.beatsPerBar&&(N=0):1==q||2==q?N=0:3==q&&(null==i||0==s.pins[s.pins.length-1].volume||0==i.pins[0].volume?N=0:(H=.5*(i.pitches[0]-s.pitches[0]+s.pins[s.pins.length-1].interval),z*=.5))),C=$+(H-$)*K,F=$+(H-$)*j,k=t.volumeConversion(D+(E-D)*K),I=t.volumeConversion(D+(E-D)*j),S=W+(N-W)*K,w=W+(N-W)*j,x=s.start+V+(U-V)*K,O=s.start+V+(U-V)*j,T=Y+(z-Y)*K,B=Y+(z-Y)*j}}if(null!=M){if(r||1!=c.type){let s=M[0];if(r)0==n.harmNames[c.harm]?1==M.length?s=M[0]+n.octoffValues[c.octoff]:2==M.length?s=M[P>>1]+n.octoffValues[c.octoff]:3==M.length?s=M[3==P?1:P]+n.octoffValues[c.octoff]:4==M.length&&(s=M[P]+n.octoffValues[c.octoff]):1==n.harmNames[c.harm]?1==M.length?s=M[0]+n.octoffValues[c.octoff]:2==M.length?s=(M[1]+M[0])/2+n.octoffValues[c.octoff]:3==M.length?s=(M[1+(P>>1)]+M[0])/2+n.octoffValues[c.octoff]:4==M.length&&(s=(M[(3==P?1:P)+1]+M[0])/2+n.octoffValues[c.octoff]):2==n.harmNames[c.harm]?1==M.length?s=M[0]+n.octoffValues[c.octoff]:2==M.length?s=(M[1]+M[0])/2+n.octoffValues[c.octoff]:3==M.length?s=(M[2]+M[0])/2+n.octoffValues[c.octoff]:4==M.length&&(s=(M[(3==P?2:P)+1]+M[0])/2+n.octoffValues[c.octoff]):3==n.harmNames[c.harm]?1==M.length?s=M[0]+n.octoffValues[c.octoff]:2==M.length?s=(M[1]+M[0])/2+n.octoffValues[c.octoff]:3==M.length?s=(M[2]+M[0])/2+n.octoffValues[c.octoff]:4==M.length&&(s=(M[3]+M[0])/2+n.octoffValues[c.octoff]):4==n.harmNames[c.harm]&&(1==M.length?s=M[0]+n.octoffValues[c.octoff]:2==M.length?s=(M[1]+M[0])/2+n.octoffValues[c.octoff]:3==M.length?s=(M[1+(P>>1)]+M[0])/2+n.octoffValues[c.octoff]:4==M.length&&(s=M[2+(P>>1)]+M[0]+n.octoffValues[c.octoff]));else if(1==n.harmNames[c.harm]){let t=0;2==M.length?t=M[1]-M[0]:3==M.length?t=M[1+(P>>1)]-M[0]:4==M.length&&(t=M[(3==P?1:P)+1]-M[0]),o.harmonyMult=Math.pow(2,t/12),o.harmonyVolumeMult=Math.pow(2,-t/p)}else if(2==n.harmNames[c.harm]){let t=0;2==M.length?t=M[1]-M[0]:3==M.length?t=M[2]-M[0]:4==M.length&&(t=M[(3==P?2:P)+1]-M[0]),o.harmonyMult=Math.pow(2,t/12),o.harmonyVolumeMult=Math.pow(2,-t/p)}else if(3==n.harmNames[c.harm]){let t=0;2==M.length?t=M[1]-M[0]:3==M.length?t=M[2]-M[0]:4==M.length&&(t=M[3]-M[0]),o.harmonyMult=Math.pow(2,t/12),o.harmonyVolumeMult=Math.pow(2,-t/p)}else if(4==n.harmNames[c.harm]){let t=0;2==M.length?t=M[1]-M[0]:3==M.length?t=M[1+(P>>1)]-M[0]:4==M.length&&(t=M[2+(P>>1)]-M[0]),o.harmonyMult=Math.pow(2,t/12),o.harmonyVolumeMult=Math.pow(2,-t/p)}else if(5==n.harmNames[c.harm]){let t=0;2==M.length?t=M[1]-M[0]:3==M.length?t=M[2]-M[0]:4==M.length&&(t=M[3==P?2:P]-M[0]),o.harmonyMult=Math.pow(2,t/12),o.harmonyVolumeMult=Math.pow(2,-t/p)}else 0==n.harmNames[c.harm]&&(2==M.length?s=M[P>>1]:3==M.length?s=M[3==P?1:P]:4==M.length&&(s=M[P]));const h=(s+C)*m,a=(s+F)*m,f=t.frequencyFromPitch(d+h),u=Math.pow(2,-h/p),g=Math.pow(2,-a/p);let b;if(r&&n.drumWaveIsSoft[c.wave]&&(o.filter=Math.min(1,f*i*n.drumPitchFilterMult[c.wave])),r)b=0==e.mix?.19*n.drumVolumes[c.wave]:3==e.mix?.12*n.drumVolumes[c.wave]:.09*n.drumVolumes[c.wave];else{const t=n.filterDecays[c.filter];o.filter=Math.pow(2,-t*y*T);const e=Math.pow(2,-t*y*B);o.filterScale=Math.pow(e/o.filter,1/l),b=.135*n.waveVolumes[c.wave]*n.filterVolumes[c.filter]*n.chorusVolumes[c.chorus]}R&&!r&&o.reset(),o.phaseDeltas[0]=f*i;let v=0;v=2==e.mix?9==c.volume?0:Math.pow(3,-n.volumeValues[c.volume])*n.imuteValues[c.imute]:1==e.mix?c.volume>=5?0:Math.pow(3,-n.volumeMValues[c.volume])*n.imuteValues[c.imute]:c.volume>=5?0:Math.pow(2,-n.volumeMValues[c.volume])*n.imuteValues[c.imute],o.volumeStarts[0]=S*k*u*b*v;const L=w*I*g*b*v;o.volumeDeltas[0]=(L-o.volumeStarts[0])/l,o.volumeLeft[0]=Math.min(1,1+n.ipanValues[c.ipan]),o.volumeRight[0]=Math.min(1,1-n.ipanValues[c.ipan])}else{let s=1,h=0;const a=n.operatorCarrierCounts[c.algorithm];for(let r=0;r<n.operatorCount;r++){const f=r<n.operatorCarrierCounts[c.algorithm],u=n.operatorAssociatedCarrier[c.algorithm][r]-1,v=M[r<M.length?r:u<M.length?u:0]+n.octoffValues[c.octoff]+e.detune/24,P=n.operatorFrequencies[c.operators[r].frequency],L=(v+C)*m+n.operatorCarrierChorus[n.fmChorusNames[c.fmChorus]][u],A=P*t.frequencyFromPitch(d+L)+n.operatorHzOffsets[c.operators[r].frequency];o.phaseDeltas[r]=A*i*n.sineWaveLength,R&&o.reset();const D=g.operatorAmplitudeCurve(c.operators[r].amplitude);let E=0;-1!=n.volumeValues[c.volume]&&2==e.mix||-1!=n.volumeMValues[c.volume]&&2!=e.mix?E=2==e.mix?f?D*n.operatorAmplitudeSigns[c.operators[r].frequency]*(1-n.volumeValues[c.volume]/2.3):D*n.operatorAmplitudeSigns[c.operators[r].frequency]:D*n.operatorAmplitudeSigns[c.operators[r].frequency]*(1-n.volumeMValues[c.volume]/2.3):(-1!=n.volumeValues[c.volume]||-1!=n.volumeMValues[c.volume])&&(E=0);let W=E*n.imuteValues[c.imute],N=E*n.imuteValues[c.imute];if(o.volumeLeft[0]=Math.min(1,1+n.ipanValues[c.ipan]),o.volumeRight[0]=Math.min(1,1-n.ipanValues[c.ipan]),r<a){const t=.03,s=(v+F)*m;let n=0,i=0;3==e.mix?(n=Math.pow(5,-L/p),i=Math.pow(5,-s/p)):(n=Math.pow(2,-L/p),i=Math.pow(2,-s/p)),W*=n*t*S,N*=i*t*w,h+=D}else W*=1.5*n.sineWaveLength,N*=1.5*n.sineWaveLength,s*=1-Math.min(1,c.operators[r].amplitude/15);const $=c.operators[r].envelope;W*=g.computeOperatorEnvelope($,y*T,b*x,k),N*=g.computeOperatorEnvelope($,y*B,b*O,I),o.volumeStarts[r]=W,o.volumeDeltas[r]=(N-W)/l}const r=.3*n.sineWaveLength*c.feedbackAmplitude/15;let f=r*g.computeOperatorEnvelope(c.feedbackEnvelope,y*T,b*x,k),u=r*g.computeOperatorEnvelope(c.feedbackEnvelope,y*B,b*O,I);o.feedbackMult=f,o.feedbackDelta=(u-o.feedbackMult)/l,s*=1-c.feedbackAmplitude/15,s*=1-Math.min(1,Math.max(0,h-1)/2);for(let t=0;t<a;t++)o.volumeStarts[t]*=1+3*s,o.volumeDeltas[t]*=1+3*s}o.phaseDeltaScale=Math.pow(2,(F-C)*m/12/l),o.vibratoScale=v<n.effectVibratoDelays[c.effect]?0:Math.pow(2,n.effectVibratos[c.effect]/12)-1}else{o.reset();for(let t=0;t<n.operatorCount;t++)o.phaseDeltas[0]=0,o.volumeStarts[0]=0,o.volumeDeltas[0]=0,o.volumeLeft[0]=0,o.volumeRight[0]=0}}static getGeneratedSynthesizer(t,e){const s=t.getChannelFingerprint(e);if(null==g.generatedSynthesizers[s]){const h=[],i=[];for(let s=0;s<t.pitchChannelCount;s++)i[s]=t.channels[s].instruments[t.getPatternInstrument(s,e)];for(const e of g.synthSourceTemplate)if(-1!=e.indexOf("#"))if(-1!=e.indexOf("// PITCH"))for(let s=0;s<t.pitchChannelCount;s++)h.push(e.replace(/#/g,s+""));else if(-1!=e.indexOf("// JCHIP"))for(let s=0;s<t.pitchChannelCount;s++)0==i[s].type&&h.push(e.replace(/#/g,s+""));else if(-1!=e.indexOf("// CHIP"))for(let s=0;s<t.pitchChannelCount;s++)(0==i[s].type||3==i[s].type)&&h.push(e.replace(/#/g,s+""));else if(-1!=e.indexOf("// FM")){for(let s=0;s<t.pitchChannelCount;s++)if(1==i[s].type)if(-1!=e.indexOf("$"))for(let t=0;t<n.operatorCount;t++)h.push(e.replace(/#/g,s+"").replace(/\$/g,t+""));else h.push(e.replace(/#/g,s+""))}else if(-1!=e.indexOf("// PWM"))for(let s=0;s<t.pitchChannelCount;s++)3==i[s].type&&h.push(e.replace(/#/g,s+""));else if(-1!=e.indexOf("// CARRIER OUTPUTS")){for(let s=0;s<t.pitchChannelCount;s++)if(1==i[s].type){const t=[];for(let e=0;e<n.operatorCarrierCounts[i[s].algorithm];e++)t.push("channel"+s+"Operator"+e+"Scaled");h.push(e.replace(/#/g,s+"").replace("/*channel"+s+"Operator$Scaled*/",t.join(" + ")))}}else if(-1!=e.indexOf("// NOISE"))for(let s=t.pitchChannelCount;s<t.pitchChannelCount+t.drumChannelCount;s++)h.push(e.replace(/#/g,s+""));else{if(-1==e.indexOf("// ALL"))throw new Error("Missing channel type annotation for line: "+e);for(let s=0;s<t.pitchChannelCount+t.drumChannelCount;s++)h.push(e.replace(/#/g,s+""))}else if(-1!=e.indexOf("// INSERT OPERATOR COMPUTATION HERE")){for(let e=n.operatorCount-1;e>=0;e--)for(const s of g.operatorSourceTemplate)for(let a=0;a<t.pitchChannelCount;a++)if(1==i[a].type)if(-1!=s.indexOf("/* + channel#Operator@Scaled*/")){let t="";for(const s of n.operatorModulatedBy[i[a].algorithm][e])t+=" + channel"+a+"Operator"+(s-1)+"Scaled";const l=n.operatorFeedbackIndices[i[a].feedbackType][e];if(l.length>0){t+=" + channel"+a+"FeedbackMult * (";const e=[];for(const t of l)e.push("channel"+a+"Operator"+(t-1)+"Output");t+=e.join(" + ")+")"}h.push(s.replace(/#/g,a+"").replace(/\$/g,e+"").replace("/* + channel"+a+"Operator@Scaled*/",t))}else h.push(s.replace(/#/g,a+"").replace(/\$/g,e+""))}else h.push(e);g.generatedSynthesizers[s]=new Function("synth","song","dataLeft","dataRight","bufferLength","bufferIndex","samplesPerTick",h.join("\n"))}return g.generatedSynthesizers[s]}frequencyFromPitch(t){return 440*Math.pow(2,(t-69)/12)}volumeConversion(t){return Math.pow(t/3,1.5)}getSamplesPerArpeggio(){if(null==this.song)return 0;const t=4*(this.song.getBeatsPerMinute()/60*this.song.partsPerBeat);return Math.floor(this.samplesPerSecond/t)}}return g.negativePhaseGuard=1e3,g.generatedSynthesizers={},g.synthSourceTemplate=("\n\t\t\tvar sampleTime = 1.0 / synth.samplesPerSecond;\n\t\t\tvar effectYMult = +synth.effectYMult;\n\t\t\tvar limitDecay = +synth.limitDecay;\n\t\t\tvar volume = +synth.volume;\n\t\t\tvar delayLineLeft = synth.delayLineLeft;\n\t\t\tvar delayLineRight = synth.delayLineRight;\n\t\t\tvar reverb = Math.pow(song.reverb / beepbox.Config.reverbRange, 0.667) * 0.425;\n\t\t\tvar blend = Math.pow(song.blend / beepbox.Config.blendRange, 0.667) * 0.425;\n\t\t\tvar mix = song.mix;\n\t\t\tvar muff = Math.pow(song.muff / beepbox.Config.muffRange, 0.667) * 0.425;\n\t\t\tvar detune = song.detune;\n\t\t\tvar riff = Math.pow(song.riff / beepbox.Config.riffRange, 0.667) * 0.425; \n\t\t\tvar sineWave = beepbox.Config.sineWave;\n\t\t\t\n\t\t\t// Initialize instruments based on current pattern.\n\t\t\tvar instrumentChannel# = song.getPatternInstrument(#, synth.bar); // ALL\n\t\t\tvar instrument# = song.channels[#].instruments[instrumentChannel#]; // ALL\n\t\t\tvar channel#Wave = (mix <= 1) ? beepbox.Config.waves[instrument#.wave] : beepbox.Config.wavesMixC[instrument#.wave]; // CHIP\n\t\t\tvar channel#Wave = beepbox.Config.getDrumWave(instrument#.wave); // NOISE\n\t\t\tvar channel#WaveLength = channel#Wave.length; // CHIP\n\t\t\tvar channel#Wave = beepbox.Config.pwmwaves[instrument#.wave]; // PWM\n\t\t\tvar channel#WaveLength = channel#Wave.length; // PWM\n\t\t\tvar channel#FilterBase = (song.mix == 2) ? Math.pow(2 - (blend * 2) + (muff * 2), -beepbox.Config.filterBases[instrument#.filter]) : Math.pow(2, -beepbox.Config.filterBases[instrument#.filter] + (blend * 4) - (muff * 4)); // CHIP\n\t\t\tvar channel#TremoloScale = beepbox.Config.effectTremolos[instrument#.effect]; // PITCH\n\t\t\t\n\t\t\twhile (bufferIndex < bufferLength) {\n\t\t\t\t\n\t\t\t\tvar samples;\n\t\t\t\tvar samplesLeftInBuffer = bufferLength - bufferIndex;\n\t\t\t\tif (synth.arpSampleCountdown <= samplesLeftInBuffer) {\n\t\t\t\t\tsamples = synth.arpSampleCountdown;\n\t\t\t\t} else {\n\t\t\t\t\tsamples = samplesLeftInBuffer;\n\t\t\t\t}\n\t\t\t\tsynth.arpSampleCountdown -= samples;\n\t\t\t\t\n\t\t\t\tvar time = synth.part + synth.beat * song.partsPerBeat;\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.computeChannelInstrument(synth, song, #, time, sampleTime, samplesPerTick, samples); // ALL\n\t\t\t\tvar synthChannel# = synth.channels[#]; // ALL\n\t\t\t\t\n\t\t\t\tvar channel#ChorusA = Math.pow(2.0, (beepbox.Config.chorusOffsets[instrument#.chorus] + beepbox.Config.chorusIntervals[instrument#.chorus] + beepbox.Config.octoffValues[instrument#.octoff] + (detune / 24) * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1)) / 12.0); // CHIP\n\t\t\t\tvar channel#ChorusB = Math.pow(2.0, (beepbox.Config.chorusOffsets[instrument#.chorus] - beepbox.Config.chorusIntervals[instrument#.chorus] + beepbox.Config.octoffValues[instrument#.octoff] + (detune / 24) * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1)) / 12.0); // CHIP\n\t\t\t\tvar channel#ChorusSign = synthChannel#.harmonyVolumeMult * (beepbox.Config.chorusSigns[instrument#.chorus]); // CHIP\n\t\t\t\tchannel#ChorusB *= synthChannel#.harmonyMult; // CHIP\n\t\t\t\tvar channel#ChorusDeltaRatio = channel#ChorusB / channel#ChorusA * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1); // CHIP\n\t\t\t\t\n\t\t\t\tvar channel#PhaseDelta = synthChannel#.phaseDeltas[0] * channel#ChorusA * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1); // CHIP\n\t\t\t\tvar channel#PhaseDelta = synthChannel#.phaseDeltas[0] / 32768.0; // NOISE\n\t\t\t\tvar channel#PhaseDeltaScale = synthChannel#.phaseDeltaScale; // ALL\n\t\t\t\tvar channel#Volume = synthChannel#.volumeStarts[0]; // CHIP\n\t\t\t\tvar channel#Volume = synthChannel#.volumeStarts[0]; // NOISE\n\t\t\t\tvar channel#VolumeLeft = synthChannel#.volumeLeft[0]; // ALL\n\t\t\t\tvar channel#VolumeRight = synthChannel#.volumeRight[0]; // ALL\n\t\t\t\tvar channel#VolumeDelta = synthChannel#.volumeDeltas[0]; // CHIP\n\t\t\t\tvar channel#VolumeDelta = synthChannel#.volumeDeltas[0]; // NOISE\n\t\t\t\tvar channel#Filter = synthChannel#.filter * channel#FilterBase; // CHIP\n\t\t\t\tvar channel#Filter = synthChannel#.filter; // NOISE\n\t\t\t\tvar channel#FilterScale = synthChannel#.filterScale; // CHIP\n\t\t\t\tvar channel#VibratoScale = synthChannel#.vibratoScale; // PITCH\n\t\t\t\t\n\t\t\t\tvar effectY     = Math.sin(synth.effectPhase);\n\t\t\t\tvar prevEffectY = Math.sin(synth.effectPhase - synth.effectAngle);\n\t\t\t\t\n\t\t\t\tvar channel#PhaseA = synth.channels[#].phases[0] % 1; // CHIP\n\t\t\t\tvar channel#PhaseB = synth.channels[#].phases[1] % 1; // CHIP\n\t\t\t\tvar channel#Phase  = synth.channels[#].phases[0] % 1; // NOISE\n\t\t\t\t\n\t\t\t\tvar channel#Operator$Phase       = ((synth.channels[#].phases[$] % 1) + "+g.negativePhaseGuard+") * "+n.sineWaveLength+"; // FM\n\t\t\t\tvar channel#Operator$PhaseDelta  = synthChannel#.phaseDeltas[$]; // FM\n\t\t\t\tvar channel#Operator$OutputMult  = synthChannel#.volumeStarts[$]; // FM\n\t\t\t\tvar channel#Operator$OutputDelta = synthChannel#.volumeDeltas[$]; // FM\n\t\t\t\tvar channel#Operator$Output      = synthChannel#.feedbackOutputs[$]; // FM\n\t\t\t\tvar channel#FeedbackMult         = synthChannel#.feedbackMult; // FM\n\t\t\t\tvar channel#FeedbackDelta        = synthChannel#.feedbackDelta; // FM\n\t\t\t\t\n\t\t\t\tvar channel#SampleLeft = +synth.channels[#].sampleLeft; // ALL\n\t\t\t\tvar channel#SampleRight = +synth.channels[#].sampleRight; // ALL\n\t\t\t\t\n\t\t\t\tvar delayPosLeft = 0|synth.delayPosLeft;\n\t\t\t\tvar delayFeedback0Left = +synth.delayFeedback0Left;\n\t\t\t\tvar delayFeedback1Left = +synth.delayFeedback1Left;\n\t\t\t\tvar delayFeedback2Left = +synth.delayFeedback2Left;\n\t\t\t\tvar delayFeedback3Left = +synth.delayFeedback3Left;\n\t\t\t\tvar delayPosRight = 0|synth.delayPosRight;\n\t\t\t\tvar delayFeedback0Right = +synth.delayFeedback0Right;\n\t\t\t\tvar delayFeedback1Right = +synth.delayFeedback1Right;\n\t\t\t\tvar delayFeedback2Right = +synth.delayFeedback2Right;\n\t\t\t\tvar delayFeedback3Right = +synth.delayFeedback3Right;\n\t\t\t\tvar limit = +synth.limit;\n\t\t\t\t\n\t\t\t\twhile (samples) {\n\t\t\t\t\tvar channel#Vibrato = 1.0 + channel#VibratoScale * effectY; // PITCH\n\t\t\t\t\tvar channel#Tremolo = 1.0 + channel#TremoloScale * (effectY - 1.0); // PITCH\n\t\t\t\t\tvar temp = effectY;\n\t\t\t\t\teffectY = effectYMult * effectY - prevEffectY;\n\t\t\t\t\tprevEffectY = temp;\n\t\t\t\t\t\n\t\t\t\t\tchannel#SampleLeft += ((channel#Wave[0|(channel#PhaseA * channel#WaveLength)] + channel#Wave[0|(channel#PhaseB * channel#WaveLength)] * channel#ChorusSign) * channel#Volume * channel#Tremolo - channel#SampleLeft) * channel#Filter * channel#VolumeLeft; // CHIP \n\t\t\t\t\tchannel#SampleLeft += (channel#Wave[0|(channel#Phase * 32768.0)] * channel#Volume - channel#SampleLeft) * channel#Filter * channel#VolumeLeft; // NOISE\n\t\t\t\t\tchannel#SampleRight += ((channel#Wave[0|(channel#PhaseA * channel#WaveLength)] + channel#Wave[0|(channel#PhaseB * channel#WaveLength)] * channel#ChorusSign) * channel#Volume * channel#Tremolo - channel#SampleRight) * channel#Filter * channel#VolumeRight; // CHIP \n\t\t\t\t\tchannel#SampleRight += (channel#Wave[0|(channel#Phase * 32768.0)] * channel#Volume - channel#SampleRight) * channel#Filter * channel#VolumeRight; // NOISE\n\t\t\t\t\tchannel#Volume += channel#VolumeDelta; // CHIP\n\t\t\t\t\tchannel#Volume += channel#VolumeDelta; // NOISE\n\t\t\t\t\tchannel#PhaseA += channel#PhaseDelta * channel#Vibrato; // CHIP\n\t\t\t\t\tchannel#PhaseB += channel#PhaseDelta * channel#Vibrato * channel#ChorusDeltaRatio; // CHIP\n\t\t\t\t\tchannel#Phase += channel#PhaseDelta; // NOISE\n\t\t\t\t\tchannel#Filter *= channel#FilterScale; // CHIP\n\t\t\t\t\tchannel#PhaseA -= 0|channel#PhaseA; // CHIP\n\t\t\t\t\tchannel#PhaseB -= 0|channel#PhaseB; // CHIP\n\t\t\t\t\tchannel#Phase -= 0|channel#Phase; // NOISE\n\t\t\t\t\tchannel#PhaseDelta *= channel#PhaseDeltaScale; // CHIP\n\t\t\t\t\tchannel#PhaseDelta *= channel#PhaseDeltaScale; // NOISE\n\t\t\t\t\t\n\t\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\t\tchannel#SampleLeft = channel#Tremolo * (/*channel#Operator$Scaled*/) * channel#VolumeLeft; // CARRIER OUTPUTS\n\t\t\t\t\tchannel#SampleRight = channel#Tremolo * (/*channel#Operator$Scaled*/) * channel#VolumeRight; // CARRIER OUTPUTS\n\t\t\t\t\tchannel#FeedbackMult += channel#FeedbackDelta; // FM\n\t\t\t\t\tchannel#Operator$OutputMult += channel#Operator$OutputDelta; // FM\n\t\t\t\t\tchannel#Operator$Phase += channel#Operator$PhaseDelta * channel#Vibrato; // FM\n\t\t\t\t\tchannel#Operator$PhaseDelta *= channel#PhaseDeltaScale; // FM\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tvar delayPos1Left = (delayPosLeft +  3041) & 0x3FFF;\n\t\t\t\t\tvar delayPos2Left = (delayPosLeft +  6426) & 0x3FFF;\n\t\t\t\t\tvar delayPos3Left = (delayPosLeft + 10907) & 0x3FFF;\n\t\t\t\t\tvar delaySampleLeft0 = (delayLineLeft[delayPosLeft]\n\t\t\t\t\t\t+ channel#SampleLeft // PITCH\n\t\t\t\t\t);\n\t\t\t\t\tvar delayPos1Right = (delayPosRight +  3041) & 0x3FFF;\n\t\t\t\t\tvar delayPos2Right = (delayPosRight +  6426) & 0x3FFF;\n\t\t\t\t\tvar delayPos3Right = (delayPosRight + 10907) & 0x3FFF;\n\t\t\t\t\tvar delaySampleRight0 = (delayLineRight[delayPosRight]\n\t\t\t\t\t\t+ channel#SampleRight // PITCH\n\t\t\t\t\t);\n\t\t\t\t\tvar delaySampleLeft1 = delayLineLeft[delayPos1Left];\n\t\t\t\t\tvar delaySampleLeft2 = delayLineLeft[delayPos2Left];\n\t\t\t\t\tvar delaySampleLeft3 = delayLineLeft[delayPos3Left];\n\t\t\t\t\tvar delayTemp0Left = -delaySampleLeft0 + delaySampleLeft1;\n\t\t\t\t\tvar delayTemp1Left = -delaySampleLeft0 - delaySampleLeft1;\n\t\t\t\t\tvar delayTemp2Left = -delaySampleLeft2 + delaySampleLeft3;\n\t\t\t\t\tvar delayTemp3Left = -delaySampleLeft2 - delaySampleLeft3;\n\t\t\t\t\tdelayFeedback0Left += ((delayTemp0Left + delayTemp2Left) * reverb - delayFeedback0Left) * 0.5;\n\t\t\t\t\tdelayFeedback1Left += ((delayTemp1Left + delayTemp3Left) * reverb - delayFeedback1Left) * 0.5;\n\t\t\t\t\tdelayFeedback2Left += ((delayTemp0Left - delayTemp2Left) * reverb - delayFeedback2Left) * 0.5;\n\t\t\t\t\tdelayFeedback3Left += ((delayTemp1Left - delayTemp3Left) * reverb - delayFeedback3Left) * 0.5;\n\t\t\t\t\tdelayLineLeft[delayPos1Left] = delayFeedback0Left;\n\t\t\t\t\tdelayLineLeft[delayPos2Left] = delayFeedback1Left;\n\t\t\t\t\tdelayLineLeft[delayPos3Left] = delayFeedback2Left;\n\t\t\t\t\tdelayLineLeft[delayPosLeft ] = delayFeedback3Left;\n\t\t\t\t\tdelayPosLeft = (delayPosLeft + 1) & 0x3FFF;\n\t\t\t\t\t\n\t\t\t\t\tvar delaySampleRight1 = delayLineRight[delayPos1Right];\n\t\t\t\t\tvar delaySampleRight2 = delayLineRight[delayPos2Right];\n\t\t\t\t\tvar delaySampleRight3 = delayLineRight[delayPos3Right];\n\t\t\t\t\tvar delayTemp0Right = -delaySampleRight0 + delaySampleRight1;\n\t\t\t\t\tvar delayTemp1Right = -delaySampleRight0 - delaySampleRight1;\n\t\t\t\t\tvar delayTemp2Right = -delaySampleRight2 + delaySampleRight3;\n\t\t\t\t\tvar delayTemp3Right = -delaySampleRight2 - delaySampleRight3;\n\t\t\t\t\tdelayFeedback0Right += ((delayTemp0Right + delayTemp2Right) * reverb - delayFeedback0Right) * 0.5;\n\t\t\t\t\tdelayFeedback1Right += ((delayTemp1Right + delayTemp3Right) * reverb - delayFeedback1Right) * 0.5;\n\t\t\t\t\tdelayFeedback2Right += ((delayTemp0Right - delayTemp2Right) * reverb - delayFeedback2Right) * 0.5;\n\t\t\t\t\tdelayFeedback3Right += ((delayTemp1Right - delayTemp3Right) * reverb - delayFeedback3Right) * 0.5;\n\t\t\t\t\tdelayLineRight[delayPos1Right] = delayFeedback0Right;\n\t\t\t\t\tdelayLineRight[delayPos2Right] = delayFeedback1Right;\n\t\t\t\t\tdelayLineRight[delayPos3Right] = delayFeedback2Right;\n\t\t\t\t\tdelayLineRight[delayPosRight ] = delayFeedback3Right;\n\t\t\t\t\tdelayPosRight = (delayPosRight + 1) & 0x3FFF;\n\t\t\t\t\t\n\t\t\t\t\tvar sampleLeft = delaySampleLeft0 + delaySampleLeft1 + delaySampleLeft2 + delaySampleLeft3\n\t\t\t\t\t\t+ channel#SampleLeft // NOISE\n\t\t\t\t\t;\n\t\t\t\t\t\n\t\t\t\t\tvar sampleRight = delaySampleRight0 + delaySampleRight1 + delaySampleRight2 + delaySampleRight3\n\t\t\t\t\t\t+ channel#SampleRight // NOISE\n\t\t\t\t\t;\n\t\t\t\t\t\n\t\t\t\t\tvar abs = sampleLeft < 0.0 ? -sampleLeft : sampleLeft;\n\t\t\t\t\tlimit -= limitDecay;\n\t\t\t\t\tif (limit < abs) limit = abs;\n\t\t\t\t\tsampleLeft /= limit * 0.75 + 0.25;\n\t\t\t\t\tsampleLeft *= volume;\n\t\t\t\t\tsampleLeft = sampleLeft;\n\t\t\t\t\tdataLeft[bufferIndex] = sampleLeft;\n\t\t\t\t\tsampleRight /= limit * 0.75 + 0.25;\n\t\t\t\t\tsampleRight *= volume;\n\t\t\t\t\tsampleRight = sampleRight;\n\t\t\t\t\tdataRight[bufferIndex] = sampleRight;\n\t\t\t\t\tbufferIndex++;\n\t\t\t\t\tsamples--;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsynthChannel#.phases[0] = channel#PhaseA; // CHIP\n\t\t\t\tsynthChannel#.phases[1] = channel#PhaseB; // CHIP\n\t\t\t\tsynthChannel#.phases[0] = channel#Phase; // NOISE\n\t\t\t\tsynthChannel#.phases[$] = channel#Operator$Phase / "+n.sineWaveLength+"; // FM\n\t\t\t\tsynthChannel#.feedbackOutputs[$] = channel#Operator$Output; // FM\n\t\t\t\tsynthChannel#.sampleLeft = channel#SampleLeft; // ALL\n\t\t\t\tsynthChannel#.sampleRight = channel#SampleRight; // ALL\n\t\t\t\t\n\t\t\t\tsynth.delayPosLeft = delayPosLeft;\n\t\t\t\tsynth.delayFeedback0Left = delayFeedback0Left;\n\t\t\t\tsynth.delayFeedback1Left = delayFeedback1Left;\n\t\t\t\tsynth.delayFeedback2Left = delayFeedback2Left;\n\t\t\t\tsynth.delayFeedback3Left = delayFeedback3Left;\n\t\t\t\tsynth.delayPosRight = delayPosRight;\n\t\t\t\tsynth.delayFeedback0Right = delayFeedback0Right;\n\t\t\t\tsynth.delayFeedback1Right = delayFeedback1Right;\n\t\t\t\tsynth.delayFeedback2Right = delayFeedback2Right;\n\t\t\t\tsynth.delayFeedback3Right = delayFeedback3Right;\n\t\t\t\tsynth.limit = limit;\n\t\t\t\t\n\t\t\t\tif (effectYMult * effectY - prevEffectY > prevEffectY) {\n\t\t\t\t\tsynth.effectPhase = Math.asin(effectY);\n\t\t\t\t} else {\n\t\t\t\t\tsynth.effectPhase = Math.PI - Math.asin(effectY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (synth.arpSampleCountdown == 0) {\n\t\t\t\t\tsynth.arpeggio++;\n\t\t\t\t\tsynth.arpSampleCountdown = samplesPerTick;\n\t\t\t\t\tif (synth.arpeggio == 4) {\n\t\t\t\t\t\tsynth.arpeggio = 0;\n\t\t\t\t\t\tsynth.part++;\n\t\t\t\t\t\tif (synth.part == song.partsPerBeat) {\n\t\t\t\t\t\t\tsynth.part = 0;\n\t\t\t\t\t\t\tsynth.beat++;\n\t\t\t\t\t\t\tif (synth.beat == song.beatsPerBar) {\n\t\t\t\t\t\t\t\t// The bar ended, may need to regenerate synthesizer.\n\t\t\t\t\t\t\t\treturn bufferIndex;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Indicate that the buffer is finished generating.\n\t\t\treturn -1;\n\t\t").split("\n"),g.operatorSourceTemplate=("\n\t\t\t\t\t\tvar channel#Operator$PhaseMix = channel#Operator$Phase/* + channel#Operator@Scaled*/;\n\t\t\t\t\t\tvar channel#Operator$PhaseInt = channel#Operator$PhaseMix|0;\n\t\t\t\t\t\tvar channel#Operator$Index    = channel#Operator$PhaseInt & "+n.sineWaveMask+";\n\t\t\t\t\t\tvar channel#Operator$Sample   = sineWave[channel#Operator$Index];\n\t\t\t\t\t\tchannel#Operator$Output       = channel#Operator$Sample + (sineWave[channel#Operator$Index + 1] - channel#Operator$Sample) * (channel#Operator$PhaseMix - channel#Operator$PhaseInt);\n\t\t\t\t\t\tvar channel#Operator$Scaled   = channel#Operator$OutputMult * channel#Operator$Output;\n\t\t").split("\n"),t.Synth=g,t.Tone=class{constructor(){this.pitches=[0,0,0,0],this.pitchCount=0,this.chordSize=0,this.drumsetPitch=0,this.note=null,this.prevNote=null,this.nextNote=null,this.prevNotePitchIndex=0,this.nextNotePitchIndex=0,this.active=!1,this.noteStart=0,this.noteEnd=0,this.noteLengthTicks=0,this.ticksSinceReleased=0,this.liveInputSamplesHeld=0,this.lastInterval=0,this.lastVolume=0,this.stereoVolume1=0,this.stereoVolume2=0,this.stereoOffset=0,this.stereoDelay=0,this.sample=0,this.phases=[],this.phaseDeltas=[],this.volumeStarts=[],this.volumeDeltas=[],this.volumeStart=0,this.volumeDelta=0,this.phaseDeltaScale=0,this.pulseWidth=0,this.pulseWidthDelta=0,this.filter=0,this.filterScale=0,this.filterSample0=0,this.filterSample1=0,this.vibratoScale=0,this.intervalMult=0,this.intervalVolumeMult=1,this.feedbackOutputs=[],this.feedbackMult=0,this.feedbackDelta=0,this.reset()}reset(){for(let t=0;t<n.operatorCount;t++)this.phases[t]=0,this.feedbackOutputs[t]=0;this.sample=0,this.filterSample0=0,this.filterSample1=0,this.liveInputSamplesHeld=0}},Object.defineProperty(t,"C",{value:!0}),t}({});
//# sourceMappingURL=beepbox_synth.min.js.map