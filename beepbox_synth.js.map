{"version":3,"file":"beepbox_synth.js","sources":["../synth/FFT.ts","../synth/SynthConfig.ts","../synth/usefulFunctions.ts","../synth/song.ts","../synth/synth.ts"],"sourcesContent":["/*\r\nCopyright (C) 2018 John Nesky\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\n\r\n\t// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\n\tinterface NumberArray {\r\n\t\tlength: number;\r\n\t\t[index: number]: number;\r\n\t}\r\n\t\r\n\t// A basic FFT operation scales the overall magnitude of elements by the\r\n\t// square root of the length of the array, √N. Performing a forward FFT and\r\n\t// then an inverse FFT results in the original array, but multiplied by N.\r\n\t// This helper function can be used to compensate for that. \r\n\texport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\t\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\t\tarray[i] *= factor;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction isPowerOf2(n: number): boolean {\r\n\t\treturn !!n && !(n & (n - 1));\r\n\t}\r\n\t\r\n\tfunction countBits(n: number): number {\r\n\t\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\t\treturn Math.round(Math.log(n) / Math.log(2));\r\n\t}\r\n\t\r\n\t// Rearranges the elements of the array, swapping the element at an index\r\n\t// with an element at an index that is the bitwise reverse of the first\r\n\t// index in base 2. Useful for computing the FFT.\r\n\tfunction reverseIndexBits(array: NumberArray): void {\r\n\t\tconst fullArrayLength: number = array.length;\r\n\t\tconst bitCount: number = countBits(fullArrayLength);\r\n\t\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\t\tconst finalShift: number = 16 - bitCount;\r\n\t\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\t\tlet j: number;\r\n\t\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\t\tj = ((j           >> 8) | ((j &   0xff) << 8)) >> finalShift;\r\n\t\t\tif (j > i) {\r\n\t\t\t\tlet temp: number = array[i];\r\n\t\t\t\tarray[i] = array[j];\r\n\t\t\t\tarray[j] = temp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* Commented out functions that BeepBox doesn't use...\r\n\t\r\n\t// Provided for educational purposes. Easier to read than\r\n\t// fastFourierTransform(), but computes the same result.\r\n\t// Takes two parallel arrays representing the real and imaginary elements,\r\n\t// respectively, and returns an array containing two new arrays, which\r\n\t// contain the complex result of the transform.\r\n\texport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\t\tconst fullArrayLength: number = realArray.length;\r\n\t\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\t\tconst realOut: number[] = [];\r\n\t\tconst imagOut: number[] = [];\r\n\t\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t\trealOut[i] = 0.0;\r\n\t\t\timagOut[i] = 0.0;\r\n\t\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [realOut, imagOut];\r\n\t}\r\n\t\r\n\t// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n\t// input real and imaginary arrays. Can be used for both forward and inverse\r\n\t// transforms: swap the order of the arguments for the inverse.\r\n\texport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\t\tconst fullArrayLength: number = realArray.length;\r\n\t\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\t\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\t\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\t\t\r\n\t\treverseIndexBits(realArray);\r\n\t\treverseIndexBits(imagArray);\r\n\t\t\r\n\t\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\t\tconst startIndex1: number = startIndex + 1;\r\n\t\t\tconst startIndex2: number = startIndex + 2;\r\n\t\t\tconst startIndex3: number = startIndex + 3;\r\n\t\t\tconst real0: number = realArray[startIndex ];\r\n\t\t\tconst real1: number = realArray[startIndex1];\r\n\t\t\tconst real2: number = realArray[startIndex2];\r\n\t\t\tconst real3: number = realArray[startIndex3];\r\n\t\t\tconst imag0: number = imagArray[startIndex ];\r\n\t\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\t\tconst realTemp0: number = real0 + real1;\r\n\t\t\tconst realTemp1: number = real0 - real1;\r\n\t\t\tconst realTemp2: number = real2 + real3;\r\n\t\t\tconst realTemp3: number = real2 - real3;\r\n\t\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\t\trealArray[startIndex ] = realTemp0 + realTemp2;\r\n\t\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\t\timagArray[startIndex ] = imagTemp0 + imagTemp2;\r\n\t\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t\t}\r\n\t\t\r\n\t\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\t\tconst halfLength: number = stride >>> 1;\r\n\t\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\t\tlet c: number = 1.0;\r\n\t\t\t\tlet s: number = 0.0;\r\n\t\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\t\tcPrev = c;\r\n\t\t\t\t\tsPrev = s;\r\n\t\t\t\t\tc = cTemp;\r\n\t\t\t\t\ts = sTemp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Computes the Fourier transform from an array of real-valued time-domain\r\n\t// samples. The output is specially formatted for space efficieny: elements\r\n\t// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n\t// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n\t// descending frequency. Overwrites the input array.\r\n\texport function forwardRealFourierTransform(array: NumberArray): void {\r\n\t\tconst fullArrayLength: number = array.length;\r\n\t\tconst totalPasses: number = countBits(fullArrayLength);\r\n\t\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\t\t\r\n\t\treverseIndexBits(array);\r\n\t\t\r\n\t\t// First and second pass.\r\n\t\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\t\tconst index1: number = index + 1;\r\n\t\t\tconst index2: number = index + 2;\r\n\t\t\tconst index3: number = index + 3;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\t\tconst real1: number = array[index1];\r\n\t\t\tconst real2: number = array[index2];\r\n\t\t\tconst real3: number = array[index3];\r\n\t\t\t// no imaginary elements yet since the input is fully real.\r\n\t\t\tconst tempA: number = real0 + real1;\r\n\t\t\tconst tempB: number = real2 + real3;\r\n\t\t\tarray[index ] = tempA + tempB;\r\n\t\t\tarray[index1] = real0 - real1;\r\n\t\t\tarray[index2] = tempA - tempB;\r\n\t\t\tarray[index3] = real2 - real3;\r\n\t\t}\r\n\t\t\r\n\t\t// Third pass.\r\n\t\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\t\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\t\tconst index1: number = index + 1;\r\n\t\t\tconst index3: number = index + 3;\r\n\t\t\tconst index4: number = index + 4;\r\n\t\t\tconst index5: number = index + 5;\r\n\t\t\tconst index7: number = index + 7;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\t\tconst real1: number = array[index1];\r\n\t\t\tconst imag3: number = array[index3];\r\n\t\t\tconst real4: number = array[index4];\r\n\t\t\tconst real5: number = array[index5];\r\n\t\t\tconst imag7: number = array[index7];\r\n\t\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\t\tarray[index ] = real0 + real4;\r\n\t\t\tarray[index1] = real1 + tempA;\r\n\t\t\tarray[index3] = real1 - tempA;\r\n\t\t\tarray[index4] = real0 - real4;\r\n\t\t\tarray[index5] = tempB - imag3;\r\n\t\t\tarray[index7] = tempB + imag3;\r\n\t\t}\r\n\t\t\r\n\t\t// Handle remaining passes.\r\n\t\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\t\tconst subStride: number = 1 << pass;\r\n\t\t\tconst midSubStride: number = subStride >> 1;\r\n\t\t\tconst stride: number = subStride << 1;\r\n\t\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\t\tlet c: number = cosIncrement;\r\n\t\t\t\tlet s: number = -sinIncrement;\r\n\t\t\t\tlet cPrev: number = 1.0;\r\n\t\t\t\tlet sPrev: number = 0.0;\r\n\t\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\r\n\t\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\t\tarray[indexB0] =-imag0 - tempB;\r\n\t\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\t\tcPrev = c;\r\n\t\t\t\t\tsPrev = s;\r\n\t\t\t\t\tc = cTemp;\r\n\t\t\t\t\ts = sTemp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n\t\r\n\t// Computes the inverse Fourier transform from a specially formatted array of\r\n\t// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n\t// the corresponding complex elements, representing cosine wave amplitudes in\r\n\t// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n\t// imaginary values, representing sine wave amplitudes in descending frequency.\r\n\t// Generates real-valued time-domain samples. Overwrites the input array.\r\n\texport function inverseRealFourierTransform(array: NumberArray): void {\r\n\t\tconst fullArrayLength: number = array.length;\r\n\t\tconst totalPasses: number = countBits(fullArrayLength);\r\n\t\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\t\r\n\t\t// Perform all but the last few passes in reverse.\r\n\t\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\t\tconst subStride: number = 1 << pass;\r\n\t\t\tconst midSubStride: number = subStride >> 1;\r\n\t\t\tconst stride: number = subStride << 1;\r\n\t\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\t\t\r\n\t\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\t\tarray[midIndexA] *= 2;\r\n\t\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\t\tarray[midIndexB] *= 2;\r\n\t\t\t\tlet c: number = cosIncrement;\r\n\t\t\t\tlet s: number = -sinIncrement;\r\n\t\t\t\tlet cPrev: number = 1.0;\r\n\t\t\t\tlet sPrev: number = 0.0;\r\n\t\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\r\n\t\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\t\tcPrev = c;\r\n\t\t\t\t\tsPrev = s;\r\n\t\t\t\t\tc = cTemp;\r\n\t\t\t\t\ts = sTemp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t/*\r\n\t\t// Commented out this block (and compensated with an extra pass above)\r\n\t\t// because it's slower in my testing so far.\r\n\t\t// Pass with stride 8.\r\n\t\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\t\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\t\tconst index1: number = index + 1;\r\n\t\t\tconst index2: number = index + 2;\r\n\t\t\tconst index3: number = index + 3;\r\n\t\t\tconst index4: number = index + 4;\r\n\t\t\tconst index5: number = index + 5;\r\n\t\t\tconst index6: number = index + 6;\r\n\t\t\tconst index7: number = index + 7;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\t\tconst real1: number = array[index1];\r\n\t\t\tconst real2: number = array[index2];\r\n\t\t\tconst real3: number = array[index3];\r\n\t\t\tconst imag4: number = array[index4];\r\n\t\t\tconst imag5: number = array[index5];\r\n\t\t\tconst imag6: number = array[index6];\r\n\t\t\tconst imag7: number = array[index7];\r\n\t\t\tconst tempA: number = real1 - real3;\r\n\t\t\tconst tempB: number = imag5 + imag7;\r\n\t\t\tarray[index ] = real0 + imag4;\r\n\t\t\tarray[index1] = real1 + real3;\r\n\t\t\tarray[index2] = real2 * 2;\r\n\t\t\tarray[index3] = imag7 - imag5;\r\n\t\t\tarray[index4] = real0 - imag4;\r\n\t\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\t\tarray[index6] = imag6 * 2;\r\n\t\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t\t}\r\n\t\t*/\r\n\t\t// The final passes with strides 4 and 2, combined into one loop.\r\n\t\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\t\tconst index1: number = index + 1;\r\n\t\t\tconst index2: number = index + 2;\r\n\t\t\tconst index3: number = index + 3;\r\n\t\t\tconst real0: number = array[index ];\r\n\t\t\tconst real1: number = array[index1] * 2;\r\n\t\t\tconst imag2: number = array[index2];\r\n\t\t\tconst imag3: number = array[index3] * 2;\r\n\t\t\tconst tempA: number = real0 + imag2;\r\n\t\t\tconst tempB: number = real0 - imag2;\r\n\t\t\tarray[index ] = tempA + real1;\r\n\t\t\tarray[index1] = tempA - real1;\r\n\t\t\tarray[index2] = tempB + imag3;\r\n\t\t\tarray[index3] = tempB - imag3;\r\n\t\t}\r\n\t\t\r\n\t\treverseIndexBits(array);\r\n\t}\r\n\r\n","/*!\r\nCopyright (c) 2012-2022 John Nesky and contributing authors\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\nimport { inverseRealFourierTransform, scaleElementsByFactor } from \"./FFT\";\r\n\r\nexport interface Dictionary<T> {\r\n\t[K: string]: T;\r\n}\r\n\r\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\r\n\tdictionary: Dictionary<T>;\r\n}\r\n\r\nexport interface BeepBoxOption {\r\n\treadonly index: number;\r\n\treadonly name: string;\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n\tcustom,\r\n\tsteady,\r\n\tpunch,\r\n\tflare,\r\n\tpluck,\r\n\ttremolo,\r\n\tflute,\r\n}\r\n\r\nexport const enum InstrumentType {\r\n\tchip = 0,\r\n\tfm = 1,\r\n\tnoise = 2,\r\n\tpwm = 3,\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n\treadonly flags: ReadonlyArray<boolean>;\r\n\treadonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n\treadonly isWhiteKey: boolean;\r\n\treadonly basePitch: number;\r\n}\r\n\r\nexport class Config {\r\n\tpublic static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\t\t{name: \"easy :)\",            realName: \"pentatonic major\",      flags: [true, false,  true, false,  true, false, false,  true, false,  true, false, false]},\r\n\t\t{name: \"easy :(\",            realName: \"pentatonic minor\",      flags: [true, false, false,  true, false,  true, false,  true, false, false,  true, false]},\r\n\t\t{name: \"island :)\",          realName: \"ryukyu\",                flags: [true, false, false, false,  true,  true, false,  true, false, false, false,  true]},\r\n\t\t{name: \"island :(\",          realName: \"pelog selisir\",         flags: [true,  true, false,  true, false, false, false,  true,  true, false, false, false]},\r\n\t\t{name: \"blues :)\",           realName: \"blues major\",           flags: [true, false,  true,  true,  true, false, false,  true, false,  true, false, false]},\r\n\t\t{name: \"blues :(\",           realName: \"blues\",                 flags: [true, false, false,  true, false,  true,  true,  true, false, false,  true, false]},\r\n\t\t{name: \"normal :)\",          realName: \"ionian\",                flags: [true, false,  true, false,  true,  true, false,  true, false,  true, false,  true]},\r\n\t\t{name: \"normal :(\",          realName: \"aeolian\",               flags: [true, false,  true,  true, false,  true, false,  true,  true, false,  true, false]},\r\n\t\t{name: \"dbl harmonic :)\", \t realName: \"double harmonic major\", flags: [true,  true, false, false,  true,  true, false,  true,  true, false, false,  true]},\r\n\t\t{name: \"dbl harmonic :(\",    realName: \"double harmonic minor\", flags: [true, false,  true,  true, false, false,  true,  true,  true, false, false,  true]},\r\n\t\t{name: \"enigma\",             realName: \"whole tone\",            flags: [true, false,  true, false,  true, false,  true, false,  true, false,  true, false]},\r\n\t\t{name: \"expert\",             realName: \"chromatic\",             flags: [true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true]},\r\n\t\t{name: \"monotonic\",          realName: \"monotonic\",             flags: [true, false, false, false, false, false, false, false, false, false, false, false]},\r\n\t\t{name: \"no dabbing\",         realName: \"no dabbing\",            flags: [true,  true, false,  true,  true,  true,  true,  true,  true, false,  true, false]},\r\n\t]);\r\n\tstatic readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\r\n\tstatic readonly pitchNames: ReadonlyArray<string | null> = [\"C\", null, \"D\", null, \"E\", \"F\", null, \"G\", null, \"A\", null, \"B\"];\r\n\tpublic static readonly oldKeys: ReadonlyArray<string | null> = [\"B\", \"A♯\", \"A\", \"G♯\", \"F♯\", \"F\", \"E\", \"D♯\", \"D\", \"C♯\", \"C\"];\r\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\r\n\t\t{name: \"C\",  isWhiteKey:  true, basePitch: 12}, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n\t\t{name: \"C♯\", isWhiteKey: false, basePitch: 13},\r\n\t\t{name: \"D\",  isWhiteKey:  true, basePitch: 14},\r\n\t\t{name: \"D♯\", isWhiteKey: false, basePitch: 15},\r\n\t\t{name: \"E\",  isWhiteKey:  true, basePitch: 16},\r\n\t\t{name: \"F\",  isWhiteKey:  true, basePitch: 17},\r\n\t\t{name: \"F♯\", isWhiteKey: false, basePitch: 18},\r\n\t\t{name: \"G\",  isWhiteKey:  true, basePitch: 19},\r\n\t\t{name: \"G♯\", isWhiteKey: false, basePitch: 20},\r\n\t\t{name: \"A\",  isWhiteKey:  true, basePitch: 21},\r\n\t\t{name: \"A♯\", isWhiteKey: false, basePitch: 22},\r\n\t\t{name: \"B\",  isWhiteKey:  true, basePitch: 23},\r\n\t]);\r\n\tstatic readonly mixNames: ReadonlyArray<string> = [\"Type A (B & S)\", \"Type B (M)\", \"Type C\"];\r\n\tstatic readonly sampleRateNames: ReadonlyArray<string> = [\"44100kHz\", \"48000kHz\", \"default\", \"×4\", \"×2\", \"÷2\", \"÷4\", \"÷8\", \"÷16\"];\r\n\tstatic readonly tempoSteps: number = 24;\r\n\tstatic readonly reverbRange: number = 5;\r\n\tstatic readonly blendRange: number = 4;\r\n\tstatic readonly riffRange: number = 11;\r\n\tstatic readonly detuneRange: number = 24;\r\n\tstatic readonly muffRange: number = 24;\r\n\tstatic readonly beatsPerBarMin: number = 1;\r\n\tstatic readonly beatsPerBarMax: number = 24;\r\n\tstatic readonly barCountMin: number = 1;\r\n\tstatic readonly barCountMax: number = 256;\r\n\tstatic readonly patternsPerChannelMin: number = 1;\r\n\tstatic readonly patternsPerChannelMax: number = 64;\r\n\tstatic readonly instrumentsPerChannelMin: number = 1;\r\n\tstatic readonly instrumentsPerChannelMax: number = 64;\r\n\tstatic readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\r\n\tstatic readonly drumCount: number = 12;\r\n\tstatic readonly pitchOctaves: number = 7;\r\n\tstatic readonly partNames: ReadonlyArray<string> = [\"÷3 (triplets)\", \"÷4 (standard)\", \"÷6\", \"÷8\", \"÷16 (arpfest)\", \"÷12\", \"÷9\", \"÷5\", \"÷50\", \"÷24\"];\r\n\tstatic readonly partCounts: ReadonlyArray<number> = [3, 4, 6, 8, 16, 12, 9, 5, 50, 24];\r\n\tstatic readonly waveNames: ReadonlyArray<string> = [\"triangle\", \"square\", \"pulse wide\", \"pulse narrow\", \"sawtooth\", \"double saw\", \"double pulse\", \"spiky\", \"plateau\", \"glitch\", \"10% pulse\", \"sunsoft bass\", \"loud pulse\", \"sax\", \"guitar\", \"sine\", \"atari bass\", \"atari pulse\", \"1% pulse\", \"curved sawtooth\", \"viola\", \"brass\", \"acoustic bass\", \"lyre\", \"ramp pulse\", \"piccolo\", \"squaretooth\", \"flatline\", \"pnryshk a (u5)\", \"pnryshk b (riff)\"];\r\n\tstatic readonly waveVolumes: ReadonlyArray<number> = [1.0,        0.5,      0.5,          0.5,            0.65,       0.5,          0.4,            0.4,     0.94,      0.5,      0.5,         1.0,            0.6,          0.1,   0.25,     1.0,    1.0,          1.0,           1.0,        1.0,               1.0,     1.0,     1.0,             0.2,    0.2,          0.9,       0.9,           1.0,        0.4,                 0.5];\r\n\tstatic readonly drumNames: ReadonlyArray<string> = [\"retro\", \"white\", \"periodic\", \"detuned periodic\", \"shine\", \"hollow\", \"deep\", \"cutter\", \"metallic\", \"snare\"/*, \"tom-tom\", \"cymbal\", \"bass\"*/];\r\n\tstatic readonly drumVolumes: ReadonlyArray<number> = [0.25, 1.0, 0.4, 0.3, 0.3, 1.5, 1.5, 0.25, 1.0, 1.0/*, 1.5, 1.5, 1.5*/];\r\n\tstatic readonly drumBasePitches: ReadonlyArray<number> = [69, 69, 69, 69, 69, 96, 120, 96, 96, 69/*, 96, 90, 126*/];\r\n\tstatic readonly drumPitchFilterMult: ReadonlyArray<number> = [100.0, 8.0, 100.0, 100.0, 100.0, 1.0, 100.0, 100.0, 100.0, 100.0/*, 1.0, 1.0, 1.0*/];\r\n\tstatic readonly drumWaveIsSoft: ReadonlyArray<boolean> = [false, true, false, false, false, true, true, false, false, false/*, true, true, true*/];\r\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n\tprivate static readonly _drumWaves: Array<Float32Array | null> = [null, null, null, null, null, null, null, null, null, null/*, null, null, null*/];\r\n\tstatic readonly pwmwaveNames: ReadonlyArray<string> = [\"5%\", \"10%\", \"15%\", \"20%\", \"25%\", \"30%\", \"35%\", \"40%\", \"45%\", \"50%\"];\r\n\tstatic readonly pwmwaveVolumes: ReadonlyArray<number> = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];\r\n\tstatic readonly filterNames: ReadonlyArray<string> = [\"none\", \"sustain sharp\", \"sustain medium\", \"sustain soft\", \"decay sharp\", \"decay medium\", \"decay soft\", \"decay drawn\", \"fade sharp\", \"fade medium\", \"fade soft\", \"ring\", \"muffled\", \"submerged\", \"shift\", \"overtone\", \"woosh\", \"undertone\"];\r\n\tstatic readonly filterBases: ReadonlyArray<number> = [0.0, 2.0, 3.5, 5.0, 1.0, 2.5, 4.0, 1.0, 5.0, 7.5, 10.0, -1.0, 4.0, 6.0, 0.0, 1.0, 2.0, 5.0];\r\n\tstatic readonly filterDecays: ReadonlyArray<number> = [0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 4.0, 0.5, -10.0, -7.0, -4.0, 0.2, 0.2, 0.3, 0.0, 0.0, -6.0, 0.0];\r\n\tstatic readonly filterVolumes: ReadonlyArray<number> = [0.2, 0.4, 0.7, 1.0, 0.5, 0.75, 1.0, 0.5, 0.4, 0.7, 1.0, 0.5, 0.75, 0.4, 0.4, 1.0, 0.5, 1.75];\r\n\tstatic readonly transitionNames: ReadonlyArray<string> = [\"seamless\", \"sudden\", \"smooth\", \"slide\", \"trill\", \"click\", \"bow\", \"blip\"];\r\n\tstatic readonly effectNames: ReadonlyArray<string> = [\"none\", \"vibrato light\", \"vibrato delayed\", \"vibrato heavy\", \"tremolo light\", \"tremolo heavy\", \"alien\", \"stutter\", \"strum\"];\r\n\tstatic readonly effectVibratos: ReadonlyArray<number> = [0.0, 0.15, 0.3, 0.45, 0.0, 0.0, 1.0, 0.0, 0.05];\r\n\tstatic readonly effectTremolos: ReadonlyArray<number> = [0.0, 0.0, 0.0, 0.0, 0.25, 0.5, 0.0, 1.0, 0.025];\r\n\tstatic readonly effectVibratoDelays: ReadonlyArray<number> = [0, 0, 3, 0, 0, 0, 0, 0];\r\n\tstatic readonly chorusNames: ReadonlyArray<string> = [\"union\", \"shimmer\", \"hum\", \"honky tonk\", \"dissonant\", \"fifths\", \"octaves\", \"spinner\", \"detune\", \"bowed\", \"rising\", \"vibrate\", \"fourths\", \"bass\", \"dirty\", \"stationary\", \"harmonic (legacy)\", \"recurve\", \"voiced\", \"fluctuate\"];\r\n\tstatic readonly chorusIntervals: ReadonlyArray<number> = [0.0, 0.02, 0.05, 0.1, 0.25, 3.5, 6, 0.02, 0.0, 0.02, 1.0, 3.5, 4, 0, 0.0, 3.5, 0.0, 0.005, 0.25, 12];\r\n\tstatic readonly chorusOffsets: ReadonlyArray<number> = [0.0, 0.0, 0.0, 0.0, 0.0, 3.5, 6, 0.0, 0.25, 0.0, 0.7, 7, 4, -7, 0.1, 0.0, 0.0, 0.0, 3.0, 0.0];\r\n\tstatic readonly chorusVolumes: ReadonlyArray<number> = [0.9, 0.9, 1.0, 1.0, 0.95, 0.95, 0.9, 1.0, 1.0, 1.0, 0.95, 0.975, 0.95, 1.0, 0.975, 0.9, 1.0, 1.0, 0.9, 1.0];\r\n\tstatic readonly chorusSigns: ReadonlyArray<number> = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0];\r\n\tstatic readonly chorusRiffApp: ReadonlyArray<number> = [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];\r\n\tstatic readonly chorusHarmonizes: ReadonlyArray<boolean> = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];\r\n\tstatic readonly harmDisplay: ReadonlyArray<string> = [\"arpeggio\", \"duet\", \"chord\", \"seventh\", \"half arpeggio\", \"arp-chord\"];\r\n\tstatic readonly harmNames: ReadonlyArray<number> = [0, 1, 2, 3, 4, 5];\r\n\tstatic readonly fmChorusDisplay: ReadonlyArray<string> = [\"none\", \"default\", \"detune\", \"honky tonk\", \"consecutive\", \"alt. major thirds\", \"alt. minor thirds\", \"fifths\", \"octaves\"];\r\n\tstatic readonly fmChorusNames: ReadonlyArray<number> = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n\tstatic readonly imuteNames: ReadonlyArray<string> = [\"◉\", \"◎\"];\r\n\tstatic readonly imuteValues: ReadonlyArray<number> = [1, 0];\r\n\tstatic readonly octoffNames: ReadonlyArray<string> = [\"none\", \"+2 (2 octaves)\",  \"+1 1/2 (octave and fifth)\",  \"+1 (octave)\",  \"+1/2 (fifth)\", \"-1/2 (fifth)\", \"-1 (octave)\", \"-1 1/2 (octave and fifth)\", \"-2 (2 octaves\"];\r\n\tstatic readonly octoffValues: ReadonlyArray<number> = [0.0, 24.0, 19.0, 12.0, 7.0, -7.0, -12.0, -19.0, -24.0];\r\n\tstatic readonly volumeNames: ReadonlyArray<string> = [\"loudest\", \"loud\", \"medium\", \"quiet\", \"quietest\", \"mute\", \"i\", \"couldnt\", \"be\", \"bothered\"];\r\n\tstatic readonly volumeValues: ReadonlyArray<number> = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, -1.0];\r\n\tstatic readonly volumeMValues: ReadonlyArray<number> = [0.0, 0.5, 1.0, 1.5, 2.0, -1.0];\r\n\tstatic readonly ipanValues: ReadonlyArray<number> = [-1.0, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0];\r\n\tstatic readonly operatorCount: number = 4;\r\n\tstatic readonly operatorAlgorithmNames: ReadonlyArray<string> = [\r\n\t\t\"1←(2 3 4)\",\r\n\t\t\"1←(2 3←4)\",\r\n\t\t\"1←2←(3 4)\",\r\n\t\t\"1←(2 3)←4\",\r\n\t\t\"1←2←3←4\",\r\n\t\t\"1←3 2←4\",\r\n\t\t\"1 2←(3 4)\",\r\n\t\t\"1 2←3←4\",\r\n\t\t\"(1 2)←3←4\",\r\n\t\t\"(1 2)←(3 4)\",\r\n\t\t\"1 2 3←4\",\r\n\t\t\"(1 2 3)←4\",\r\n\t\t\"1 2 3 4\",\r\n\t];\r\n\tstatic readonly midiAlgorithmNames: ReadonlyArray<string> = [\"1<(2 3 4)\", \"1<(2 3<4)\", \"1<2<(3 4)\", \"1<(2 3)<4\", \"1<2<3<4\", \"1<3 2<4\", \"1 2<(3 4)\", \"1 2<3<4\", \"(1 2)<3<4\", \"(1 2)<(3 4)\", \"1 2 3<4\", \"(1 2 3)<4\", \"1 2 3 4\"];\r\n\tstatic readonly operatorModulatedBy: ReadonlyArray<ReadonlyArray<ReadonlyArray<number>>> = [\r\n\t\t[[2, 3, 4], [],     [],  []],\r\n\t\t[[2, 3],    [],     [4], []],\r\n\t\t[[2],       [3, 4], [],  []],\r\n\t\t[[2, 3],    [4],    [4], []],\r\n\t\t[[2],       [3],    [4], []],\r\n\t\t[[3],       [4],    [],  []],\r\n\t\t[[],        [3, 4], [],  []],\r\n\t\t[[],        [3],    [4], []],\r\n\t\t[[3],       [3],    [4], []],\r\n\t\t[[3, 4],    [3, 4], [],  []],\r\n\t\t[[],        [],     [4], []],\r\n\t\t[[4],       [4],    [4], []],\r\n\t\t[[],        [],     [],  []],\r\n\t];\r\n\tstatic readonly operatorAssociatedCarrier: ReadonlyArray<ReadonlyArray<number>> = [\r\n\t\t[1, 1, 1, 1],\r\n\t\t[1, 1, 1, 1],\r\n\t\t[1, 1, 1, 1],\r\n\t\t[1, 1, 1, 1],\r\n\t\t[1, 1, 1, 1],\r\n\t\t[1, 2, 1, 2],\r\n\t\t[1, 2, 2, 2],\r\n\t\t[1, 2, 2, 2],\r\n\t\t[1, 2, 2, 2],\r\n\t\t[1, 2, 2, 2],\r\n\t\t[1, 2, 3, 3],\r\n\t\t[1, 2, 3, 3],\r\n\t\t[1, 2, 3, 4],\r\n\t];\r\n\tstatic readonly operatorCarrierCounts: ReadonlyArray<number> = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 4];\r\n\tstatic readonly operatorCarrierChorus: ReadonlyArray<ReadonlyArray<number>> = [\r\n\t\t[0.0, 0.0, 0.0, 0.0],\r\n\t\t[0.0, 0.04, -0.073, 0.091],\r\n\t\t[0.5, 0.54, 0.427, 0.591],\r\n\t\t[0.0, 0.26, -0.45, 0.67],\r\n\t\t[0.0, 1.0, 2.0, 3.0],\r\n\t\t[0.0, 4.0, 7.0, 11.0],\r\n\t\t[0.0, 3.0, 7.0, 10.0],\r\n\t\t[0.0, 7.0, 14.0, 21.0],\r\n\t\t[0.0, 12.0, 24.0, 36.0],\r\n\t];\r\n\tstatic readonly operatorAmplitudeMax: number = 15;\r\n\tstatic readonly operatorFrequencyNames: ReadonlyArray<string> = [\"1×\", \"~1×\", \"2×\", \"~2×\", \"3×\", \"4×\", \"5×\", \"6×\", \"7×\", \"8×\", \"9×\", \"10×\", \"11×\", \"13×\", \"16×\", \"20×\"];\r\n\tstatic readonly midiFrequencyNames: ReadonlyArray<string> = [\"1x\", \"~1x\", \"2x\", \"~2x\", \"3x\", \"4x\", \"5x\", \"6x\", \"7x\", \"8x\", \"9x\", \"10x\", \"11x\", \"13x\", \"16x\", \"20x\"];\r\n\tstatic readonly operatorFrequencies: ReadonlyArray<number> =    [1.0, 1.0, 2.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 16.0, 20.0];\r\n\tstatic readonly operatorHzOffsets: ReadonlyArray<number> =      [0.0, 1.5, 0.0, -1.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\r\n\tstatic readonly operatorAmplitudeSigns: ReadonlyArray<number> = [1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];\r\n\tstatic readonly operatorEnvelopeNames: ReadonlyArray<string> = [\"custom\", \"steady\", \"punch\", \"flare 1\", \"flare 2\", \"flare 3\", \"pluck 1\", \"pluck 2\", \"pluck 3\", \"swell 1\", \"swell 2\", \"swell 3\", \"tremolo1\", \"tremolo2\", \"tremolo3\", \"custom flare\", \"custom tremolo\", \"flute 1\", \"flute 2\", \"flute 3\"];\r\n\tstatic readonly operatorEnvelopeType: ReadonlyArray<EnvelopeType> = [EnvelopeType.custom, EnvelopeType.steady, EnvelopeType.punch, EnvelopeType.flare, EnvelopeType.flare, EnvelopeType.flare, EnvelopeType.pluck, EnvelopeType.pluck, EnvelopeType.pluck, EnvelopeType.pluck, EnvelopeType.pluck, EnvelopeType.pluck, EnvelopeType.tremolo, EnvelopeType.tremolo, EnvelopeType.tremolo, EnvelopeType.flare, EnvelopeType.tremolo, EnvelopeType.flute, EnvelopeType.flute, EnvelopeType.flute];\r\n\tstatic readonly operatorSpecialCustomVolume: ReadonlyArray<boolean> = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false];\r\n\tstatic readonly operatorEnvelopeSpeed: ReadonlyArray<number> = [0.0, 0.0, 0.0, 32.0, 8.0, 2.0, 32.0, 8.0, 2.0, 32.0, 8.0, 2.0, 4.0, 2.0, 1.0, 8.0, 0.0, 16.0, 8.0, 4.0];\r\n\tstatic readonly operatorEnvelopeInverted: ReadonlyArray<boolean> = [false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false];\r\n\tstatic readonly operatorFeedbackNames: ReadonlyArray<string> = [\r\n\t\t\"1⟲\",\r\n\t\t\"2⟲\",\r\n\t\t\"3⟲\",\r\n\t\t\"4⟲\",\r\n\t\t\"1⟲ 2⟲\",\r\n\t\t\"3⟲ 4⟲\",\r\n\t\t\"1⟲ 2⟲ 3⟲ \",\r\n\t\t\"2⟲ 3⟲ 4⟲ \",\r\n\t\t\"1⟲ 2⟲ 3⟲ 4⟲ \",\r\n\t\t\"1→2\",\r\n\t\t\"1→3\",\r\n\t\t\"1→4\",\r\n\t\t\"2→3\",\r\n\t\t\"2→4\",\r\n\t\t\"3→4\",\r\n\t\t\"1→3 2→4\",\r\n\t\t\"1→4 2→3\",\r\n\t\t\"1→2→3→4\",\r\n\t\t\"1🗘2\",\r\n\t\t\"1🗘3\",\r\n\t\t\"1🗘4\",\r\n\t\t\"2🗘3\",\r\n\t\t\"2🗘4\",\r\n\t\t\"3🗘4\",\r\n\t];\r\n\tstatic readonly midiFeedbackNames: ReadonlyArray<string> = [\r\n\t\t\"1\",\r\n\t\t\"2\",\r\n\t\t\"3\",\r\n\t\t\"4\",\r\n\t\t\"1 2\",\r\n\t\t\"3 4\",\r\n\t\t\"1 2 3\",\r\n\t\t\"2 3 4\",\r\n\t\t\"1 2 3 4\",\r\n\t\t\"1>2\",\r\n\t\t\"1>3\",\r\n\t\t\"1>4\",\r\n\t\t\"2>3\",\r\n\t\t\"2>4\",\r\n\t\t\"3>4\",\r\n\t\t\"1>3 2>4\",\r\n\t\t\"1>4 2>3\",\r\n\t\t\"1>2>3>4\",\r\n\t\t\"1-2\",\r\n\t\t\"1-3\",\r\n\t\t\"1-4\",\r\n\t\t\"2-3\",\r\n\t\t\"2-4\",\r\n\t\t\"3-4\",\r\n\t];\r\n\tstatic readonly operatorFeedbackIndices: ReadonlyArray<ReadonlyArray<ReadonlyArray<number>>> = [\r\n\t\t[[1], [], [], []],\r\n\t\t[[], [2], [], []],\r\n\t\t[[], [], [3], []],\r\n\t\t[[], [], [], [4]],\r\n\t\t[[1], [2], [], []],\r\n\t\t[[], [], [3], [4]],\r\n\t\t[[1], [2], [3], []],\r\n\t\t[[], [2], [3], [4]],\r\n\t\t[[1], [2], [3], [4]],\r\n\t\t[[], [1], [], []],\r\n\t\t[[], [], [1], []],\r\n\t\t[[], [], [], [1]],\r\n\t\t[[], [], [2], []],\r\n\t\t[[], [], [], [2]],\r\n\t\t[[], [], [], [3]],\r\n\t\t[[], [], [1], [2]],\r\n\t\t[[], [], [2], [1]],\r\n\t\t[[], [1], [2], [3]],\r\n\t\t[[2], [1], [],  []  ],\r\n\t\t[[3], [],  [1], []  ],\r\n\t\t[[4], [],  [],  [1] ],\r\n\t\t[[],  [3], [2], []  ],\r\n\t\t[[],  [4], [],  [2] ],\r\n\t\t[[],  [],  [4], [3] ],\r\n\t];\r\n\tstatic readonly pitchChannelTypeNames: ReadonlyArray<string> = [\"chip\", \"FM (expert)\", \"PWM (beta)\"];\r\n\tstatic readonly pitchChannelTypeValues: ReadonlyArray<number> = [InstrumentType.chip, InstrumentType.fm, InstrumentType.pwm];\r\n\tstatic readonly drumChannelTypeNames: ReadonlyArray<string> = [\"noise\"];\r\n\tstatic readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"PWM\"];\r\n\r\n\tstatic readonly oldThemeNames: ReadonlyArray<string> = [\"Default\", \"ModBox 2.0\", \"Artic\", \"Cinnamon Roll [!]\", \"Ocean\", \"Rainbow [!]\", \"Float [!]\", \"Windows\", \"Grassland\", \"Dessert\", \"Kahootiest\", \"Beam to the Bit [!]\", \"Pretty Egg\", \"Poniryoshka\", \"Gameboy [!]\", \"Woodkid\", \"Midnight\", \"Snedbox\", \"unnamed\", \"Piano [!] [↻]\", \"Halloween\", \"FrozenOver❄️\"];\r\n\r\n\tstatic readonly channelOneBrightColorPallet: string      = \"#25f3ff\";\r\n\tstatic readonly channelTwoBrightColorPallet: string      = \"#44ff44\";\r\n\tstatic readonly channelThreeBrightColorPallet: string    = \"#ffff25\";\r\n\tstatic readonly channelFourBrightColorPallet: string     = \"#ff9752\";\r\n\tstatic readonly channelFiveBrightColorPallet: string     = \"#ff90ff\";\r\n\tstatic readonly channelSixBrightColorPallet: string      = \"#9f31ea\";\r\n\tstatic readonly channelSevenBrightColorPallet: string    = \"#2b6aff\";\r\n\tstatic readonly channelEightBrightColorPallet: string    = \"#00ff9f\";\r\n\tstatic readonly channelNineBrightColorPallet: string     = \"#ffbf00\";\r\n\tstatic readonly channelTenBrightColorPallet: string      = \"#d85d00\";\r\n\tstatic readonly channelElevenBrightColorPallet: string   = \"#ff00a1\";\r\n\tstatic readonly channelTwelveBrightColorPallet: string   = \"#c26afc\";\r\n\tstatic readonly channelThirteenBrightColorPallet: string = \"#ff1616\";\r\n\tstatic readonly channelFourteenBrightColorPallet: string = \"#ffffff\";\r\n\tstatic readonly channelFifteenBrightColorPallet: string  = \"#768dfc\";\r\n\tstatic readonly channelSixteenBrightColorPallet: string  = \"#a5ff00\";\r\n\r\n\tstatic readonly channelOneDimColorPallet: string      = \"#0099a1\";\r\n\tstatic readonly channelTwoDimColorPallet: string      = \"#439143\";\r\n\tstatic readonly channelThreeDimColorPallet: string    = \"#a1a100\";\r\n\tstatic readonly channelFourDimColorPallet: string     = \"#c75000\";\r\n\tstatic readonly channelFiveDimColorPallet: string     = \"#d020d0\";\r\n\tstatic readonly channelSixDimColorPallet: string      = \"#552377\";\r\n\tstatic readonly channelSevenDimColorPallet: string    = \"#221b89\";\r\n\tstatic readonly channelEightDimColorPallet: string    = \"#00995f\";\r\n\tstatic readonly channelNineDimColorPallet: string     = \"#d6b03e\";\r\n\tstatic readonly channelTenDimColorPallet: string      = \"#b25915\";\r\n\tstatic readonly channelElevenDimColorPallet: string   = \"#891a60\";\r\n\tstatic readonly channelTwelveDimColorPallet: string   = \"#965cbc\";\r\n\tstatic readonly channelThirteenDimColorPallet: string = \"#991010\";\r\n\tstatic readonly channelFourteenDimColorPallet: string = \"#aaaaaa\";\r\n\tstatic readonly channelFifteenDimColorPallet: string  = \"#5869BD\";\r\n\tstatic readonly channelSixteenDimColorPallet: string  = \"#7c9b42\";\r\n\r\n\tstatic readonly pitchChannelColorsDim: ReadonlyArray<string>    = [Config.channelOneDimColorPallet, Config.channelTwoDimColorPallet, Config.channelThreeDimColorPallet, Config.channelFourDimColorPallet, Config.channelFiveDimColorPallet, Config.channelSixDimColorPallet, Config.channelSevenDimColorPallet, Config.channelEightDimColorPallet, Config.channelNineDimColorPallet, Config.channelTenDimColorPallet, Config.channelElevenDimColorPallet, Config.channelTwelveDimColorPallet];\r\n\tstatic readonly pitchChannelColorsBright: ReadonlyArray<string> = [Config.channelOneBrightColorPallet, Config.channelTwoBrightColorPallet, Config.channelThreeBrightColorPallet, Config.channelFourBrightColorPallet, Config.channelFiveBrightColorPallet, Config.channelSixBrightColorPallet, Config.channelSevenBrightColorPallet, Config.channelEightBrightColorPallet, Config.channelNineBrightColorPallet, Config.channelTenBrightColorPallet, Config.channelElevenBrightColorPallet, Config.channelTwelveBrightColorPallet];\r\n\tstatic readonly pitchNoteColorsDim: ReadonlyArray<string>       = [Config.channelOneDimColorPallet, Config.channelTwoDimColorPallet, Config.channelThreeDimColorPallet, Config.channelFourDimColorPallet, Config.channelFiveDimColorPallet, Config.channelSixDimColorPallet, Config.channelSevenDimColorPallet, Config.channelEightDimColorPallet, Config.channelNineDimColorPallet, Config.channelTenDimColorPallet, Config.channelElevenDimColorPallet, Config.channelTwelveDimColorPallet];\r\n\tstatic readonly pitchNoteColorsBright: ReadonlyArray<string>    = [Config.channelOneBrightColorPallet, Config.channelTwoBrightColorPallet, Config.channelThreeBrightColorPallet, Config.channelFourBrightColorPallet, Config.channelFiveBrightColorPallet, Config.channelSixBrightColorPallet, Config.channelSevenBrightColorPallet, Config.channelEightBrightColorPallet, Config.channelNineBrightColorPallet, Config.channelTenBrightColorPallet, Config.channelElevenBrightColorPallet, Config.channelTwelveBrightColorPallet];\r\n\tstatic readonly drumChannelColorsDim: ReadonlyArray<string>    = [Config.channelThirteenDimColorPallet, Config.channelFourteenDimColorPallet, Config.channelFifteenDimColorPallet, Config.channelSixteenDimColorPallet];\r\n\tstatic readonly drumChannelColorsBright: ReadonlyArray<string> = [Config.channelThirteenBrightColorPallet, Config.channelFourteenBrightColorPallet, Config.channelFifteenBrightColorPallet, Config.channelSixteenBrightColorPallet];\r\n\tstatic readonly drumNoteColorsDim: ReadonlyArray<string>       = [Config.channelThirteenDimColorPallet, Config.channelFourteenDimColorPallet, Config.channelFifteenDimColorPallet, Config.channelSixteenDimColorPallet];\r\n\tstatic readonly drumNoteColorsBright: ReadonlyArray<string>    = [Config.channelThirteenBrightColorPallet, Config.channelFourteenBrightColorPallet, Config.channelFifteenBrightColorPallet, Config.channelSixteenBrightColorPallet];\r\n\r\n\tstatic readonly midiPitchChannelNames: ReadonlyArray<string> = [\"cyan channel\", \"yellow channel\", \"orange channel\", \"green channel\", \"purple channel\", \"blue channel\"];\r\n\tstatic readonly midiDrumChannelNames: ReadonlyArray<string> = [\"gray channel\", \"brown channel\", \"indigo channel\"];\r\n\tstatic readonly midiSustainInstruments: number[] = [\r\n\t\t0x47, // triangle -> clarinet\r\n\t\t0x50, // square -> square wave\r\n\t\t0x46, // pulse wide -> bassoon\r\n\t\t0x44, // pulse narrow -> oboe\r\n\t\t0x51, // sawtooth -> sawtooth wave\r\n\t\t0x51, // double saw -> sawtooth wave\r\n\t\t0x51, // double pulse -> sawtooth wave\r\n\t\t0x51, // spiky -> sawtooth wave\r\n\t\t0x4A, // plateau -> recorder\r\n\t];\r\n\tstatic readonly midiDecayInstruments: number[] = [\r\n\t\t0x2E, // triangle -> harp\r\n\t\t0x2E, // square -> harp\r\n\t\t0x06, // pulse wide -> harpsichord\r\n\t\t0x18, // pulse narrow -> nylon guitar\r\n\t\t0x19, // sawtooth -> steel guitar\r\n\t\t0x19, // double saw -> steel guitar\r\n\t\t0x6A, // double pulse -> shamisen\r\n\t\t0x6A, // spiky -> shamisen\r\n\t\t0x21, // plateau -> fingered bass\r\n\t];\r\n\tstatic readonly drumInterval: number = 6;\r\n\tstatic readonly pitchCount: number = 37;\r\n\tstatic readonly maxPitch: number = 84;\r\n\tstatic readonly pitchChannelCountMin: number = 0;\r\n\tstatic readonly pitchChannelCountMax: number = 12;\r\n\tstatic readonly drumChannelCountMin: number = 0;\r\n\tstatic readonly drumChannelCountMax: number = 4;\r\n\tstatic readonly waves: ReadonlyArray<Float64Array> = [\r\n\t\tConfig._centerWave([1.0/15.0, 3.0/15.0, 5.0/15.0, 7.0/15.0, 9.0/15.0, 11.0/15.0, 13.0/15.0, 15.0/15.0, 15.0/15.0, 13.0/15.0, 11.0/15.0, 9.0/15.0, 7.0/15.0, 5.0/15.0, 3.0/15.0, 1.0/15.0, -1.0/15.0, -3.0/15.0, -5.0/15.0, -7.0/15.0, -9.0/15.0, -11.0/15.0, -13.0/15.0, -15.0/15.0, -15.0/15.0, -13.0/15.0, -11.0/15.0, -9.0/15.0, -7.0/15.0, -5.0/15.0, -3.0/15.0, -1.0/15.0]),\r\n\t\tConfig._centerWave([1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0/31.0, 3.0/31.0, 5.0/31.0, 7.0/31.0, 9.0/31.0, 11.0/31.0, 13.0/31.0, 15.0/31.0, 17.0/31.0, 19.0/31.0, 21.0/31.0, 23.0/31.0, 25.0/31.0, 27.0/31.0, 29.0/31.0, 31.0/31.0, -31.0/31.0, -29.0/31.0, -27.0/31.0, -25.0/31.0, -23.0/31.0, -21.0/31.0, -19.0/31.0, -17.0/31.0, -15.0/31.0, -13.0/31.0, -11.0/31.0, -9.0/31.0, -7.0/31.0, -5.0/31.0, -3.0/31.0, -1.0/31.0]),\r\n\t\tConfig._centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]),\r\n\t\tConfig._centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0,1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]),\r\n\t\tConfig._centerWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]),\r\n\t\tConfig._centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]),\r\n\t\tConfig._centerWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]),\r\n\t\tConfig._centerWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]),\r\n\t\tConfig._centerWave([0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]),\r\n\t\tConfig._centerWaver\n\t\tConfig._centerWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]),\r\n\t\tConfig._centerWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]),\r\n\t\tConfig._centerWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]),\r\n\t\tConfig._centerWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]),\r\n\t\tConfig._centerWave([6.1, -2.9, 1.4, -2.9]),\r\n\t\tConfig._centerWave([1, 4, 2, 1, -0.1, -1, -0.12]),\r\n\t\tConfig._centerWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]),\r\n\t\tConfig._centerWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]),\r\n\t\tConfig._centerWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]),\r\n\t\tConfig._centerWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]),\r\n\t];\r\n\tstatic readonly wavesMixC: ReadonlyArray<Float64Array> = [\r\n\t\tConfig._centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]),\r\n\t\tConfig._centerWave([1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]),\r\n\t\tConfig._centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]),\r\n\t\tConfig._centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0,1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]),\r\n\t\tConfig._centerWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]),\r\n\t\tConfig._centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]),\r\n\t\tConfig._centerWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]),\r\n\t\tConfig._centerWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]),\r\n\t\tConfig._centerWave([0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]),\r\n\t\tConfig._centerWaver\n\t\tConfig._centerWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]),\r\n\t\tConfig._centerWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]),\r\n\t\tConfig._centerWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]),\r\n\t\tConfig._centerWave([0.7, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -0.7]),\r\n\t\tConfig._centerWave([1.0, -1.0, 4.0, 2.15, 4.1, 5.05, 0.0, -0.05, 1.0]),\r\n\t\tConfig._centerWave([4.5, -1.7, 1.0, -1.7]),\r\n\t\tConfig._centerWave([0.1, 0.4, 0.2, 0.1, -0.1, -1, -0.12]),\r\n\t\tConfig._centerWave([.03, .13, .30, 1.0, 0.0, -.26]),\r\n\t\tConfig._centerWave([2, 1.75, 1.5, 1.25, 1, .75, .5, .25, 0.0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75]),\r\n\t\tConfig._centerWave([1.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0]),\r\n\t\tConfig._centerWave([-1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, -1.0]),\r\n\t];\r\n\tstatic readonly pwmwaves: ReadonlyArray<Float64Array> = [\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t\tConfig._centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0]),\r\n\t];\r\n\tstatic readonly sineWaveLength: number = 1 << 8; // 256\r\n\tstatic readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n\tstatic readonly sineWave: Float64Array = Config.generateSineWave();\r\n\t\r\n\tprivate static _centerWave(wave: Array<number>): Float64Array {\r\n\t\tlet sum: number = 0.0;\r\n\t\tfor (let i: number = 0; i < wave.length; i++) sum += wave[i];\r\n\t\tconst average: number = sum / wave.length;\r\n\t\tfor (let i: number = 0; i < wave.length; i++) wave[i] -= average;\r\n\t\treturn new Float64Array(wave);\r\n\t}\r\n\t\r\n\tstatic getDrumWave(index: number): Float32Array {\r\n\t\tlet wave: Float32Array | null = Config._drumWaves[index];\r\n\t\tif (wave == null) {\r\n\t\t\twave = new Float32Array(32768);\r\n\t\t\tConfig._drumWaves[index] = wave;\r\n\t\t\t\r\n\t\t\tif (index == 0) {\r\n\t\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer += 1 << 14;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 1) {\r\n\t\t\t\t// White noise is just random values for each sample.\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 2) {\r\n\t\t\t\t// \"periodic\" drum.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer += 2 << 14;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 3) {\r\n\t\t\t\t// \"detuned periodic\" drum.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32767; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 2;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer += 4 << 14;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 4) {\r\n\t\t\t\t// \"shine\" drum.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 5) {\r\n\t\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 10, 11, 1, 1, 0);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 11, 14, -2, -2, 0);\r\n\t\t\t\tinverseRealFourierTransform(wave);\r\n\t\t\t\tscaleElementsByFactor(wave, 1.0 / Math.sqrt(wave.length));\r\n\t\t\t} else if (index == 6) {\r\n\t\t\t\t// \"deep\" drum, designed in frequency space and then converted via FFT:\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 1, 10, 1, 1, 0);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 20, 14, -2, -2, 0);\r\n\t\t\t\tinverseRealFourierTransform(wave);\r\n\t\t\t\tscaleElementsByFactor(wave, 1.0 / Math.sqrt(wave.length));\r\n\t\t\t} else if (index == 7) {\r\n\t\t\t\t// \"cutter\" drum.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * Math.random();\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer += 15 << 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 8) {\r\n\t\t\t\t// \"metallic\" drum.\r\n\t\t\t\tlet drumBuffer: number = 1;\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 + 0.5;\r\n\t\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\t\tnewBuffer -= 10 << 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t\t}\r\n\t\t\t} else if (index == 9) {\r\n\t\t\t\t// \"snare\" drum.\r\n\t\t\t\tfor (let i: number = 0; i < 32768; i++) {\r\n\t\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t\t}\r\n\t\t\t/*\r\n\t\t\t} else if (index == 10) {\r\n\t\t\t\t// \"tom-tom\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 10, 14, 0, -4, 0);\r\n\t\t\t\tinverseRealFourierTransform(wave);\r\n\t\t\t\tscaleElementsByFactor(wave, 1.0 / Math.sqrt(wave.length));\r\n\t\t\t} else if (index == 11) {\r\n\t\t\t\t// \"cymbal\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 9, 9.4, -1, -1, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 9.7, 10, -1, -1, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 10.3, 10.6, -1, -1, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 10.9, 11.1, -1, -1, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 11.3, 11.4, 0, 0, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 11.5, 11.7, 1.5, 1.5, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 11.7, 12, -1, -1, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 12, 12.1, 2, 2, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 12.1, 12.6, 0, 2, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 12.6, 13, 0, 0, -0.5);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 13, 14, 1, -3, -0.5);\r\n\t\t\t\tinverseRealFourierTransform(wave);\r\n\t\t\t\tscaleElementsByFactor(wave, 1.0 / Math.sqrt(wave.length));\r\n\t\t\t} else if (index == 12) {\r\n\t\t\t\t// \"bass\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 7, 8, -2, 4, 0);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 8, 9, 4, -2, 0);\r\n\t\t\t\tConfig.drawNoiseSpectrum(wave, 9, 14, -2, -6, 0);\r\n\t\t\t\tinverseRealFourierTransform(wave);\r\n\t\t\t\tscaleElementsByFactor(wave, 1.0 / Math.sqrt(wave.length));\r\n\t\t\t*/\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn wave;\r\n\t}\r\n\t\r\n\tprivate static drawNoiseSpectrum(wave: Float32Array, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overalSlope: number): void {\r\n\t\tconst referenceOctave: number = 11;\r\n\t\tconst referenceIndex: number = 1 << referenceOctave;\r\n\t\tconst lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n\t\tconst highIndex: number = Math.pow(2, highOctave) | 0;\r\n\t\tconst log2: number = Math.log(2);\r\n\t\tfor (let i: number = lowIndex; i < highIndex; i++) {\r\n\t\t\tlet amplitude: number = Math.pow(2, lowPower + (highPower - lowPower) * (Math.log(i) / log2 - lowOctave) / (highOctave - lowOctave));\r\n\t\t\tamplitude *= Math.pow(i / referenceIndex, overalSlope);\r\n\t\t\tconst radians: number = Math.random() * Math.PI * 2.0;\r\n\t\t\twave[i] = Math.cos(radians) * amplitude;\r\n\t\t\twave[32768 - i] = Math.sin(radians) * amplitude;\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate static generateSineWave(): Float64Array {\r\n\t\tconst wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n\t\tfor (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n\t\t\twave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n\t\t}\r\n\t\treturn wave;\r\n\t}\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n\tconst dictionary: Dictionary<T> = {};\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tconst value: any = array[i];\r\n\t\tvalue.index = i;\r\n\t\tdictionary[value.name] = <T> value;\r\n\t}\r\n\tconst result: DictionaryArray<T> = <DictionaryArray<T>> <any> array;\r\n\tresult.dictionary = dictionary;\r\n\treturn result;\r\n}","\texport function clamp(min: number, max: number, val: number): number {\r\n\t\tmax = max - 1;\r\n\t\tif (val <= max) {\r\n\t\t\tif (val >= min) return val;\r\n\t\t\telse return min;\r\n\t\t} else {\r\n\t\t\treturn max;\r\n\t\t}\r\n\t}","    import { SongTagCode, CharCode, } from \"./tagCodes\";\r\n    import { Config, Dictionary, InstrumentType } from \"./SynthConfig\";\r\n\timport { clamp } from \"./usefulFunctions\";\r\n    \r\n    export class BitFieldReader {\r\n        private _bits: number[] = [];\r\n        private _readIndex: number = 0;\r\n        \r\n        constructor(base64CharCodeToInt: ReadonlyArray<number>, source: string, startIndex: number, stopIndex: number) {\r\n            for (let i: number = startIndex; i < stopIndex; i++) {\r\n                const value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n                this._bits.push((value >> 5) & 0x1);\r\n                this._bits.push((value >> 4) & 0x1);\r\n                this._bits.push((value >> 3) & 0x1);\r\n                this._bits.push((value >> 2) & 0x1);\r\n                this._bits.push((value >> 1) & 0x1);\r\n                this._bits.push( value       & 0x1);\r\n            }\r\n        }\r\n        \r\n        public read(bitCount: number): number {\r\n            let result: number = 0;\r\n            while (bitCount > 0) {\r\n                result = result << 1;\r\n                result += this._bits[this._readIndex++];\r\n                bitCount--;\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        public readLongTail(minValue: number, minBits: number): number {\r\n            let result: number = minValue;\r\n            let numBits: number = minBits;\r\n            while (this._bits[this._readIndex++]) {\r\n                result += 1 << numBits;\r\n                numBits++;\r\n            }\r\n            while (numBits > 0) {\r\n                numBits--;\r\n                if (this._bits[this._readIndex++]) {\r\n                    result += 1 << numBits;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        public readPartDuration(): number {\r\n            return this.readLongTail(1, 2);\r\n        }\r\n        \r\n        public readPinCount(): number {\r\n            return this.readLongTail(1, 0);\r\n        }\r\n        \r\n        public readPitchInterval(): number {\r\n            if (this.read(1)) {\r\n                return -this.readLongTail(1, 3);\r\n            } else {\r\n                return this.readLongTail(1, 3);\r\n            }\r\n        }\r\n    }\r\n    \r\n    export class BitFieldWriter {\r\n        private _bits: number[] = [];\r\n        \r\n        public write(bitCount: number, value: number): void {\r\n            bitCount--;\r\n            while (bitCount >= 0) {\r\n                this._bits.push((value >>> bitCount) & 1);\r\n                bitCount--;\r\n            }\r\n        }\r\n        \r\n        public writeLongTail(minValue: number, minBits: number, value: number): void {\r\n            if (value < minValue) throw new Error(\"value out of bounds\");\r\n            value -= minValue;\r\n            let numBits: number = minBits;\r\n            while (value >= (1 << numBits)) {\r\n                this._bits.push(1);\r\n                value -= 1 << numBits;\r\n                numBits++;\r\n            }\r\n            this._bits.push(0);\r\n            while (numBits > 0) {\r\n                numBits--;\r\n                this._bits.push((value >>> numBits) & 1);\r\n            }\r\n        }\r\n        \r\n        public writePartDuration(value: number): void {\r\n            this.writeLongTail(1, 2, value);\r\n        }\r\n        \r\n        public writePinCount(value: number): void {\r\n            this.writeLongTail(1, 0, value);\r\n        }\r\n        \r\n        public writePitchInterval(value: number): void {\r\n            if (value < 0) {\r\n                this.write(1, 1); // sign\r\n                this.writeLongTail(1, 3, -value);\r\n            } else {\r\n                this.write(1, 0); // sign\r\n                this.writeLongTail(1, 3, value);\r\n            }\r\n        }\r\n        \r\n        public concat(other: BitFieldWriter): void {\r\n            this._bits = this._bits.concat(other._bits);\r\n        }\r\n        \r\n        public encodeBase64(base64IntToCharCode: ReadonlyArray<number>, buffer: number[]): number[] {\r\n            for (let i: number = 0; i < this._bits.length; i += 6) {\r\n                const value: number = (this._bits[i] << 5) | (this._bits[i+1] << 4) | (this._bits[i+2] << 3) | (this._bits[i+3] << 2) | (this._bits[i+4] << 1) | this._bits[i+5];\r\n                buffer.push(base64IntToCharCode[value]);\r\n            }\r\n            return buffer;\r\n        }\r\n        \r\n        public lengthBase64(): number {\r\n            return Math.ceil(this._bits.length / 6);\r\n        }\r\n    }\r\n\r\n\texport class Operator {\r\n\t\tpublic frequency: number = 0;\r\n\t\tpublic amplitude: number = 0;\r\n\t\tpublic envelope: number = 0;\r\n\t\t\r\n\t\tconstructor(index: number) {\r\n\t\t\tthis.reset(index);\r\n\t\t}\r\n\t\t\r\n\t\tpublic reset(index: number): void {\r\n\t\t\tthis.frequency = 0;\r\n\t\t\tthis.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n\t\t\tthis.envelope = 1;\r\n\t\t}\r\n\t\t\r\n\t\tpublic copy(other: Operator): void {\r\n\t\t\tthis.frequency = other.frequency;\r\n\t\t\tthis.amplitude = other.amplitude;\r\n\t\t\tthis.envelope = other.envelope;\r\n\t\t}\r\n\t}   \r\n\r\n    export interface NotePin {\r\n\t\tinterval: number;\r\n\t\ttime: number;\r\n\t\tvolume: number;\r\n\t}\r\n\t\r\n\texport function makeNotePin(interval: number, time: number, volume: number): NotePin {\r\n\t\treturn {interval: interval, time: time, volume: volume};\r\n\t}\r\n\t\r\n\texport interface Note {\r\n\t\tpitches: number[];\r\n\t\tpins: NotePin[];\r\n\t\tstart: number;\r\n\t\tend: number;\r\n\t}\r\n\t\r\n\texport function makeNote(pitch: number, start: number, end: number, volume: number, fadeout: boolean = false) {\r\n\t\treturn {\r\n\t\t\tpitches: [pitch],\r\n\t\t\tpins: [makeNotePin(0, 0, volume), makeNotePin(0, end - start, fadeout ? 0 : volume)],\r\n\t\t\tstart: start,\r\n\t\t\tend: end,\r\n\t\t};\r\n\t}\r\n\r\nexport class Instrument {\r\n\t\tpublic type: InstrumentType = 0;\r\n\t\tpublic wave: number = 1;\r\n\t\tpublic filter: number = 1;\r\n\t\tpublic transition: number = 1;\r\n\t\tpublic effect: number = 0;\r\n\t\tpublic harm: number = 0;\r\n\t\tpublic fmChorus: number = 1;\r\n\t\tpublic imute: number = 0;\r\n\t\tpublic octoff: number = 0;\r\n\t\tpublic chorus: number = 0;\r\n\t\tpublic volume: number = 0;\r\n\t\tpublic ipan: number = 4;\r\n\t\tpublic algorithm: number = 0;\r\n\t\tpublic feedbackType: number = 0;\r\n\t\tpublic feedbackAmplitude: number = 0;\r\n\t\tpublic feedbackEnvelope: number = 1;\r\n\t\tpublic readonly operators: Operator[] = [];\r\n\t\t\r\n\t\tconstructor() {\r\n\t\t\tfor (let i = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\tthis.operators.push(new Operator(i));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic reset(): void {\r\n\t\t\tthis.type = 0;\r\n\t\t\tthis.wave = 1;\r\n\t\t\tthis.filter = 1;\r\n\t\t\tthis.transition = 1;\r\n\t\t\tthis.effect = 0;\r\n\t\t\tthis.harm = 0;\r\n\t\t\tthis.fmChorus = 1;\r\n\t\t\tthis.imute = 0;\r\n\t\t\tthis.ipan = 4;\r\n\t\t\tthis.octoff = 0;\r\n\t\t\tthis.chorus = 0;\r\n\t\t\tthis.volume = 0;\r\n\t\t\tthis.algorithm = 0;\r\n\t\t\tthis.feedbackType = 0;\r\n\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\tthis.feedbackEnvelope = 1;\r\n\t\t\tfor (let i: number = 0; i < this.operators.length; i++) {\r\n\t\t\t\tthis.operators[i].reset(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic setTypeAndReset(type: InstrumentType): void {\r\n\t\t\tthis.type = type;\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase InstrumentType.chip:\r\n\t\t\t\t\tthis.wave = 1;\r\n\t\t\t\t\tthis.filter = 1;\r\n\t\t\t\t\tthis.transition = 1;\r\n\t\t\t\t\tthis.effect = 0;\r\n\t\t\t\t\tthis.harm = 0;\r\n\t\t\t\t\tthis.imute = 0;\r\n\t\t\t\t\tthis.ipan = 4;\r\n\t\t\t\t\tthis.octoff = 0;\r\n\t\t\t\t\tthis.chorus = 0;\r\n\t\t\t\t\tthis.volume = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t// @TODO: Investigate whether this being incorrect leads to\r\n\t\t\t\t// any observable issues.\r\n\t\t\t\tcase InstrumentType.fm:\r\n\t\t\t\t\tthis.wave = 1;\r\n\t\t\t\t\tthis.transition = 1;\r\n\t\t\t\t\tthis.volume = 0;\r\n\t\t\t\t\tthis.imute = 0;\r\n\t\t\t\t\tthis.ipan = 4;\r\n\t\t\t\t\tthis.harm = 0;\r\n\t\t\t\t\tthis.octoff = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase InstrumentType.noise:\r\n\t\t\t\t\tthis.transition = 1;\r\n\t\t\t\t\tthis.octoff = 0;\r\n\t\t\t\t\tthis.fmChorus = 1;\r\n\t\t\t\t\tthis.ipan = 4;\r\n\t\t\t\t\tthis.effect = 0;\r\n\t\t\t\t\tthis.algorithm = 0;\r\n\t\t\t\t\tthis.feedbackType = 0;\r\n\t\t\t\t\tthis.feedbackAmplitude = 0;\r\n\t\t\t\t\tthis.feedbackEnvelope = 1;\r\n\t\t\t\t\tthis.volume = 0;\r\n\t\t\t\t\tfor (let i: number = 0; i < this.operators.length; i++) {\r\n\t\t\t\t\t\tthis.operators[i].reset(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase InstrumentType.pwm:\r\n\t\t\t\t\tthis.wave = 1;\r\n\t\t\t\t\tthis.filter = 1;\r\n\t\t\t\t\tthis.transition = 1;\r\n\t\t\t\t\tthis.effect = 0;\r\n\t\t\t\t\tthis.harm = 0;\r\n\t\t\t\t\tthis.imute = 0;\r\n\t\t\t\t\tthis.ipan = 4;\r\n\t\t\t\t\tthis.octoff = 0;\r\n\t\t\t\t\tthis.chorus = 0;\r\n\t\t\t\t\tthis.volume = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic copy(other: Instrument): void {\r\n\t\t\tthis.type = other.type;\r\n\t\t\tthis.wave = other.wave;\r\n\t\t\tthis.filter = other.filter;\r\n\t\t\tthis.transition = other.transition;\r\n\t\t\tthis.effect = other.effect;\r\n\t\t\tthis.chorus = other.chorus;\r\n\t\t\tthis.volume = other.volume;\r\n\t\t\tthis.harm = other.harm;\r\n\t\t\tthis.fmChorus = other.fmChorus;\r\n\t\t\tthis.imute = other.imute;\r\n\t\t\tthis.ipan = other.ipan;\r\n\t\t\tthis.octoff = other.octoff;\r\n\t\t\tthis.algorithm = other.algorithm;\r\n\t\t\tthis.feedbackType = other.feedbackType;\r\n\t\t\tthis.feedbackAmplitude = other.feedbackAmplitude;\r\n\t\t\tthis.feedbackEnvelope = other.feedbackEnvelope;\r\n\t\t\tfor (let i: number = 0; i < this.operators.length; i++) {\r\n\t\t\t\tthis.operators[i].copy(other.operators[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*public getChord(): Chord {\r\n\t\t\treturn this.type == InstrumentType.noise ? Config.harmDisplay[2] : Config.harmDisplay[this.harm];\r\n\t\t}*/\r\n\t}\r\n\r\n    export class Channel {\r\n\t\tpublic octave: number = 0;\r\n\t\tpublic readonly instruments: Instrument[] = [];\r\n\t\tpublic readonly patterns: Pattern[] = [];\r\n\t\tpublic readonly bars: number[] = [];\r\n\t}\r\n\t\r\n\texport class Pattern {\r\n\t\tpublic notes: Note[] = [];\r\n\t\tpublic instrument: number = 0;\r\n\t\t\r\n\t\tpublic cloneNotes(): Note[] {\r\n\t\t\tconst result: Note[] = [];\r\n\t\t\tfor (const oldNote of this.notes) {\r\n\t\t\t\tconst newNote: Note = makeNote(-1, oldNote.start, oldNote.end, 3);\r\n\t\t\t\tnewNote.pitches = oldNote.pitches.concat();\r\n\t\t\t\tnewNote.pins = [];\r\n\t\t\t\tfor (const oldPin of oldNote.pins) {\r\n\t\t\t\t\tnewNote.pins.push(makeNotePin(oldPin.interval, oldPin.time, oldPin.volume));\r\n\t\t\t\t}\r\n\t\t\t\tresult.push(newNote);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tpublic reset(): void {\r\n\t\t\tthis.notes.length = 0;\r\n\t\t\tthis.instrument = 0;\r\n\t\t}\r\n\t}\r\n\r\n    export class Song {\r\n\t\tprivate static readonly _format: string = \"NepBox\";\r\n\r\n\t\tprivate static readonly _oldestBeepboxVersion: number = 2;\r\n\t\tprivate static readonly _latestBeepboxVersion: number = 6;\r\n\t\tprivate static readonly _oldestNepBoxVersion: number = 1;\r\n\t\tprivate static readonly _latestNepBoxVersion: number = 1;\r\n\t\tprivate static readonly _variant = 0x6E; //\"N\" ~ nepbox\r\n\r\n\t\tprivate static readonly _base64CharCodeToInt: ReadonlyArray<number> = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,63,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,0,0,0,0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\t\tprivate static readonly _base64IntToCharCode: ReadonlyArray<number> = [48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,45,95];\r\n\t\t\r\n\t\tpublic scale: number;\r\n\t\tpublic setSongTheme: string;\r\n\t\tpublic key: number;\r\n\t\tpublic mix: number;\r\n\t\tpublic sampleRate: number;\r\n\t\tpublic tempo: number;\r\n\t\tpublic reverb: number;\r\n\t\tpublic blend: number;\r\n\t\tpublic riff: number;\r\n\t\tpublic detune: number;\r\n\t\tpublic muff: number;\r\n\t\tpublic beatsPerBar: number;\r\n\t\tpublic barCount: number;\r\n\t\tpublic patternsPerChannel: number;\r\n\t\tpublic partsPerBeat: number;\r\n\t\tpublic instrumentsPerChannel: number;\r\n\t\tpublic loopStart: number;\r\n\t\tpublic loopLength: number;\r\n\t\tpublic pitchChannelCount: number;\r\n\t\tpublic drumChannelCount: number;\r\n\t\tpublic readonly channels: Channel[] = [];\r\n\t\t\r\n\t\tconstructor(string?: string) {\r\n\t\t\tif (string != undefined) {\r\n\t\t\t\tthis.fromBase64String(string);\r\n\t\t\t} else {\r\n\t\t\t\tthis.initToDefault(true);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic getChannelCount(): number {\r\n\t\t\treturn this.pitchChannelCount + this.drumChannelCount;\r\n\t\t}\r\n\r\n\t\tpublic getChannelUnusedCount(): number {\r\n\t\t\treturn (Config.pitchChannelCountMax + Config.drumChannelCountMax) - (this.pitchChannelCount + this.drumChannelCount);\r\n\t\t}\r\n\r\n\t\tpublic getTimeSig(): string {\r\n\t\t\treturn this.beatsPerBar + \"/\" + this.partsPerBeat + \" with \" + this.barCount + \" bars.\";\r\n\t\t}\r\n\r\n\t\tpublic getScaleNKey(): string {\r\n\t\t\treturn ' \"' + Config.scales[this.scale].name + '\" and your key is ' + Config.keys[this.key].name;\r\n\t\t}\r\n\t\t\r\n\t\tpublic getChannelIsDrum(channel: number): boolean {\r\n\t\t\treturn (channel >= this.pitchChannelCount);\r\n\t\t}\r\n\t\t\r\n\t\tpublic getChannelColorDim(channel: number): string {\r\n\t\t\treturn channel < this.pitchChannelCount ? Config.pitchChannelColorsDim[channel] : Config.drumChannelColorsDim[channel - this.pitchChannelCount];\r\n\t\t}\r\n\t\tpublic getChannelColorBright(channel: number): string {\r\n\t\t\treturn channel < this.pitchChannelCount ? Config.pitchChannelColorsBright[channel] : Config.drumChannelColorsBright[channel - this.pitchChannelCount];\r\n\t\t}\r\n\t\tpublic getNoteColorDim(channel: number): string {\r\n\t\t\treturn channel < this.pitchChannelCount ? Config.pitchNoteColorsDim[channel] : Config.drumNoteColorsDim[channel - this.pitchChannelCount];\r\n\t\t}\r\n\t\tpublic getNoteColorBright(channel: number): string {\r\n\t\t\treturn channel < this.pitchChannelCount ? Config.pitchNoteColorsBright[channel] : Config.drumNoteColorsBright[channel - this.pitchChannelCount];\r\n\t\t}\r\n\t\t\r\n\t\tpublic initToDefault(andResetChannels: boolean = true): void {\r\n\t\t\tthis.scale = 0;\r\n\t\t\tthis.setSongTheme = \"none\";\r\n\t\t\tthis.key = Config.keys.map(key=>key.name).indexOf(\"C\");\r\n\t\t\tthis.mix = 1;\r\n\t\t\tthis.sampleRate = 2;\r\n\t\t\tthis.loopStart = 0;\r\n\t\t\tthis.loopLength = 4;\r\n\t\t\tthis.tempo = 7;\r\n\t\t\tthis.reverb = 0;\r\n\t\t\tthis.blend = 0;\r\n\t\t\tthis.riff = 0;\r\n\t\t\tthis.detune = 0;\r\n\t\t\tthis.muff = 0;\r\n\t\t\tthis.beatsPerBar = 8;\r\n\t\t\tthis.barCount = 16;\r\n\t\t\tthis.patternsPerChannel = 8;\r\n\t\t\tthis.partsPerBeat = 4;\r\n\t\t\tthis.instrumentsPerChannel = 1;\r\n\t\t\t\r\n\t\t\tif (andResetChannels) {\r\n\t\t\t\tthis.pitchChannelCount = 4;\r\n\t\t\t\tthis.drumChannelCount = 1;\r\n\t\t\t\tfor (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\t\tif (this.channels.length <= channelIndex) {\r\n\t\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst channel: Channel = this.channels[channelIndex];\r\n\t\t\t\t\tchannel.octave = 4 - channelIndex; // [4, 3, 2, 1, 0]; Descending octaves with drums at zero in last channel.\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\t\tif (channel.patterns.length <= pattern) {\r\n\t\t\t\t\t\t\tchannel.patterns[pattern] = new Pattern();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tchannel.patterns[pattern].reset();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchannel.patterns.length = this.patternsPerChannel;\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let instrument = 0; instrument < this.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\t\tif (channel.instruments.length <= instrument) {\r\n\t\t\t\t\t\t\tchannel.instruments[instrument] = new Instrument();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tchannel.instruments[instrument].reset();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchannel.instruments.length = this.instrumentsPerChannel;\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let bar = 0; bar < this.barCount; bar++) {\r\n\t\t\t\t\t\tchannel.bars[bar] = bar < 4 ? 1 : 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchannel.bars.length = this.barCount;\r\n\t\t\t\t}\r\n\t\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic toBase64String(): string {\r\n\t\t\tlet bits: BitFieldWriter;\r\n\t\t\tlet buffer: number[] = [];\r\n\t\t\t\r\n\t\t\tconst base64IntToCharCode: ReadonlyArray<number> = Song._base64IntToCharCode;\r\n\t\t\t\r\n\t\t\tbuffer.push(Song._variant);\r\n\t\t\tbuffer.push(base64IntToCharCode[Song._latestNepBoxVersion]);\r\n\r\n\r\n\r\n\t\t\tbuffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.drumChannelCount]);\r\n\r\n\t\t\tbuffer.push(SongTagCode.setSongTheme);\r\n\t\t\tvar encodedSongTheme: string = encodeURIComponent(this.setSongTheme);\r\n        \tbuffer.push(base64IntToCharCode[encodedSongTheme.length >> 6], base64IntToCharCode[encodedSongTheme.length & 0x3f]);\r\n\t\t\t// Actual encoded string follows\r\n\t\t\tfor (let i: number = 0; i < encodedSongTheme.length; i++) {\r\n\t\t\t\tbuffer.push(encodedSongTheme.charCodeAt(i));\r\n\t\t\t}\r\n\r\n\t\t\tbuffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n\t\t\tbuffer.push(SongTagCode.mix, base64IntToCharCode[this.mix]);\r\n\t\t\tbuffer.push(SongTagCode.sampleRate, base64IntToCharCode[this.sampleRate]);\r\n\t\t\tbuffer.push(SongTagCode.key, base64IntToCharCode[this.key]);\r\n\t\t\tbuffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n\t\t\tbuffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n\t\t\tbuffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo]);\r\n\t\t\tbuffer.push(SongTagCode.reverb, base64IntToCharCode[this.reverb]);\r\n\t\t\tbuffer.push(SongTagCode.blend, base64IntToCharCode[this.blend]);\r\n\t\t\tbuffer.push(SongTagCode.riff, base64IntToCharCode[this.riff]);\r\n\t\t\tbuffer.push(SongTagCode.detune, base64IntToCharCode[this.detune]);\r\n\t\t\tbuffer.push(SongTagCode.muff, base64IntToCharCode[this.muff]);\r\n\t\t\tbuffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n\t\t\tbuffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n\t\t\tbuffer.push(SongTagCode.patternCount, base64IntToCharCode[this.patternsPerChannel - 1]);\r\n\t\t\tbuffer.push(SongTagCode.instrumentCount, base64IntToCharCode[this.instrumentsPerChannel - 1]);\r\n\t\t\tbuffer.push(SongTagCode.rhythm, base64IntToCharCode[Config.partCounts.indexOf(this.partsPerBeat)]);\r\n\t\t\t\r\n\t\t\tbuffer.push(SongTagCode.channelOctave);\r\n\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\tbuffer.push(base64IntToCharCode[this.channels[channel].octave]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (channel < this.pitchChannelCount) {\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n\t\t\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\t\t\t// chip\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.wave]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.filter, base64IntToCharCode[instrument.filter]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.effect, base64IntToCharCode[instrument.effect]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.harm, base64IntToCharCode[instrument.harm]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.imute, base64IntToCharCode[instrument.imute]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.ipan, base64IntToCharCode[instrument.ipan]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.octoff, base64IntToCharCode[instrument.octoff]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.chorus,base64IntToCharCode[instrument.chorus]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[instrument.volume]);\r\n\t\t\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\t// FM\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.effect, base64IntToCharCode[instrument.effect]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.octoff, base64IntToCharCode[instrument.octoff]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.fmChorus, base64IntToCharCode[instrument.fmChorus]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.imute, base64IntToCharCode[instrument.imute]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.ipan, base64IntToCharCode[instrument.ipan]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.feedbackEnvelope, base64IntToCharCode[instrument.feedbackEnvelope]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[instrument.volume]);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.operatorFrequencies);\r\n\t\t\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.operatorAmplitudes);\r\n\t\t\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.operatorEnvelopes);\r\n\t\t\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.operators[o].envelope]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.wave]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.filter, base64IntToCharCode[instrument.filter]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.effect, base64IntToCharCode[instrument.effect]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.harm, base64IntToCharCode[instrument.harm]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.imute, base64IntToCharCode[instrument.imute]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.ipan, base64IntToCharCode[instrument.ipan]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.octoff, base64IntToCharCode[instrument.octoff]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.chorus, base64IntToCharCode[instrument.chorus]);\r\n\t\t\t\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[instrument.volume]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(\"Unknown instrument type.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// NOISE\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.startInstrument, base64IntToCharCode[InstrumentType.noise]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.wave, base64IntToCharCode[instrument.wave]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.volume, base64IntToCharCode[instrument.volume]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.imute, base64IntToCharCode[instrument.imute]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.harm, base64IntToCharCode[instrument.harm]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.octoff, base64IntToCharCode[instrument.octoff]);\r\n\t\t\t\t\t\tbuffer.push(SongTagCode.ipan, base64IntToCharCode[instrument.ipan]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tbuffer.push(SongTagCode.bars);\r\n\t\t\tbits = new BitFieldWriter();\r\n\t\t\tlet neededBits: number = 0;\r\n\t\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) for (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\tbits.write(neededBits, this.channels[channel].bars[i]);\r\n\t\t\t}\r\n\t\t\tbits.encodeBase64(base64IntToCharCode, buffer);\r\n\t\t\t\r\n\t\t\tbuffer.push(SongTagCode.patterns);\r\n\t\t\tbits = new BitFieldWriter();\r\n\t\t\tlet neededInstrumentBits: number = 0;\r\n\t\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\tconst isDrum: boolean = this.getChannelIsDrum(channel);\r\n\t\t\t\tconst octaveOffset: number = isDrum ? 0 : this.channels[channel].octave * 12;\r\n\t\t\t\tlet lastPitch: number = (isDrum ? 4 : 12) + octaveOffset;\r\n\t\t\t\tconst recentPitches: number[] = isDrum ? [4,6,7,2,3,8,0,10] : [12, 19, 24, 31, 36, 7, 0];\r\n\t\t\t\tconst recentShapes: string[] = [];\r\n\t\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t\t}\r\n\t\t\t\tfor (const p of this.channels[channel].patterns) {\r\n\t\t\t\t\tbits.write(neededInstrumentBits, p.instrument);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (p.notes.length > 0) {\r\n\t\t\t\t\t\tbits.write(1, 1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\t\tfor (const t of p.notes) {\r\n\t\t\t\t\t\t\tif (t.start > curPart) {\r\n\t\t\t\t\t\t\t\tbits.write(2, 0); // rest\r\n\t\t\t\t\t\t\t\tbits.writePartDuration(t.start - curPart);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tconst shapeBits: BitFieldWriter = new BitFieldWriter();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n\t\t\t\t\t\t\tfor (let i: number = 1; i < t.pitches.length; i++) shapeBits.write(1,1);\r\n\t\t\t\t\t\t\tif (t.pitches.length < 4) shapeBits.write(1,0);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tshapeBits.writePinCount(t.pins.length - 1);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tshapeBits.write(2, t.pins[0].volume); // volume\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlet shapePart: number = 0;\r\n\t\t\t\t\t\t\tlet startPitch: number = t.pitches[0];\r\n\t\t\t\t\t\t\tlet currentPitch: number = startPitch;\r\n\t\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\t\tfor (let i: number = 1; i < t.pins.length; i++) {\r\n\t\t\t\t\t\t\t\tconst pin: NotePin = t.pins[i];\r\n\t\t\t\t\t\t\t\tconst nextPitch: number = startPitch + pin.interval;\r\n\t\t\t\t\t\t\t\tif (currentPitch != nextPitch) {\r\n\t\t\t\t\t\t\t\t\tshapeBits.write(1, 1);\r\n\t\t\t\t\t\t\t\t\tpitchBends.push(nextPitch);\r\n\t\t\t\t\t\t\t\t\tcurrentPitch = nextPitch;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tshapeBits.write(1, 0);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tshapeBits.writePartDuration(pin.time - shapePart);\r\n\t\t\t\t\t\t\t\tshapePart = pin.time;\r\n\t\t\t\t\t\t\t\tshapeBits.write(2, pin.volume);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tconst shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64(base64IntToCharCode, []));\r\n\t\t\t\t\t\t\tconst shapeIndex: number = recentShapes.indexOf(shapeString);\r\n\t\t\t\t\t\t\tif (shapeIndex == -1) {\r\n\t\t\t\t\t\t\t\tbits.write(2, 1); // new shape\r\n\t\t\t\t\t\t\t\tbits.concat(shapeBits);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbits.write(1, 1); // old shape\r\n\t\t\t\t\t\t\t\tbits.writeLongTail(0, 0, shapeIndex);\r\n\t\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\trecentShapes.unshift(shapeString);\r\n\t\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tconst allPitches: number[] = t.pitches.concat(pitchBends);\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < allPitches.length; i++) {\r\n\t\t\t\t\t\t\t\tconst pitch: number = allPitches[i];\r\n\t\t\t\t\t\t\t\tconst pitchIndex: number = recentPitches.indexOf(pitch);\r\n\t\t\t\t\t\t\t\tif (pitchIndex == -1) {\r\n\t\t\t\t\t\t\t\t\tlet interval: number = 0;\r\n\t\t\t\t\t\t\t\t\tlet pitchIter: number = lastPitch;\r\n\t\t\t\t\t\t\t\t\tif (pitchIter < pitch) {\r\n\t\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitchIter++;\r\n\t\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\twhile (pitchIter != pitch) {\r\n\t\t\t\t\t\t\t\t\t\t\tpitchIter--;\r\n\t\t\t\t\t\t\t\t\t\t\tif (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t\t\t\t\t\tbits.writePitchInterval(interval);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tbits.write(1, 1);\r\n\t\t\t\t\t\t\t\t\tbits.write(3, pitchIndex);\r\n\t\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\t\tif (recentPitches.length > 8) recentPitches.pop();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (i == t.pitches.length - 1) {\r\n\t\t\t\t\t\t\t\t\tlastPitch = t.pitches[0];\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcurPart = t.end;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (curPart < this.beatsPerBar * this.partsPerBeat) {\r\n\t\t\t\t\t\t\tbits.write(2, 0); // rest\r\n\t\t\t\t\t\t\tbits.writePartDuration(this.beatsPerBar * this.partsPerBeat - curPart);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbits.write(1, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet stringLength: number = bits.lengthBase64();\r\n\t\t\tlet digits: number[] = [];\r\n\t\t\twhile (stringLength > 0) {\r\n\t\t\t\tdigits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n\t\t\t\tstringLength = stringLength >> 6;\r\n\t\t\t}\r\n\t\t\tbuffer.push(base64IntToCharCode[digits.length]);\r\n\t\t\tArray.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n\t\t\tbits.encodeBase64(base64IntToCharCode, buffer);\r\n\t\t\t\r\n\t\t\t// HACK: This breaks for strings longer than 65535. \r\n\t\t\tif (buffer.length >= 65535) throw new Error(\"Song hash code too long.\");\r\n\t\t\treturn String.fromCharCode.apply(null, buffer);\r\n\t\t}\r\n\t\t\r\n\t\tpublic fromBase64String(compressed: string): void {\r\n\t\t\tif (compressed == null || compressed == \"\") {\r\n\t\t\t\tthis.initToDefault(true);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlet charIndex: number = 0;\r\n\t\t\t// skip whitespace.\r\n\t\t\twhile (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n\t\t\t// skip hash mark.\r\n\t\t\tif (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n\t\t\t// if it starts with curly brace, treat it as JSON.\r\n\t\t\tif (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n\t\t\t\tthis.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst variantTest: number = compressed.charCodeAt(charIndex);\r\n        \tlet fromOld: boolean;\r\n        \tlet fromNepBox: boolean;\r\n\r\n\t\t\t// Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n\t\t\tif (variantTest == 0x6E) { //\"n\"\r\n\t\t\t\tfromOld = false;\r\n\t\t\t\tfromNepBox = true;\r\n\t\t\t\tcharIndex++;\r\n\t\t\t} else {\r\n\t\t\t\tfromOld = true;\r\n\t\t\t\tfromNepBox = false;\r\n\t\t\t}\r\n\r\n\t\t\tconst version: number = Song._base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\tif (fromOld && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n\t\t\tif (fromNepBox && (version == -1 || version > Song._latestNepBoxVersion || version < Song._oldestNepBoxVersion)) return;\r\n\t\t\t//const beforeTwo:   boolean = version < 2;\r\n\t\t\tconst beforeThree: boolean = version < 3;\r\n\t\t\tconst beforeFour:  boolean = version < 4;\r\n\t\t\tconst beforeFive:  boolean = version < 5;\r\n\t\t\tconst beforeSix:   boolean = version < 6;\r\n\t\t\tconst base64CharCodeToInt: ReadonlyArray<number> = Song._base64CharCodeToInt;\r\n\t\t\tthis.initToDefault((fromOld && beforeSix) || (fromNepBox));\r\n\t\t\t\r\n\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t// Originally, the only instrument transition was \"seamless\" and the only drum wave was \"retro\".\r\n\t\t\t\tfor (const channel of this.channels) channel.instruments[0].transition = 0;\r\n\t\t\t\tthis.channels[3].instruments[0].wave = 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet instrumentChannelIterator: number = 0;\r\n\t\t\tlet instrumentIndexIterator: number = -1;\r\n\t\t\t\r\n\t\t\twhile (charIndex < compressed.length) {\r\n\t\t\t\tconst command: number = compressed.charCodeAt(charIndex++);\r\n\t\t\t\tlet channel: number;\r\n\t\t\t\tif (command == SongTagCode.channelCount) {\r\n\t\t\t\t\tthis.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.drumChannelCount  = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.pitchChannelCount = clamp(Config.pitchChannelCountMin, Config.pitchChannelCountMax + 1, this.pitchChannelCount);\r\n\t\t\t\t\tthis.drumChannelCount = clamp(Config.drumChannelCountMin, Config.drumChannelCountMax + 1, this.drumChannelCount);\r\n\t\t\t\t\tfor (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n\t\t\t\t\t\tthis.channels[channelIndex] = new Channel();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t\t\t} else if (command == SongTagCode.scale) {\r\n\t\t\t\t\tthis.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tif ((fromOld && beforeThree) && this.scale == 10) this.scale = 11;\r\n\t\t\t\t} else if (command == SongTagCode.mix) {\r\n\t\t\t\t\tthis.mix = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else if (command == SongTagCode.key) {\r\n\t\t\t\t\t\tthis.key = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else if (command == SongTagCode.setSongTheme) {\r\n\t\t\t\t\tif (fromOld) {\r\n\t\t\t\t\t\tvar themeIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tvar themes = [\"none\", \"modbox2\", \"artic\", \"Cinnamon Roll\", \"Ocean\", \"rainbow\", \"float\", \"windows\", \"grassland\", \"dessert\", \"kahootiest\", \"beambit\", \"egg\", \"Poniryoshka\", \"gameboy\", \"woodkid\", \"midnight\", \"snedbox\", \"unnamed\", \"piano\", \"halloween\", \"frozen\"];\r\n\t\t\t\t\t\tthis.setSongTheme = themes[themeIndex];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar songThemeLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.setSongTheme = decodeURIComponent(compressed.substring(charIndex, charIndex + songThemeLength));\r\n\t\t\t\t\t\tcharIndex += songThemeLength;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.loopStart) {\r\n\t\t\t\t\tif (fromOld && beforeFive) {\r\n\t\t\t\t\t\tthis.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.loopEnd) {\r\n\t\t\t\t\tif (fromOld && beforeFive) {\r\n\t\t\t\t\t\tthis.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.tempo) {\r\n\t\t\t\t\tif (fromOld && beforeFour) {\r\n\t\t\t\t\t\tthis.tempo = [1, 4, 7, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.tempo = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.tempo = clamp(0, Config.tempoSteps, this.tempo);\r\n\t\t\t\t} else if (command == SongTagCode.reverb) {\r\n\t\t\t\t\tthis.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n\t\t\t\t} else if (command == SongTagCode.blend) {\r\n\t\t\t\t\tthis.blend = clamp(0, Config.blendRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.riff) {\r\n\t\t\t\t\tthis.riff = clamp(0, Config.riffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.sampleRate) {\r\n\t\t\t\t\tthis.sampleRate = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t} else if (command == SongTagCode.detune) {\r\n\t\t\t\t\tthis.detune = clamp(0, Config.detuneRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.muff) {\r\n\t\t\t\t\tthis.muff = clamp(0, Config.muffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.beatCount) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tthis.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n\t\t\t\t} else if (command == SongTagCode.barCount) {\r\n\t\t\t\t\tthis.barCount = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t\tthis.barCount = Math.max(Config.barCountMin, Math.min(Config.barCountMax, this.barCount));\r\n\t\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let bar = this.channels[channel].bars.length; bar < this.barCount; bar++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[bar] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.channels[channel].bars.length = this.barCount;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.patternCount) {\r\n\t\t\t\t\tthis.patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t\tthis.patternsPerChannel = Math.max(1, Math.min(Config.barCountMax, this.patternsPerChannel));\r\n\t\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let pattern = this.channels[channel].patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].patterns[pattern] = new Pattern();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.channels[channel].patterns.length = this.patternsPerChannel;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.instrumentCount) {\r\n\t\t\t\t\tthis.instrumentsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n\t\t\t\t\tthis.instrumentsPerChannel = Math.max(Config.instrumentsPerChannelMin, Math.min(Config.instrumentsPerChannelMax, this.instrumentsPerChannel));\r\n\t\t\t\t\tfor (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\tfor (let instrument = this.channels[channel].instruments.length; instrument < this.instrumentsPerChannel; instrument++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].instruments[instrument] = new Instrument();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.channels[channel].instruments.length = this.instrumentsPerChannel;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.rhythm) {\r\n\t\t\t\t\tthis.partsPerBeat = Config.partCounts[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n\t\t\t\t} else if (command == SongTagCode.channelOctave) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].octave = clamp(0, 5, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].octave = clamp(0, 5, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.startInstrument) {\r\n\t\t\t\t\tinstrumentIndexIterator++;\r\n\t\t\t\t\tif (instrumentIndexIterator >= this.instrumentsPerChannel) {\r\n\t\t\t\t\t\tinstrumentChannelIterator++;\r\n\t\t\t\t\t\tinstrumentIndexIterator = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst isPitchChannel: boolean = instrumentChannelIterator < this.pitchChannelCount;\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\t\t\t\t\tconst rawInstrumentType: number = clamp(0, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\tlet instrumentType: number = rawInstrumentType;\r\n\t\t\t\t\tif (instrumentType == InstrumentType.noise && isPitchChannel) {\r\n\t\t\t\t\t\tinstrumentType = InstrumentType.pwm;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinstrument.setTypeAndReset(instrumentType);\r\n\t\t\t\t} else if (command == SongTagCode.wave) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].wave = clamp(0, Config.waveNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tconst isDrums = (channel >= this.pitchChannelCount);\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].wave = clamp(0, isDrums ? Config.drumNames.length : Config.waveNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst isDrums = (instrumentChannelIterator >= this.pitchChannelCount);\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].wave = clamp(0, isDrums ? Config.drumNames.length : Config.waveNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.filter) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].filter = [1, 3, 4, 5][clamp(0, Config.filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].filter = clamp(0, Config.filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].filter = clamp(0, Config.filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.transition) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].transition = clamp(0, Config.transitionNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].transition = clamp(0, Config.transitionNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitionNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.effect) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tlet effect: number = clamp(0, Config.effectNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\tif (effect == 1) effect = 3;\r\n\t\t\t\t\t\telse if (effect == 3) effect = 5;\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].effect = effect;\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].effect = clamp(0, Config.effectNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].effect = clamp(0, Config.effectNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.chorus) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].chorus = clamp(0, Config.chorusNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].chorus = clamp(0, Config.chorusNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chorus = clamp(0, Config.chorusNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.harm) {\r\n\t\t\t\t\t// Harmony was added in this commit: https://github.com/ModdedBeepbox/modded-beepbox-2.3/commit/cd1cc3d1891eda506e77e7619822ec2a48f375f2\r\n\t\t\t\t\t// _latestVersion was 5 in that commit, so the beforeThree\r\n\t\t\t\t\t// if in the reading code shouldn't ever run. Thus, it has\r\n\t\t\t\t\t// been omitted here.\r\n\t\t\t\t\tif (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].harm = clamp(0, Config.harmNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].harm = clamp(0, Config.harmNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.fmChorus) {\r\n\t\t\t\t\t// FM chorus was added in this commit: https://github.com/ModdedBeepbox/beta/commit/5c47acd9e5892709596d81df987a496f468b7115\r\n\t\t\t\t\t// Smaller diff: https://github.com/ModdedBeepbox/beta/compare/5427a7c491aae9fef15576bbc33a0d43ca18f758..5c47acd9e5892709596d81df987a496f468b7115\r\n\t\t\t\t\t// _latestVersion remained 6 before and after this, and the\r\n\t\t\t\t\t// tag code was never used for anything else previously, so\r\n\t\t\t\t\t// no backwards compatibility code is needed here.\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].fmChorus = clamp(0, Config.fmChorusNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.imute) {\r\n\t\t\t\t\t// Muting was added in this commit: https://github.com/ModdedBeepbox/3.0/commit/f177e34831ab85c58e0492ae47a5df80e709d9b4\r\n\t\t\t\t\t// _latestVersion remained 6 before and after this, and the\r\n\t\t\t\t\t// tag code was never used for anything else previously, so\r\n\t\t\t\t\t// no backwards compatibility code is needed here.\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].imute = clamp(0, Config.imuteNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.ipan) {\r\n\t\t\t\t\t// @TODO: Add SongTagCode.oldIpan = CharCode.M? Normally it\r\n\t\t\t\t\t// will be ignored if present on songs made before Oct 22, 2018\r\n\t\t\t\t\t// or so.\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].ipan = clamp(0, Config.ipanValues.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.octoff) {\r\n\t\t\t\t\t// Octave offset was first added in this commit: https://github.com/ModdedBeepbox/3.0/commit/54bdad302110cbde72b18f041091e53e3c35c189 (see BeepBox_files/5_channel.js)\r\n\t\t\t\t\t// It used CharCode.VERTICAL_LINE as the tag code value.\r\n\t\t\t\t\t// Later, it was changed to use CharCode.B in this commit: https://github.com/ModdedBeepbox/3.0/commit/84b9a7608c22addf01af2acebee6d5f6c65a5122\r\n\t\t\t\t\t// _latestVersion was 5, and the only major difference here\r\n\t\t\t\t\t// is that the octave offsets were pushed for every channel\r\n\t\t\t\t\t// one after another.\r\n\t\t\t\t\t// The beforeThree if was never needed.\r\n\t\t\t\t\tif (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].octoff = clamp(0, Config.octoffNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].octoff = clamp(0, Config.octoffNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.volume) {\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tthis.channels[channel].instruments[0].volume = clamp(0, Config.volumeNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t} else if (fromOld && beforeSix) {\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].instruments[i].volume = clamp(0, Config.volumeNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].volume = clamp(0, Config.volumeNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.algorithm) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].algorithm = clamp(0, Config.operatorAlgorithmNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.feedbackType) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.operatorFeedbackNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.feedbackAmplitude) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.feedbackEnvelope) {\r\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackEnvelope = clamp(0, Config.operatorEnvelopeNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t} else if (command == SongTagCode.operatorFrequencies) {\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencyNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.operatorAmplitudes) {\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.operatorEnvelopes) {\r\n\t\t\t\t\tfor (let o: number = 0; o < Config.operatorCount; o++) {\r\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].envelope = clamp(0, Config.operatorEnvelopeNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (command == SongTagCode.bars) {\r\n\t\t\t\t\tlet subStringLength: number;\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tconst barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tsubStringLength = Math.ceil(barCount * 0.5);\r\n\t\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(base64CharCodeToInt, compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\t\tfor (let i: number = 0; i < barCount; i++) {\r\n\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(3) + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (fromOld && beforeFive) {\r\n\t\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n\t\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(base64CharCodeToInt, compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits) + 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet neededBits: number = 0;\r\n\t\t\t\t\t\twhile ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n\t\t\t\t\t\tsubStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n\t\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(base64CharCodeToInt, compressed, charIndex, charIndex + subStringLength);\r\n\t\t\t\t\t\tfor (channel = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\t\t\tthis.channels[channel].bars[i] = bits.read(neededBits);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcharIndex += subStringLength;\r\n\t\t\t\t} else if (command == SongTagCode.patterns) {\r\n\t\t\t\t\tlet bitStringLength: number = 0;\r\n\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\tchannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default. \r\n\t\t\t\t\t\tcharIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchannel = 0;\r\n\t\t\t\t\t\tlet bitStringLengthLength: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\twhile (bitStringLengthLength > 0) {\r\n\t\t\t\t\t\t\tbitStringLength = bitStringLength << 6;\r\n\t\t\t\t\t\t\tbitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\t\t\t\t\t\t\tbitStringLengthLength--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst bits: BitFieldReader = new BitFieldReader(base64CharCodeToInt, compressed, charIndex, charIndex + bitStringLength);\r\n\t\t\t\t\tcharIndex += bitStringLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet neededInstrumentBits: number = 0;\r\n\t\t\t\t\twhile ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n\t\t\t\t\twhile (true) {\r\n\t\t\t\t\t\tconst isDrum: boolean = this.getChannelIsDrum(channel);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst octaveOffset: number = isDrum ? 0 : this.channels[channel].octave * 12;\r\n\t\t\t\t\t\tlet note: Note | null = null;\r\n\t\t\t\t\t\tlet pin: NotePin | null = null;\r\n\t\t\t\t\t\tlet lastPitch: number = (isDrum ? 4 : 12) + octaveOffset;\r\n\t\t\t\t\t\tconst recentPitches: number[] = isDrum ? [4,6,7,2,3,8,0,10] : [12, 19, 24, 31, 36, 7, 0];\r\n\t\t\t\t\t\tconst recentShapes: any[] = [];\r\n\t\t\t\t\t\tfor (let i: number = 0; i < recentPitches.length; i++) {\r\n\t\t\t\t\t\t\trecentPitches[i] += octaveOffset;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\t\t\tconst newPattern: Pattern = this.channels[channel].patterns[i];\r\n\t\t\t\t\t\t\tnewPattern.reset();\r\n\t\t\t\t\t\t\tnewPattern.instrument = bits.read(neededInstrumentBits);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (((fromOld && !beforeThree) || fromNepBox) && bits.read(1) == 0) continue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlet curPart: number = 0;\r\n\t\t\t\t\t\t\tconst newNotes: Note[] = newPattern.notes;\r\n\t\t\t\t\t\t\twhile (curPart < this.beatsPerBar * this.partsPerBeat) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst useOldShape: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\tlet newNote: boolean = false;\r\n\t\t\t\t\t\t\t\tlet shapeIndex: number = 0;\r\n\t\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\t\tshapeIndex = bits.readLongTail(0, 0);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tnewNote = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif (!useOldShape && !newNote) {\r\n\t\t\t\t\t\t\t\t\tconst restLength: number = bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\tcurPart += restLength;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tlet shape: any;\r\n\t\t\t\t\t\t\t\t\tlet pinObj: any;\r\n\t\t\t\t\t\t\t\t\tlet pitch: number;\r\n\t\t\t\t\t\t\t\t\tif (useOldShape) {\r\n\t\t\t\t\t\t\t\t\t\tshape = recentShapes[shapeIndex];\r\n\t\t\t\t\t\t\t\t\t\trecentShapes.splice(shapeIndex, 1);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tshape = {};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tshape.pitchCount = 1;\r\n\t\t\t\t\t\t\t\t\t\twhile (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tshape.pinCount = bits.readPinCount();\r\n\t\t\t\t\t\t\t\t\t\tshape.initialVolume = bits.read(2);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tshape.pins = [];\r\n\t\t\t\t\t\t\t\t\t\tshape.length = 0;\r\n\t\t\t\t\t\t\t\t\t\tshape.bendCount = 0;\r\n\t\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pinCount; j++) {\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj = {};\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.pitchBend = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) shape.bendCount++;\r\n\t\t\t\t\t\t\t\t\t\t\tshape.length += bits.readPartDuration();\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.time = shape.length;\r\n\t\t\t\t\t\t\t\t\t\t\tpinObj.volume = bits.read(2);\r\n\t\t\t\t\t\t\t\t\t\t\tshape.pins.push(pinObj);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\trecentShapes.unshift(shape);\r\n\t\t\t\t\t\t\t\t\tif (recentShapes.length > 10) recentShapes.pop();\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tnote = makeNote(0,curPart,curPart + shape.length, shape.initialVolume);\r\n\t\t\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\t\t\tnote.pins.length = 1;\r\n\t\t\t\t\t\t\t\t\tconst pitchBends: number[] = [];\r\n\t\t\t\t\t\t\t\t\tfor (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n\t\t\t\t\t\t\t\t\t\tconst useOldPitch: boolean = bits.read(1) == 1;\r\n\t\t\t\t\t\t\t\t\t\tif (!useOldPitch) {\r\n\t\t\t\t\t\t\t\t\t\t\tconst interval: number = bits.readPitchInterval();\r\n\t\t\t\t\t\t\t\t\t\t\tpitch = lastPitch;\r\n\t\t\t\t\t\t\t\t\t\t\tlet intervalIter: number = interval;\r\n\t\t\t\t\t\t\t\t\t\t\twhile (intervalIter > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tpitch++;\r\n\t\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch++;\r\n\t\t\t\t\t\t\t\t\t\t\t\tintervalIter--;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\twhile (intervalIter < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tpitch--;\r\n\t\t\t\t\t\t\t\t\t\t\t\twhile (recentPitches.indexOf(pitch) != -1) pitch--;\r\n\t\t\t\t\t\t\t\t\t\t\t\tintervalIter++;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tconst pitchIndex: number = bits.read(3);\r\n\t\t\t\t\t\t\t\t\t\t\tpitch = recentPitches[pitchIndex];\r\n\t\t\t\t\t\t\t\t\t\t\trecentPitches.splice(pitchIndex, 1);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\trecentPitches.unshift(pitch);\r\n\t\t\t\t\t\t\t\t\t\tif (recentPitches.length > 8) recentPitches.pop();\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif (j < shape.pitchCount) {\r\n\t\t\t\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tpitchBends.push(pitch);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif (j == shape.pitchCount - 1) {\r\n\t\t\t\t\t\t\t\t\t\t\tlastPitch = note.pitches[0];\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tlastPitch = pitch;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tpitchBends.unshift(note.pitches[0]);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tfor (const pinObj of shape.pins) {\r\n\t\t\t\t\t\t\t\t\t\tif (pinObj.pitchBend) pitchBends.shift();\r\n\t\t\t\t\t\t\t\t\t\tpin = makeNotePin(pitchBends[0] - note.pitches[0], pinObj.time, pinObj.volume);\r\n\t\t\t\t\t\t\t\t\t\tnote.pins.push(pin);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tcurPart = note.end;\r\n\t\t\t\t\t\t\t\t\tnewNotes.push(note);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (fromOld && beforeThree) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tchannel++;\r\n\t\t\t\t\t\t\tif (channel >= this.getChannelCount()) break;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} // while (true)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n\t\t\tconst channelArray: Object[] = [];\r\n\t\t\tfor (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\t\t\t\tconst instrumentArray: Object[] = [];\r\n\t\t\t\tconst isDrum: boolean = this.getChannelIsDrum(channel);\r\n\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\tif (isDrum) {\r\n\t\t\t\t\t\tinstrumentArray.push({\r\n\t\t\t\t\t\t\ttype: Config.instrumentTypeNames[InstrumentType.noise],\r\n\t\t\t\t\t\t\tvolume: (5 - instrument.volume) * 20,\r\n\t\t\t\t\t\t\timute: Config.imuteNames[instrument.imute],\r\n\t\t\t\t\t\t\twave: Config.drumNames[instrument.wave],\r\n\t\t\t\t\t\t\ttransition: Config.transitionNames[instrument.transition],\r\n\t\t\t\t\t\t\toctoff: Config.octoffNames[instrument.octoff],\r\n\t\t\t\t\t\t\tipan: Config.ipanValues[instrument.ipan],\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\t\t\tinstrumentArray.push({\r\n\t\t\t\t\t\t\t\ttype: Config.instrumentTypeNames[instrument.type],\r\n\t\t\t\t\t\t\t\tvolume: (5 - instrument.volume) * 20,\r\n\t\t\t\t\t\t\t\twave: Config.waveNames[instrument.wave],\r\n\t\t\t\t\t\t\t\ttransition: Config.transitionNames[instrument.transition],\r\n\t\t\t\t\t\t\t\tfilter: Config.filterNames[instrument.filter],\r\n\t\t\t\t\t\t\t\tchorus: Config.chorusNames[instrument.chorus],\r\n\t\t\t\t\t\t\t\teffect: Config.effectNames[instrument.effect],\r\n\t\t\t\t\t\t\t\tharm: Config.harmNames[instrument.harm],\r\n\t\t\t\t\t\t\t\timute: Config.imuteNames[instrument.imute],\r\n\t\t\t\t\t\t\t\toctoff: Config.octoffNames[instrument.octoff],\r\n\t\t\t\t\t\t\t\tipan: Config.ipanValues[instrument.ipan],\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\tconst operatorArray: Object[] = [];\r\n\t\t\t\t\t\t\tfor (const operator of instrument.operators) {\r\n\t\t\t\t\t\t\t\toperatorArray.push({\r\n\t\t\t\t\t\t\t\t\tfrequency: Config.operatorFrequencyNames[operator.frequency],\r\n\t\t\t\t\t\t\t\t\tamplitude: operator.amplitude,\r\n\t\t\t\t\t\t\t\t\tenvelope: Config.operatorEnvelopeNames[operator.envelope],\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tinstrumentArray.push({\r\n\t\t\t\t\t\t\t\ttype: Config.instrumentTypeNames[instrument.type],\r\n\t\t\t\t\t\t\t\tvolume: (5 - instrument.volume) * 20,\r\n\t\t\t\t\t\t\t\ttransition: Config.transitionNames[instrument.transition],\r\n\t\t\t\t\t\t\t\teffect: Config.effectNames[instrument.effect],\r\n\t\t\t\t\t\t\t\toctoff: Config.octoffNames[instrument.octoff],\r\n\t\t\t\t\t\t\t\tfmChorus: Config.fmChorusNames[instrument.fmChorus],\r\n\t\t\t\t\t\t\t\talgorithm: Config.operatorAlgorithmNames[instrument.algorithm],\r\n\t\t\t\t\t\t\t\tfeedbackType: Config.operatorFeedbackNames[instrument.feedbackType],\r\n\t\t\t\t\t\t\t\tfeedbackAmplitude: instrument.feedbackAmplitude,\r\n\t\t\t\t\t\t\t\tfeedbackEnvelope: Config.operatorEnvelopeNames[instrument.feedbackEnvelope],\r\n\t\t\t\t\t\t\t\toperators: operatorArray,\r\n\t\t\t\t\t\t\t\tipan: Config.ipanValues[instrument.ipan],\r\n\t\t\t\t\t\t\t\timute: Config.imuteNames[instrument.imute],\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t\t\t\t\tinstrumentArray.push({\r\n\t\t\t\t\t\t\t\t// This uses the wrong instrument type in order\r\n\t\t\t\t\t\t\t\t// to make JSON exports compatible with\r\n\t\t\t\t\t\t\t\t// https://thestarworld.github.io/modboxfixed/\r\n\t\t\t\t\t\t\t\ttype: Config.instrumentTypeNames[InstrumentType.noise],\r\n\t\t\t\t\t\t\t\tvolume: (5 - instrument.volume) * 20,\r\n\t\t\t\t\t\t\t\twave: Config.pwmwaveNames[instrument.wave],\r\n\t\t\t\t\t\t\t\ttransition: Config.transitionNames[instrument.transition],\r\n\t\t\t\t\t\t\t\tfilter: Config.filterNames[instrument.filter],\r\n\t\t\t\t\t\t\t\tchorus: Config.chorusNames[instrument.chorus],\r\n\t\t\t\t\t\t\t\teffect: Config.effectNames[instrument.effect],\r\n\t\t\t\t\t\t\t\tharm: Config.harmNames[instrument.harm],\r\n\t\t\t\t\t\t\t\timute: Config.imuteNames[instrument.imute],\r\n\t\t\t\t\t\t\t\toctoff: Config.octoffNames[instrument.octoff],\r\n\t\t\t\t\t\t\t\tipan: Config.ipanValues[instrument.ipan],\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(\"Unrecognized instrument type\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst patternArray: Object[] = [];\r\n\t\t\t\tfor (const pattern of this.channels[channel].patterns) {\r\n\t\t\t\t\tconst noteArray: Object[] = [];\r\n\t\t\t\t\tfor (const note of pattern.notes) {\r\n\t\t\t\t\t\tconst pointArray: Object[] = [];\r\n\t\t\t\t\t\tfor (const pin of note.pins) {\r\n\t\t\t\t\t\t\tpointArray.push({\r\n\t\t\t\t\t\t\t\ttick: pin.time + note.start,\r\n\t\t\t\t\t\t\t\tpitchBend: pin.interval,\r\n\t\t\t\t\t\t\t\tvolume: Math.round(pin.volume * 100 / 3),\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tnoteArray.push({\r\n\t\t\t\t\t\t\tpitches: note.pitches,\r\n\t\t\t\t\t\t\tpoints: pointArray,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tpatternArray.push({\r\n\t\t\t\t\t\tinstrument: pattern.instrument + 1,\r\n\t\t\t\t\t\tnotes: noteArray, \r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst sequenceArray: number[] = [];\r\n\t\t\t\tif (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n\t\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t\t}\r\n\t\t\t\tfor (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n\t\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t\t}\r\n\t\t\t\tif (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n\t\t\t\t\tsequenceArray.push(this.channels[channel].bars[i]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tchannelArray.push({\r\n\t\t\t\t\ttype: isDrum ? \"drum\" : \"pitch\",\r\n\t\t\t\t\toctaveScrollBar: this.channels[channel].octave,\r\n\t\t\t\t\tinstruments: instrumentArray,\r\n\t\t\t\t\tpatterns: patternArray,\r\n\t\t\t\t\tsequence: sequenceArray,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tformat: Song._format,\r\n\t\t\t\tversion: Song._latestNepBoxVersion,\r\n\t\t\t\ttheme: this.setSongTheme,\r\n\t\t\t\tscale: Config.scales[this.scale].name,\r\n\t\t\t\tmix: Config.mixNames[this.mix],\r\n\t\t\t\tsampleRate: Config.sampleRateNames[this.sampleRate],\r\n\t\t\t\tkey: Config.keys[this.key].name,\r\n\t\t\t\tintroBars: this.loopStart,\r\n\t\t\t\tloopBars: this.loopLength,\r\n\t\t\t\tbeatsPerBar: this.beatsPerBar,\r\n\t\t\t\tticksPerBeat: this.partsPerBeat,\r\n\t\t\t\tbeatsPerMinute: this.getBeatsPerMinute(), // represents tempo\r\n\t\t\t\treverb: this.reverb,\r\n\t\t\t\tblend: this.blend,\r\n\t\t\t\triff: this.riff,\r\n\t\t\t\tdetune: this.detune,\r\n\t\t\t\tmuff: this.muff,\r\n\t\t\t\t//outroBars: this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n\t\t\t\t//patternCount: this.patternsPerChannel, // derive this from pattern arrays?\r\n\t\t\t\t//instrumentsPerChannel: this.instrumentsPerChannel, //derive this from instrument arrays?\r\n\t\t\t\tchannels: channelArray,\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tpublic fromJsonObject(jsonObject: any): void {\r\n\t\t\tthis.initToDefault(true);\r\n\t\t\tif (!jsonObject) return;\r\n\t\t\tconst format: any = jsonObject.format;\r\n\t\t\tconst version: any = jsonObject.version;\r\n\t\t\tif (version > Song._format) return;\r\n\t\t\t\r\n\t\t\tthis.scale = 11; // default to expert.\r\n\t\t\tif (jsonObject.scale != undefined) {\r\n\t\t\t\tif (format == \"BeepBox\") {\r\n\t\t\t\tconst oldScaleNames: Dictionary<number> = {\"romani :)\": 8, \"romani :(\": 9};\r\n\t\t\t\tconst scale: number = oldScaleNames[jsonObject.scale] != undefined ? oldScaleNames[jsonObject.scale] : Config.scales.map(scale=>scale.name).indexOf(jsonObject.scale);\r\n\t\t\t\tif (scale != -1) this.scale = scale;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.scale = Config.scales.map(scale=>scale.name).indexOf(jsonObject[\"scale\"]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.theme != undefined) {\r\n\t\t\t\tif (format == \"BeepBox\") {\r\n\t\t\t\t\tif ((jsonObject[\"theme\"] != \"Nepbox\") && (jsonObject[\"theme\"] != \"Laffey\") && (jsonObject[\"theme\"] != \"ModBox\")) {\r\n\t\t\t\t\t\tvar themes = [\"none\", \"modbox2\", \"artic\", \"Cinnamon Roll\", \"Ocean\", \"rainbow\", \"float\", \"windows\", \"grassland\", \"dessert\", \"kahootiest\", \"beambit\", \"egg\", \"Poniryoshka\", \"gameboy\", \"woodkid\", \"midnight\", \"snedbox\", \"unnamed\", \"piano\", \"halloween\", \"frozen\"];\r\n\t\t\t\t\t\tvar themeIndex = Config.oldThemeNames.indexOf(jsonObject[\"theme\"]);\r\n\t\t\t\t\t\tthis.setSongTheme = themes[themeIndex];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar themes = [\"none\", \"nepbox\", \"laffey\"];\r\n\t\t\t\t\t\tvar oldThemes = [\"ModBox\", \"Nepbox\", \"Laffey\"];\r\n\t\t\t\t\t\tvar themeIndex = oldThemes.indexOf(jsonObject[\"theme\"]);\r\n\t\t\t\t\t\tthis.setSongTheme = themes[themeIndex];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\tthis.setSongTheme = jsonObject[\"theme\"];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.mix != undefined) {\r\n\t\t\t\tthis.mix = Config.mixNames.indexOf(jsonObject.mix);\r\n\t\t\t\tif (this.mix == -1) this.mix = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.sampleRate != undefined) {\r\n\t\t\t\tthis.sampleRate = Config.sampleRateNames.indexOf(jsonObject.sampleRate);\r\n\t\t\t\tif (this.sampleRate == -1) this.sampleRate = 2;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (jsonObject.key != undefined) {\r\n\t\t\t\tif (format == \"BeepBox\") {\r\n\t\t\t\t\tif (typeof(jsonObject.key) == \"number\") {\r\n\t\t\t\t\t\tthis.key = Config.oldKeys.length - 1 - (((jsonObject.key + 1200) >>> 0) % Config.oldKeys.length);\r\n\t\t\t\t\t} else if (typeof(jsonObject.key) == \"string\") {\r\n\t\t\t\t\t\tthis.key = Config.keys.map(key=>key.name).indexOf(jsonObject.key);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.key = Config.keys.map(key=>key.name).indexOf(jsonObject.key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (jsonObject.beatsPerMinute != undefined) {\r\n\t\t\t\tconst bpm: number = jsonObject.beatsPerMinute | 0;\r\n\t\t\t\tthis.tempo = Math.round(4.0 + 9.0 * Math.log(bpm / 120) / Math.LN2);\r\n\t\t\t\tthis.tempo = clamp(0, Config.tempoSteps, this.tempo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (jsonObject.reverb != undefined) {\r\n\t\t\t\tthis.reverb = clamp(0, Config.reverbRange, jsonObject.reverb | 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.blend != undefined) {\r\n\t\t\t\tthis.blend = clamp(0, Config.blendRange, jsonObject.blend | 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.riff != undefined) {\r\n\t\t\t\tthis.riff = clamp(0, Config.riffRange, jsonObject.riff | 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.detune != undefined) {\r\n\t\t\t\tthis.detune = clamp(0, Config.detuneRange, jsonObject.detune | 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (jsonObject.muff != undefined) {\r\n\t\t\t\tthis.muff = clamp(0, Config.muffRange, jsonObject.muff | 0);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (jsonObject.beatsPerBar != undefined) {\r\n\t\t\t\tthis.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject.beatsPerBar | 0));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (jsonObject.ticksPerBeat != undefined) {\r\n\t\t\t\tthis.partsPerBeat = jsonObject.ticksPerBeat | 0;\r\n\t\t\t\tif (Config.partCounts.indexOf(this.partsPerBeat) == -1) {\r\n\t\t\t\t\tthis.partsPerBeat = Config.partCounts[Config.partCounts.length - 1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet maxInstruments: number = 1;\r\n\t\t\tlet maxPatterns: number = 1;\r\n\t\t\tlet maxBars: number = 1;\r\n\t\t\tif (jsonObject.channels) {\r\n\t\t\t\tfor (const channelObject of jsonObject.channels) {\r\n\t\t\t\t\tif (channelObject.instruments) maxInstruments = Math.max(maxInstruments, channelObject.instruments.length | 0);\r\n\t\t\t\t\tif (channelObject.patterns) maxPatterns = Math.max(maxPatterns, channelObject.patterns.length | 0);\r\n\t\t\t\t\tif (channelObject.sequence) maxBars = Math.max(maxBars, channelObject.sequence.length | 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.instrumentsPerChannel = maxInstruments;\r\n\t\t\tthis.patternsPerChannel = maxPatterns;\r\n\t\t\tthis.barCount = maxBars;\r\n\t\t\t\r\n\t\t\tif (jsonObject.introBars != undefined) {\r\n\t\t\t\tthis.loopStart = clamp(0, this.barCount, jsonObject.introBars | 0);\r\n\t\t\t}\r\n\t\t\tif (jsonObject.loopBars != undefined) {\r\n\t\t\t\tthis.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject.loopBars | 0);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet pitchChannelCount = 0;\r\n\t\t\tlet drumChannelCount = 0;\r\n\t\t\tif (jsonObject.channels) {\r\n\t\t\t\tfor (let channel: number = 0; channel < jsonObject.channels.length; channel++) {\r\n\t\t\t\t\tlet channelObject: any = jsonObject.channels[channel];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (this.channels.length <= channel) this.channels[channel] = new Channel();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (channelObject.octaveScrollBar != undefined) {\r\n\t\t\t\t\t\tthis.channels[channel].octave = clamp(0, 5, channelObject.octaveScrollBar | 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = this.channels[channel].instruments.length; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].instruments[i] = new Instrument();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].instruments.length = this.instrumentsPerChannel;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = this.channels[channel].patterns.length; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].patterns[i] = new Pattern();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].patterns.length = this.patternsPerChannel;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[i] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.channels[channel].bars.length = this.barCount;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet isDrum: boolean = false;\r\n\t\t\t\t\tif (channelObject.type) {\r\n\t\t\t\t\t\tisDrum = (channelObject.type == \"drum\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// for older files, assume drums are channel 3.\r\n\t\t\t\t\t\tisDrum = (channel >= 3);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (isDrum) drumChannelCount++; else pitchChannelCount++;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n\t\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[i];\r\n\t\t\t\t\t\tlet instrumentObject: any = undefined;\r\n\t\t\t\t\t\tif (channelObject.instruments) instrumentObject = channelObject.instruments[i];\r\n\t\t\t\t\t\tif (instrumentObject == undefined) instrumentObject = {};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst oldTransitionNames: Dictionary<number> = {\"binary\": 0};\r\n\t\t\t\t\t\tconst transitionObject = instrumentObject.transition || instrumentObject.envelope; // the transition property used to be called envelope, so try that too.\r\n\t\t\t\t\t\tinstrument.transition = oldTransitionNames[transitionObject] != undefined ? oldTransitionNames[transitionObject] : Config.transitionNames.indexOf(transitionObject);\r\n\t\t\t\t\t\tif (instrument.transition == -1) instrument.transition = 1;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (isDrum) {\r\n\t\t\t\t\t\t\tif (instrumentObject.volume != undefined) {\r\n\t\t\t\t\t\t\t\tinstrument.volume = clamp(0, Config.volumeNames.length, Math.round(5 - (instrumentObject.volume | 0) / 20));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tinstrument.volume = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tinstrument.wave = Config.drumNames.indexOf(instrumentObject.wave);\r\n\t\t\t\t\t\t\tif (instrument.wave == -1) instrument.wave = 1;\r\n\t\t\t\t\t\t\tinstrument.imute = Config.imuteNames.indexOf(instrumentObject.imute);\r\n\t\t\t\t\t\t\tif (instrument.imute == -1) instrument.imute = 0;\r\n\t\t\t\t\t\t\tinstrument.ipan = Config.ipanValues.indexOf(instrumentObject.ipan);\r\n\t\t\t\t\t\t\tif (instrument.ipan == -1) instrument.ipan = 4;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinstrument.type = Config.instrumentTypeNames.indexOf(instrumentObject.type);\r\n\t\t\t\t\t\t\tif (instrument.type == null) instrument.type = InstrumentType.chip;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\t\t\t\tif (instrumentObject.volume != undefined) {\r\n\t\t\t\t\t\t\t\t\tinstrument.volume = clamp(0, Config.volumeNames.length, Math.round(5 - (instrumentObject.volume | 0) / 20));\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tinstrument.volume = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tinstrument.wave = Config.waveNames.indexOf(instrumentObject.wave);\r\n\t\t\t\t\t\t\t\tif (instrument.wave == -1) instrument.wave = 1;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst oldFilterNames: Dictionary<number> = {\"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4};\r\n\t\t\t\t\t\t\t\tinstrument.filter = oldFilterNames[instrumentObject.filter] != undefined ? oldFilterNames[instrumentObject.filter] : Config.filterNames.indexOf(instrumentObject.filter);\r\n\t\t\t\t\t\t\t\tif (instrument.filter == -1) instrument.filter = 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tinstrument.chorus = Config.chorusNames.indexOf(instrumentObject.chorus);\r\n\t\t\t\t\t\t\t\tif (instrument.chorus == -1) instrument.chorus = 0;\r\n\t\t\t\t\t\t\t\tinstrument.effect = Config.effectNames.indexOf(instrumentObject.effect);\r\n\t\t\t\t\t\t\t\tif (instrument.effect == -1) instrument.effect = 0;\r\n\t\t\t\t\t\t\t\tinstrument.harm = Config.harmNames.indexOf(instrumentObject.harm);\r\n\t\t\t\t\t\t\t\tif (instrument.harm == -1) instrument.harm = 0;\r\n\t\t\t\t\t\t\t\tinstrument.octoff = Config.octoffNames.indexOf(instrumentObject.octoff);\r\n\t\t\t\t\t\t\t\tif (instrument.octoff == -1) instrument.octoff = 0;\r\n\t\t\t\t\t\t\t\tinstrument.imute = Config.imuteNames.indexOf(instrumentObject.imute);\r\n\t\t\t\t\t\t\t\tif (instrument.imute == -1) instrument.imute = 0;\r\n\t\t\t\t\t\t\t\tinstrument.ipan = Config.ipanValues.indexOf(instrumentObject.ipan);\r\n\t\t\t\t\t\t\t\tif (instrument.ipan == -1) instrument.ipan = 4;\r\n\t\t\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t\t\tinstrument.type == InstrumentType.pwm\r\n\t\t\t\t\t\t\t\t|| instrument.type == InstrumentType.noise\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tif (instrument.type == InstrumentType.noise) {\r\n\t\t\t\t\t\t\t\t\tinstrument.type = InstrumentType.pwm;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (instrumentObject.volume != undefined) {\r\n\t\t\t\t\t\t\t\t\tinstrument.volume = clamp(0, Config.volumeNames.length, Math.round(5 - (instrumentObject.volume | 0) / 20));\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tinstrument.volume = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tinstrument.wave = Config.pwmwaveNames.indexOf(instrumentObject.wave);\r\n\t\t\t\t\t\t\t\tif (instrument.wave == -1) instrument.wave = 1;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst oldFilterNames: Dictionary<number> = {\"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4};\r\n\t\t\t\t\t\t\t\tinstrument.filter = oldFilterNames[instrumentObject.filter] != undefined ? oldFilterNames[instrumentObject.filter] : Config.filterNames.indexOf(instrumentObject.filter);\r\n\t\t\t\t\t\t\t\tif (instrument.filter == -1) instrument.filter = 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tinstrument.chorus = Config.chorusNames.indexOf(instrumentObject.chorus);\r\n\t\t\t\t\t\t\t\tif (instrument.chorus == -1) instrument.chorus = 0;\r\n\t\t\t\t\t\t\t\tinstrument.effect = Config.effectNames.indexOf(instrumentObject.effect);\r\n\t\t\t\t\t\t\t\tif (instrument.effect == -1) instrument.effect = 0;\r\n\t\t\t\t\t\t\t\tinstrument.harm = Config.harmNames.indexOf(instrumentObject.harm);\r\n\t\t\t\t\t\t\t\tif (instrument.harm == -1) instrument.harm = 0;\r\n\t\t\t\t\t\t\t\tinstrument.octoff = Config.octoffNames.indexOf(instrumentObject.octoff);\r\n\t\t\t\t\t\t\t\tif (instrument.octoff == -1) instrument.octoff = 0;\r\n\t\t\t\t\t\t\t\tinstrument.imute = Config.imuteNames.indexOf(instrumentObject.imute);\r\n\t\t\t\t\t\t\t\tif (instrument.imute == -1) instrument.imute = 0;\r\n\t\t\t\t\t\t\t\tinstrument.ipan = Config.ipanValues.indexOf(instrumentObject.ipan);\r\n\t\t\t\t\t\t\t\tif (instrument.ipan == -1) instrument.ipan = 4;\r\n\t\t\t\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\t\tinstrument.effect = Config.effectNames.indexOf(instrumentObject.effect);\r\n\t\t\t\t\t\t\t\tif (instrument.effect == -1) instrument.effect = 0;\r\n\r\n\t\t\t\t\t\t\t\tinstrument.octoff = Config.octoffNames.indexOf(instrumentObject.octoff);\r\n\t\t\t\t\t\t\t\tif (instrument.octoff == -1) instrument.octoff = 0;\r\n\r\n\t\t\t\t\t\t\t\tinstrument.fmChorus = Config.fmChorusNames.indexOf(instrumentObject.fmChorus);\r\n\t\t\t\t\t\t\t\tif (instrument.fmChorus == -1) instrument.fmChorus = 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tinstrument.algorithm = Config.operatorAlgorithmNames.indexOf(instrumentObject.algorithm);\r\n\t\t\t\t\t\t\t\tif (instrument.algorithm == -1) instrument.algorithm = 0;\r\n\t\t\t\t\t\t\t\tinstrument.feedbackType = Config.operatorFeedbackNames.indexOf(instrumentObject.feedbackType);\r\n\t\t\t\t\t\t\t\tif (instrument.feedbackType == -1) instrument.feedbackType = 0;\r\n\t\t\t\t\t\t\t\tif (instrumentObject.feedbackAmplitude != undefined) {\r\n\t\t\t\t\t\t\t\t\tinstrument.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject.feedbackAmplitude | 0);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tinstrument.feedbackAmplitude = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tinstrument.feedbackEnvelope = Config.operatorEnvelopeNames.indexOf(instrumentObject.feedbackEnvelope);\r\n\t\t\t\t\t\t\t\tif (instrument.feedbackEnvelope == -1) instrument.feedbackEnvelope = 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (let j: number = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\t\t\t\t\t\tconst operator: Operator = instrument.operators[j];\r\n\t\t\t\t\t\t\t\t\tlet operatorObject: any = undefined;\r\n\t\t\t\t\t\t\t\t\tif (instrumentObject.operators) operatorObject = instrumentObject.operators[j];\r\n\t\t\t\t\t\t\t\t\tif (operatorObject == undefined) operatorObject = {};\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\toperator.frequency = Config.operatorFrequencyNames.indexOf(operatorObject.frequency);\r\n\t\t\t\t\t\t\t\t\tif (operator.frequency == -1) operator.frequency = 0;\r\n\t\t\t\t\t\t\t\t\tif (operatorObject.amplitude != undefined) {\r\n\t\t\t\t\t\t\t\t\t\toperator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject.amplitude | 0);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\toperator.amplitude = 0;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\toperator.envelope = Config.operatorEnvelopeNames.indexOf(operatorObject.envelope);\r\n\t\t\t\t\t\t\t\t\tif (operator.envelope == -1) operator.envelope = 0;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tinstrument.ipan = Config.ipanValues.indexOf(instrumentObject.ipan);\r\n\t\t\t\t\t\t\t\tif (instrument.ipan == -1) instrument.ipan = 4;\r\n\t\t\t\t\t\t\t\tinstrument.imute = Config.imuteNames.indexOf(instrumentObject.imute);\r\n\t\t\t\t\t\t\t\tif (instrument.imute == -1) instrument.imute = 0;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthrow new Error(\"Unrecognized instrument type.\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n\t\t\t\t\t\tconst pattern: Pattern = this.channels[channel].patterns[i];\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tlet patternObject: any = undefined;\r\n\t\t\t\t\t\tif (channelObject.patterns) patternObject = channelObject.patterns[i];\r\n\t\t\t\t\t\tif (patternObject == undefined) continue;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tpattern.instrument = clamp(0, this.instrumentsPerChannel, (patternObject.instrument | 0) - 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tif (patternObject.notes && patternObject.notes.length > 0) {\r\n\t\t\t\t\t\t\tconst maxNoteCount: number = Math.min(this.beatsPerBar * this.partsPerBeat, patternObject.notes.length >>> 0);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t///@TODO: Consider supporting notes specified in any timing order, sorting them and truncating as necessary. \r\n\t\t\t\t\t\t\tlet tickClock: number = 0;\r\n\t\t\t\t\t\t\tfor (let j: number = 0; j < patternObject.notes.length; j++) {\r\n\t\t\t\t\t\t\t\tif (j >= maxNoteCount) break;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst noteObject = patternObject.notes[j];\r\n\t\t\t\t\t\t\t\tif (!noteObject || !noteObject.pitches || !(noteObject.pitches.length >= 1) || !noteObject.points || !(noteObject.points.length >= 2)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst note: Note = makeNote(0, 0, 0, 0);\r\n\t\t\t\t\t\t\t\tnote.pitches = [];\r\n\t\t\t\t\t\t\t\tnote.pins = [];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject.pitches.length; k++) {\r\n\t\t\t\t\t\t\t\t\tconst pitch: number = noteObject.pitches[k] | 0;\r\n\t\t\t\t\t\t\t\t\tif (note.pitches.indexOf(pitch) != -1) continue;\r\n\t\t\t\t\t\t\t\t\tnote.pitches.push(pitch);\r\n\t\t\t\t\t\t\t\t\tif (note.pitches.length >= 4) break;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlet noteClock: number = tickClock;\r\n\t\t\t\t\t\t\t\tlet startInterval: number = 0;\r\n\t\t\t\t\t\t\t\tfor (let k: number = 0; k < noteObject.points.length; k++) {\r\n\t\t\t\t\t\t\t\t\tconst pointObject: any = noteObject.points[k];\r\n\t\t\t\t\t\t\t\t\tif (pointObject == undefined || pointObject.tick == undefined) continue;\r\n\t\t\t\t\t\t\t\t\tconst interval: number = (pointObject.pitchBend == undefined) ? 0 : (pointObject.pitchBend | 0);\r\n\t\t\t\t\t\t\t\t\tconst time: number = pointObject.tick | 0;\r\n\t\t\t\t\t\t\t\t\tconst volume: number = (pointObject.volume == undefined) ? 3 : Math.max(0, Math.min(3, Math.round((pointObject.volume | 0) * 3 / 100)));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif (time > this.beatsPerBar * this.partsPerBeat) continue;\r\n\t\t\t\t\t\t\t\t\tif (note.pins.length == 0) {\r\n\t\t\t\t\t\t\t\t\t\tif (time < noteClock) continue;\r\n\t\t\t\t\t\t\t\t\t\tnote.start = time;\r\n\t\t\t\t\t\t\t\t\t\tstartInterval = interval;\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tif (time <= noteClock) continue;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tnoteClock = time;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tnote.pins.push(makeNotePin(interval - startInterval, time - note.start, volume));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (note.pins.length < 2) continue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tnote.end = note.pins[note.pins.length - 1].time + note.start;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tconst maxPitch: number = isDrum ? Config.drumCount - 1 : Config.maxPitch;\r\n\t\t\t\t\t\t\t\tlet lowestPitch: number = maxPitch;\r\n\t\t\t\t\t\t\t\tlet highestPitch: number = 0;\r\n\t\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pitches.length; k++) {\r\n\t\t\t\t\t\t\t\t\tnote.pitches[k] += startInterval;\r\n\t\t\t\t\t\t\t\t\tif (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n\t\t\t\t\t\t\t\t\t\tnote.pitches.splice(k, 1);\r\n\t\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t\t\tif (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (note.pitches.length < 1) continue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor (let k: number = 0; k < note.pins.length; k++) {\r\n\t\t\t\t\t\t\t\t\tconst pin: NotePin = note.pins[k];\r\n\t\t\t\t\t\t\t\t\tif (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n\t\t\t\t\t\t\t\t\tif (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n\t\t\t\t\t\t\t\t\tif (k >= 2) {\r\n\t\t\t\t\t\t\t\t\t\tif (pin.interval == note.pins[k-1].interval && \r\n\t\t\t\t\t\t\t\t\t\t\tpin.interval == note.pins[k-2].interval && \r\n\t\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k-1].volume && \r\n\t\t\t\t\t\t\t\t\t\t\tpin.volume == note.pins[k-2].volume)\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tnote.pins.splice(k-1, 1);\r\n\t\t\t\t\t\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\t\t\t\t\t}    \r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tpattern.notes.push(note);\r\n\t\t\t\t\t\t\t\ttickClock = note.end;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = 0; i < this.barCount; i++) {\r\n\t\t\t\t\t\tthis.channels[channel].bars[i] = channelObject.sequence ? Math.min(this.patternsPerChannel, channelObject.sequence[i] >>> 0) : 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.pitchChannelCount = pitchChannelCount;\r\n\t\t\tthis.drumChannelCount = drumChannelCount;\r\n\t\t\tthis.channels.length = this.getChannelCount();\r\n\t\t}\r\n\t\t\r\n\t\tpublic getPattern(channel: number, bar: number): Pattern | null {\r\n\t\t\tconst patternIndex: number = this.channels[channel].bars[bar];\r\n\t\t\tif (patternIndex == 0) return null;\r\n\t\t\treturn this.channels[channel].patterns[patternIndex - 1];\r\n\t\t}\r\n\t\t\r\n\t\tpublic getPatternInstrument(channel: number, bar: number): number {\r\n\t\t\tconst pattern: Pattern | null = this.getPattern(channel, bar);\r\n\t\t\treturn pattern == null ? 0 : pattern.instrument;\r\n\t\t}\r\n\r\n\t\tpublic getPatternInstrumentMute(channel: number, bar: number): number {\r\n\t\t\tconst pattern: Pattern | null = this.getPattern(channel, bar);\r\n\t\t\tconst instrumentIndex: number = this.getPatternInstrument(channel, bar);\r\n\t\t\tconst instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\t\t\treturn pattern == null ? 0 : instrument.imute;\r\n\t\t}\r\n\r\n\t\tpublic getPatternInstrumentVolume(channel: number, bar: number): number {\r\n\t\t\tconst pattern: Pattern | null = this.getPattern(channel, bar);\r\n\t\t\tconst instrumentIndex: number = this.getPatternInstrument(channel, bar);\r\n\t\t\tconst instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\t\t\treturn pattern == null ? 0 : instrument.volume;\r\n\t\t}\r\n\t\t\r\n\t\tpublic getBeatsPerMinute(): number {\r\n\t\t\treturn Math.round(120.0 * Math.pow(2.0, (-4.0 + this.tempo) / 9.0));\r\n\t\t}\r\n\t\t\r\n\t\tprivate readonly _fingerprint: Array<string | number> = [];\r\n\t\tpublic getChannelFingerprint(bar: number): string {\r\n\t\t\tconst channelCount: number = this.getChannelCount();\r\n\t\t\tlet charCount: number = 0;\r\n\t\t\tfor (let channel: number = 0; channel < channelCount; channel++) {\r\n\t\t\t\tif (channel < this.pitchChannelCount) {\r\n\t\t\t\t\tconst instrumentIndex: number = this.getPatternInstrument(channel, bar);\r\n\t\t\t\t\tconst instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\t\t\t\t\tif (instrument.type == InstrumentType.chip) {\r\n\t\t\t\t\t\tthis._fingerprint[charCount++] = \"c\";\r\n\t\t\t\t\t} else if (instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\t\tthis._fingerprint[charCount++] = \"f\"\r\n\t\t\t\t\t\tthis._fingerprint[charCount++] = instrument.algorithm;\r\n\t\t\t\t\t\tthis._fingerprint[charCount++] = instrument.feedbackType;\r\n\t\t\t\t\t} else if (instrument.type == InstrumentType.pwm) {\r\n\t\t\t\t\t\tthis._fingerprint[charCount++] = \"p\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error(\"Unknown instrument type.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._fingerprint[charCount++] = \"d\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._fingerprint.length = charCount;\r\n\t\t\treturn this._fingerprint.join(\"\");\r\n\t\t}\r\n\t}","/*\r\nCopyright (C) 2018 John Nesky\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\nimport { Config, Dictionary, InstrumentType, EnvelopeType } from \"./SynthConfig\";\r\nimport { Instrument, Song, Note, NotePin, Pattern } from \"./song\";\r\n//import { Deque } from \"./Deque\";\r\n\r\n\tdeclare global {\r\n\t\tinterface Window {\r\n\t\t\tAudioContext: any;\r\n\t\t\twebkitAudioContext: any;\r\n\t\t}\r\n\t}\r\n\r\n\tclass SynthChannel {\r\n\t\tpublic sampleLeft: number = 0.0;\r\n\t\tpublic sampleRight: number = 0.0;\r\n\t\tpublic readonly phases: number[] = [];\r\n\t\tpublic readonly phaseDeltas: number[] = [];\r\n\t\tpublic readonly volumeStarts: number[] = [];\r\n\t\tpublic readonly volumeDeltas: number[] = [];\r\n\t\tpublic readonly volumeLeft: number[] = [];\r\n\t\tpublic readonly volumeRight: number[] = [];\r\n\t\tpublic phaseDeltaScale: number = 0.0;\r\n\t\tpublic filter: number = 0.0;\r\n\t\tpublic filterScale: number = 0.0;\r\n\t\tpublic vibratoScale: number = 0.0;\r\n\t\tpublic harmonyMult: number = 0.0;\r\n\t\tpublic harmonyVolumeMult: number = 1.0;\r\n\t\tpublic feedbackOutputs: number[] = [];\r\n\t\tpublic feedbackMult: number = 0.0;\r\n\t\tpublic feedbackDelta: number = 0.0;\r\n\t\t\r\n\t\tconstructor() {\r\n\t\t\tthis.reset();\r\n\t\t}\r\n\t\t\r\n\t\tpublic reset(): void {\r\n\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\tthis.phases[i] = 0.0;\r\n\t\t\t\tthis.feedbackOutputs[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.sampleLeft = 0.0;\r\n\t\t\tthis.sampleRight = 0.0;\r\n\t\t}\r\n\t}\r\n\t\r\n\texport class Tone {\r\n\t\tpublic instrument: Instrument;\r\n\t\tpublic readonly pitches: number[] = [0, 0, 0, 0];\r\n\t\tpublic pitchCount: number = 0;\r\n\t\tpublic chordSize: number = 0;\r\n\t\tpublic drumsetPitch: number = 0;\r\n\t\tpublic note: Note | null = null;\r\n\t\tpublic prevNote: Note | null = null;\r\n\t\tpublic nextNote: Note | null = null;\r\n\t\tpublic prevNotePitchIndex: number = 0;\r\n\t\tpublic nextNotePitchIndex: number = 0;\r\n\t\tpublic active: boolean = false;\r\n\t\tpublic noteStart: number = 0;\r\n\t\tpublic noteEnd: number = 0;\r\n\t\tpublic noteLengthTicks: number = 0;\r\n\t\tpublic ticksSinceReleased: number = 0;\r\n\t\tpublic liveInputSamplesHeld: number = 0;\r\n\t\tpublic lastInterval: number = 0;\r\n\t\tpublic lastVolume: number = 0;\r\n\t\tpublic stereoVolume1: number = 0.0;\r\n\t\tpublic stereoVolume2: number = 0.0;\r\n\t\tpublic stereoOffset: number = 0.0;\r\n\t\tpublic stereoDelay: number = 0.0;\r\n\t\tpublic sample: number = 0.0;\r\n\t\tpublic readonly phases: number[] = [];\r\n\t\tpublic readonly phaseDeltas: number[] = [];\r\n\t\tpublic readonly volumeStarts: number[] = [];\r\n\t\tpublic readonly volumeDeltas: number[] = [];\r\n\t\tpublic volumeStart: number = 0.0;\r\n\t\tpublic volumeDelta: number = 0.0;\r\n\t\tpublic phaseDeltaScale: number = 0.0;\r\n\t\tpublic pulseWidth: number = 0.0;\r\n\t\tpublic pulseWidthDelta: number = 0.0;\r\n\t\tpublic filter: number = 0.0;\r\n\t\tpublic filterScale: number = 0.0;\r\n\t\tpublic filterSample0: number = 0.0;\r\n\t\tpublic filterSample1: number = 0.0;\r\n\t\tpublic vibratoScale: number = 0.0;\r\n\t\tpublic intervalMult: number = 0.0;\r\n\t\tpublic intervalVolumeMult: number = 1.0;\r\n\t\tpublic feedbackOutputs: number[] = [];\r\n\t\tpublic feedbackMult: number = 0.0;\r\n\t\tpublic feedbackDelta: number = 0.0;\r\n\t\t\r\n\t\tconstructor() {\r\n\t\t\tthis.reset();\r\n\t\t}\r\n\t\t\r\n\t\tpublic reset(): void {\r\n\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\tthis.phases[i] = 0.0;\r\n\t\t\t\tthis.feedbackOutputs[i] = 0.0;\r\n\t\t\t}\r\n\t\t\tthis.sample = 0.0;\r\n\t\t\tthis.filterSample0 = 0.0;\r\n\t\t\tthis.filterSample1 = 0.0;\r\n\t\t\tthis.liveInputSamplesHeld = 0.0;\r\n\t\t}\r\n\t}\r\n\r\n\texport class Synth {\r\n\t\t\r\n\t\tprivate static warmUpSynthesizer(song: Song | null): void {\r\n\t\t\t// Don't bother to generate the drum waves unless the song actually\r\n\t\t\t// uses them, since they may require a lot of computation.\r\n\t\t\tif (song != null) {\r\n\t\t\t\tfor (let i: number = 0; i < song.instrumentsPerChannel; i++) {\r\n\t\t\t\t\tfor (let j: number = song.pitchChannelCount; j < song.pitchChannelCount + song.drumChannelCount; j++) {\r\n\t\t\t\t\t\tConfig.getDrumWave(song.channels[j].instruments[i].wave);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (let i: number = 0; i < song.barCount; i++) {\r\n\t\t\t\t\tSynth.getGeneratedSynthesizer(song, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tprivate static operatorAmplitudeCurve(amplitude: number): number {\r\n\t\t\treturn (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n\t\t}\r\n\t\t\r\n\t\tprivate static readonly negativePhaseGuard: number = 1000;\r\n\t\t\r\n\t\tpublic samplesPerSecond: number = 44100;\r\n\t\tprivate effectDuration: number = 0.14;\r\n\t\tprivate effectAngle: number = Math.PI * 2.0 / (this.effectDuration * this.samplesPerSecond);\r\n\t\tpublic effectYMult: number = 2.0 * Math.cos(this.effectAngle);\r\n\t\tpublic limitDecay: number = 1.0 / (2.0 * this.samplesPerSecond);\r\n\t\t\r\n\t\tpublic song: Song | null = null;\r\n\t\tpublic pianoPressed: boolean = false;\r\n\t\tpublic pianoPitch: number[] = [0];\r\n\t\tpublic pianoChannel: number = 0;\r\n\t\tpublic enableIntro: boolean = true;\r\n\t\tpublic enableOutro: boolean = false;\r\n\t\tpublic loopCount: number = -1;\r\n\t\tpublic volume: number = 1.0;\r\n\t\t\r\n\t\tpublic liveInputDuration: number = 0;\r\n\t\tpublic liveInputStarted: boolean = false;\r\n\t\tpublic liveInputPitches: number[] = [];\r\n\t\tpublic liveInputChannel: number = 0;\r\n\t\t\r\n\t\tprivate playheadInternal: number = 0.0;\r\n\t\tprivate bar: number = 0;\r\n\t\tprivate beat: number = 0;\r\n\t\tprivate part: number = 0;\r\n\t\tprivate arpeggio: number = 0;\r\n\t\tprivate arpSampleCountdown: number = 0;\r\n\t\tprivate isPlaying: boolean = false;\r\n\t\tprivate liveInputEndTime: number = 0.0;\r\n\t\tprivate browserAutomaticallyClearsAudioBuffer: boolean = true;\r\n\t\t\r\n\t\tprivate readonly channels: SynthChannel[] = [];\r\n\t\tpublic stillGoing: boolean = false;\r\n\t\tpublic effectPhase: number = 0.0;\r\n\t\tpublic limit: number = 0.0;\r\n\t\t\r\n\t\tprivate delayLineLeft: Float32Array = new Float32Array(16384);\r\n\t\tprivate delayLineRight: Float32Array = new Float32Array(16384);\r\n\t\tpublic delayPosLeft: number = 0;\r\n\t\tpublic delayPosRight: number = 0;\r\n\t\tpublic delayFeedback0Left: number = 0.0;\r\n\t\tpublic delayFeedback0Right: number = 0.0;\r\n\t\tpublic delayFeedback1Left: number = 0.0;\r\n\t\tpublic delayFeedback1Right: number = 0.0;\r\n\t\tpublic delayFeedback2Left: number = 0.0;\r\n\t\tpublic delayFeedback2Right: number = 0.0;\r\n\t\tpublic delayFeedback3Left: number = 0.0;\r\n\t\tpublic delayFeedback3Right: number = 0.0;\r\n\t\t\r\n\t\tprivate audioCtx: any | null = null;\r\n\t\tprivate scriptNode: any | null = null;\r\n\t\t\r\n\t\tpublic get playing(): boolean {\r\n\t\t\treturn this.isPlaying;\r\n\t\t}\r\n\t\t\r\n\t\tpublic get playhead(): number {\r\n\t\t\treturn this.playheadInternal;\r\n\t\t}\r\n\t\t\r\n\t\tpublic set playhead(value: number) {\r\n\t\t\tif (this.song != null) {\r\n\t\t\t\tthis.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n\t\t\t\tlet remainder: number = this.playheadInternal;\r\n\t\t\t\tthis.bar = Math.floor(remainder);\r\n\t\t\t\tremainder = this.song.beatsPerBar * (remainder - this.bar);\r\n\t\t\t\tthis.beat = Math.floor(remainder);\r\n\t\t\t\tremainder = this.song.partsPerBeat * (remainder - this.beat);\r\n\t\t\t\tthis.part = Math.floor(remainder);\r\n\t\t\t\tremainder = 4 * (remainder - this.part);\r\n\t\t\t\tthis.arpeggio = Math.floor(remainder);\r\n\t\t\t\tconst samplesPerTick: number = this.getSamplesPerArpeggio();\r\n\t\t\t\tremainder = samplesPerTick * (remainder - this.arpeggio);\r\n\t\t\t\tthis.arpSampleCountdown = Math.floor(samplesPerTick - remainder);\r\n\t\t\t\tif (this.bar < this.song.loopStart) {\r\n\t\t\t\t\tthis.enableIntro = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.bar > this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\tthis.enableOutro = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic get totalSamples(): number {\r\n\t\t\tif (this.song == null) return 0;\r\n\t\t\tconst samplesPerBar: number = this.getSamplesPerArpeggio() * 4 * this.song.partsPerBeat * this.song.beatsPerBar;\r\n\t\t\tlet loopMinCount: number = this.loopCount;\r\n\t\t\tif (loopMinCount < 0) loopMinCount = 1;\r\n\t\t\tlet bars: number = this.song.loopLength * loopMinCount;\r\n\t\t\tif (this.enableIntro) bars += this.song.loopStart;\r\n\t\t\tif (this.enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n\t\t\treturn bars * samplesPerBar;\r\n\t\t}\r\n\t\t\r\n\t\tpublic get totalSeconds(): number {\r\n\t\t\t// @TODO: Revisit\r\n\t\t\treturn Math.round(this.totalSamples / this.samplesPerSecond);\r\n\t\t}\r\n\t\t\r\n\t\tpublic get totalBars(): number {\r\n\t\t\tif (this.song == null) return 0.0;\r\n\t\t\treturn this.song.barCount;\r\n\t\t}\r\n\t\t\r\n\t\tconstructor(song: any = null) {\r\n\t\t\tif (song != null) this.setSong(song);\r\n\t\t}\r\n\t\t\r\n\t\tpublic setSong(song: any): void {\r\n\t\t\tif (typeof(song) == \"string\") {\r\n\t\t\t\tthis.song = new Song(song);\r\n\t\t\t} else if (song instanceof Song) {\r\n\t\t\t\tthis.song = song;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate spsCalc(): number {\r\n\t\t\tSynth.warmUpSynthesizer(this.song);\r\n\t\t\tif (this.song!.sampleRate == 0) return 44100;\r\n\t\t\telse if (this.song!.sampleRate == 1) return 48000;\r\n\t\t\telse if (this.song!.sampleRate == 2) return this.audioCtx.sampleRate;\r\n\t\t\telse if (this.song!.sampleRate == 3) return this.audioCtx.sampleRate * 4;\r\n\t\t\telse if (this.song!.sampleRate == 4) return this.audioCtx.sampleRate * 2;\r\n\t\t\telse if (this.song!.sampleRate == 5) return this.audioCtx.sampleRate / 2;\r\n\t\t\telse if (this.song!.sampleRate == 6) return this.audioCtx.sampleRate / 4;\r\n\t\t\telse if (this.song!.sampleRate == 7) return this.audioCtx.sampleRate / 8;\r\n\t\t\telse if (this.song!.sampleRate == 8) return this.audioCtx.sampleRate / 16;\r\n\t\t\telse return this.audioCtx.sampleRate;\r\n\t\t}\r\n\r\n\t\tprivate activateAudio(): void {\r\n\t\t\tif (this.audioCtx == null || this.scriptNode == null) {\r\n\t\t\t\tif (this.scriptNode != null) this.deactivateAudio();\r\n\t\t\t\tthis.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext);\r\n\t\t\t\tthis.samplesPerSecond = this.spsCalc();\r\n\t\t\t\tthis.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(2048, 0, 2) : this.audioCtx.createJavaScriptNode(2048, 0, 2); \r\n\t\t\t\tthis.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n\t\t\t\tthis.scriptNode.channelCountMode = 'explicit';\r\n\t\t\t\tthis.scriptNode.channelInterpretation = 'speakers';\r\n\r\n\t\t\t\tthis.effectAngle = Math.PI * 2.0 / (this.effectDuration * this.samplesPerSecond);\r\n\t\t\t\tthis.effectYMult = 2.0 * Math.cos(this.effectAngle);\r\n\t\t\t\tthis.limitDecay = 1.0 / (2.0 * this.samplesPerSecond);\r\n\t\t\t\t\r\n\t\t\t\tthis.scriptNode.connect(this.audioCtx.destination);\r\n\t\t\t}\r\n\t\t\tthis.audioCtx.resume();\r\n\t\t}\r\n\t\t\r\n\t\tprivate deactivateAudio(): void {\r\n\t\t\tif (this.audioCtx != null && this.scriptNode != null) {\r\n\t\t\t\tthis.scriptNode.disconnect(this.audioCtx.destination);\r\n\t\t\t\tthis.scriptNode = null;\r\n\t\t\t\tif (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n\t\t\t\tthis.audioCtx = null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\tpublic maintainLiveInput(): void {\r\n\t\t\t\tthis.activateAudio();\r\n\t\t\t\tthis.liveInputEndTime = performance.now() + 10000.0;\r\n\t\t\t}\r\n\r\n\t\tpublic play(): void {\r\n\t\t\tif (this.isPlaying) return;\r\n\t\t\tthis.isPlaying = true;\r\n\t\t\t\r\n\t\t\tSynth.warmUpSynthesizer(this.song);\r\n\t\t\tthis.activateAudio();\r\n\t\t}\r\n\t\t\r\n\t\tpublic pause(): void {\r\n\t\t\tif (!this.isPlaying) return;\r\n\t\t\tthis.isPlaying = false;\r\n\t\t\tthis.deactivateAudio();\r\n\t\t\tthis.scriptNode = null;\r\n\t\t}\r\n\t\t\r\n\t\t/*private determineLiveInputTones(song: Song): void {\r\n\t\t\tconst toneList: Deque<Tone> = this.liveInputTones;\r\n\t\t\tconst pitches: number[] = this.liveInputPitches;\r\n\t\t\tlet toneCount: number = 0;\r\n\t\t\tif (this.liveInputDuration > 0) {\r\n\t\t\t\tconst instrument: Instrument = song.channels[this.liveInputChannel].instruments[song.getPatternInstrument(this.liveInputChannel, this.bar)];\r\n\t\t\t\t\r\n\t\t\t\tif (instrument.getChord().arpeggiates) {\r\n\t\t\t\t\tlet tone: Tone;\r\n\t\t\t\t\tif (toneList.count() == 0) {\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popFront());\r\n\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttone = toneList.get(0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttoneCount = 1;\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\t\ttone.pitches[i] = pitches[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttone.pitchCount = pitches.length;\r\n\t\t\t\t\ttone.chordSize = 1;\r\n\t\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//const transition: Transition = instrument.getTransition();\r\n\t\t\t\t\tfor (let i: number = 0; i < pitches.length; i++) {\r\n\t\t\t\t\t\t//const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n\t\t\t\t\t\tlet tone: Tone;\r\n\t\t\t\t\t\tif (toneList.count() <= i) {\r\n\t\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\t\ttoneList.pushBack(tone);\r\n\t\t\t\t\t\t} else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n\t\t\t\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.get(i));\r\n\t\t\t\t\t\t\ttone = this.newTone();\r\n\t\t\t\t\t\t\ttoneList.set(i, tone);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttone = toneList.get(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttoneCount++;\r\n\r\n\t\t\t\t\t\ttone.pitches[0] = pitches[i];\r\n\t\t\t\t\t\ttone.pitchCount = 1;\r\n\t\t\t\t\t\ttone.chordSize = pitches.length;\r\n\t\t\t\t\t\ttone.instrument = instrument;\r\n\t\t\t\t\t\ttone.note = tone.prevNote = tone.nextNote = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twhile (toneList.count() > toneCount) {\r\n\t\t\t\tthis.releaseTone(this.liveInputChannel, toneList.popBack());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.liveInputStarted = false;\r\n\t\t}*/\r\n\r\n\t\tpublic snapToStart(): void {\r\n\t\t\tthis.bar = 0;\r\n\t\t\tthis.enableIntro = true;\r\n\t\t\tthis.snapToBar();\r\n\t\t}\r\n\t\t\r\n\t\tpublic snapToBar(bar?: number): void {\r\n\t\t\tif (bar !== undefined) this.bar = bar;\r\n\t\t\tthis.playheadInternal = this.bar;\r\n\t\t\tthis.beat = 0;\r\n\t\t\tthis.part = 0;\r\n\t\t\tthis.arpeggio = 0;\r\n\t\t\tthis.arpSampleCountdown = 0;\r\n\t\t\tthis.effectPhase = 0.0;\r\n\t\t\t\r\n\t\t\tfor (const channel of this.channels) channel.reset();\r\n\t\t\t\r\n\t\t\tthis.delayPosLeft = 0;\r\n\t\t\tthis.delayPosRight = 0;\r\n\t\t\tthis.delayFeedback0Left = 0.0;\r\n\t\t\tthis.delayFeedback0Right = 0.0;\r\n\t\t\tthis.delayFeedback1Left = 0.0;\r\n\t\t\tthis.delayFeedback1Right = 0.0;\r\n\t\t\tthis.delayFeedback2Left = 0.0;\r\n\t\t\tthis.delayFeedback2Right = 0.0;\r\n\t\t\tthis.delayFeedback3Left = 0.0;\r\n\t\t\tthis.delayFeedback3Right = 0.0;\r\n\t\t\tfor (let i: number = 0; i < this.delayLineLeft.length; i++) this.delayLineLeft[i] = 0.0;\r\n\t\t\tfor (let i: number = 0; i < this.delayLineRight.length; i++) this.delayLineRight[i] = 0.0;\r\n\t\t}\r\n\t\t\r\n\t\tpublic nextBar(): void {\r\n\t\t\tif (!this.song) return;\r\n\t\t\tconst oldBar: number = this.bar;\r\n\t\t\tthis.bar++;\r\n\t\t\tif (this.enableOutro) {\r\n\t\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\t\tthis.bar = this.enableIntro ? 0 : this.song.loopStart;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (this.bar >= this.song.loopStart + this.song.loopLength || this.bar >= this.song.barCount) {\r\n\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t}\r\n \t\t\t}\r\n\t\t\tthis.playheadInternal += this.bar - oldBar;\r\n\t\t}\r\n\t\t\r\n\t\tpublic prevBar(): void {\r\n\t\t\tif (!this.song) return;\r\n\t\t\tconst oldBar: number = this.bar;\r\n\t\t\tthis.bar--;\r\n\t\t\tif (this.bar < 0) {\r\n\t\t\t\tthis.bar = this.song.loopStart + this.song.loopLength - 1;\r\n\t\t\t}\r\n\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\tthis.bar = this.song.barCount - 1;\r\n\t\t\t}\r\n\t\t\tif (this.bar < this.song.loopStart) {\r\n\t\t\t\tthis.enableIntro = true;\r\n\t\t\t}\r\n\t\t\tif (!this.enableOutro && this.bar >= this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\tthis.bar = this.song.loopStart + this.song.loopLength - 1;\r\n\t\t\t}\r\n\t\t\tthis.playheadInternal += this.bar - oldBar;\r\n\t\t}\r\n\t\t\r\n\t\tprivate audioProcessCallback = (audioProcessingEvent: any): void => {\r\n\t\t\tconst outputBuffer = audioProcessingEvent.outputBuffer;\r\n\t\t\tconst outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n\t\t\tconst outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n\t\t\tif (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length-1] != 0.0 || outputDataR[outputBuffer.length-1] != 0.0)) {\r\n\t\t\t// If the buffer is ever initially nonzero, then this must be an older browser that doesn't automatically clear the audio buffer.\r\n\t\t\tthis.browserAutomaticallyClearsAudioBuffer = false;\r\n\t\t\t}\r\n\t\t\tif (!this.browserAutomaticallyClearsAudioBuffer) {\r\n\t\t\t\t// If this browser does not clear the buffer automatically, do so manually before continuing.\r\n\t\t\t\tconst length: number = outputBuffer.length;\r\n\t\t\t\tfor (let i: number = 0; i < length; i++) {\r\n\t\t\t\t\toutputDataL[i] = 0.0;\r\n\t\t\t\t\toutputDataR[i] = 0.0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.isPlaying && performance.now() >= this.liveInputEndTime) { \r\n\t\t\t\tthis.deactivateAudio();\r\n\t\t\t} else {\r\n\t\t\t\tthis.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlaying);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic synthesize(dataLeft: Float32Array, dataRight: Float32Array, bufferLength: number, playSong: boolean = true): void {\r\n\t\t\tif (this.song == null) {\r\n\t\t\t\tfor (let i: number = 0; i < bufferLength; i++) {\r\n\t\t\t\t\tdataLeft[i] = 0.0;\r\n\t\t\t\t\tdataRight[i] = 0.0;\r\n\t\t\t\t}\r\n\t\t\t\tthis.deactivateAudio();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst channelCount: number = this.song.getChannelCount();\r\n\t\t\tfor (let i: number = this.channels.length; i < channelCount; i++) {\r\n\t\t\t\tthis.channels[i] = new SynthChannel();\r\n\t\t\t}\r\n\t\t\tthis.channels.length = channelCount;\r\n\t\t\t\r\n\t\t\tconst samplesPerTick: number = this.getSamplesPerArpeggio();\r\n\t\t\tlet bufferIndex: number = 0;\r\n\t\t\tlet ended: boolean = false;\r\n\t\t\t\r\n\t\t\t// Check the bounds of the playhead:\r\n\t\t\tif (this.arpSampleCountdown == 0 || this.arpSampleCountdown > samplesPerTick) {\r\n\t\t\t\tthis.arpSampleCountdown = samplesPerTick;\r\n\t\t\t}\r\n\t\t\tif (playSong) {\r\n\t\t\t\tif (this.part >= this.song.partsPerBeat) {\r\n\t\t\t\t\tthis.beat++;\r\n\t\t\t\t\tthis.part = 0;\r\n\t\t\t\t\tthis.arpeggio = 0;\r\n\t\t\t\t\tthis.arpSampleCountdown = samplesPerTick;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.beat >= this.song.beatsPerBar) {\r\n\t\t\t\t\tthis.bar++;\r\n\t\t\t\t\tthis.beat = 0;\r\n\t\t\t\t\tthis.part = 0;\r\n\t\t\t\t\tthis.arpeggio = 0;\r\n\t\t\t\t\tthis.arpSampleCountdown = samplesPerTick;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (this.loopCount == -1) {\r\n\t\t\t\t\t\tif (this.bar < this.song.loopStart && !this.enableIntro) this.bar = this.song.loopStart;\r\n\t\t\t\t\t\tif (this.bar >= this.song.loopStart + this.song.loopLength && !this.enableOutro) this.bar = this.song.loopStart;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\t\tif (this.enableOutro) {\r\n\t\t\t\t\t\tthis.bar = 0;\r\n\t\t\t\t\t\tthis.enableIntro = true;\r\n\t\t\t\t\t\tended = true;\r\n\t\t\t\t\t\tthis.pause();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.bar >= this.song.loopStart) {\r\n\t\t\t\t\tthis.enableIntro = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n \t\t\twhile (true) {\r\n\t\t\t\tif (ended) {\r\n\t\t\t\t\twhile (bufferIndex < bufferLength) {\r\n\t\t\t\t\t\tdataLeft[bufferIndex] = 0.0;\r\n\t\t\t\t\t\tdataRight[bufferIndex] = 0.0;\r\n\t\t\t\t\t\tbufferIndex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst generatedSynthesizer: Function = Synth.getGeneratedSynthesizer(this.song, this.bar);\r\n\t\t\t\tbufferIndex = generatedSynthesizer(this, this.song, dataLeft, dataRight, bufferLength, bufferIndex, samplesPerTick);\r\n\t\t\t\t\r\n\t\t\t\tconst finishedBuffer: boolean = (bufferIndex == -1);\r\n\t\t\t\tif (finishedBuffer) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// bar changed, reset for next bar:\r\n\t\t\t\t\tthis.beat = 0;\r\n\t\t\t\t\tthis.effectPhase = 0.0;\r\n\t\t\t\t\tthis.bar++;\r\n\t\t\t\t\tif (this.bar < this.song.loopStart) {\r\n\t\t\t\t\t\tif (!this.enableIntro) this.bar = this.song.loopStart;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.enableIntro = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.bar >= this.song.loopStart + this.song.loopLength) {\r\n\t\t\t\t\t\tif (this.loopCount > 0) this.loopCount--;\r\n\t\t\t\t\t\tif (this.loopCount > 0 || !this.enableOutro) {\r\n\t\t\t\t\t\t\tthis.bar = this.song.loopStart;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.bar >= this.song.barCount) {\r\n\t\t\t\t\t\tthis.bar = 0;\r\n\t\t\t\t\t\tthis.enableIntro = true;\r\n\t\t\t\t\t\tended = true;\r\n\t\t\t\t\t\tthis.pause();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.playheadInternal = (((this.arpeggio + 1.0 - this.arpSampleCountdown / samplesPerTick) / 4.0 + this.part) / this.song.partsPerBeat + this.beat) / this.song.beatsPerBar + this.bar;\r\n\t\t}\r\n\r\n\t\tprivate static computeOperatorEnvelope(envelope: number, time: number, beats: number, customVolume: number): number {\r\n\t\t\tswitch(Config.operatorEnvelopeType[envelope]) {\r\n\t\t\t\tcase EnvelopeType.custom: return customVolume;\r\n\t\t\t\tcase EnvelopeType.steady: return 1.0;\r\n\t\t\t\tcase EnvelopeType.pluck:\r\n\t\t\t\t\tlet curve: number = 1.0 / (1.0 + time * Config.operatorEnvelopeSpeed[envelope]);\r\n\t\t\t\t\tif (Config.operatorEnvelopeInverted[envelope]) {\r\n\t\t\t\t\t\treturn 1.0 - curve;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn curve;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase EnvelopeType.tremolo: \r\n\t\t\t\t\tif (Config.operatorSpecialCustomVolume[envelope]) {\r\n\t\t\t\t\t\treturn 0.5 - Math.cos(beats * 2.0 * Math.PI * (customVolume * 4)) * 0.5;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn 0.5 - Math.cos(beats * 2.0 * Math.PI * Config.operatorEnvelopeSpeed[envelope]) * 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\tcase EnvelopeType.punch: \r\n\t\t\t\t\treturn Math.max(1.0, 2.0 - time * 10.0);\r\n\t\t\t\tcase EnvelopeType.flare:\r\n\t\t\t\t\tif (Config.operatorSpecialCustomVolume[envelope]) {\r\n\t\t\t\t\t\tconst attack: number = 0.25 / Math.sqrt(customVolume);\r\n\t\t\t\t\t\treturn time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * (customVolume * 16));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst speed: number = Config.operatorEnvelopeSpeed[envelope];\r\n\t\t\t\t\t\tconst attack: number = 0.25 / Math.sqrt(speed);\r\n\t\t\t\t\t\treturn time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * speed);\r\n\t\t\t\t\t}\r\n\t\t\t\tcase EnvelopeType.flute:\r\n\t\t\t\t\treturn Math.max(-1.0 - time, -2.0 + time);\r\n\t\t\t\tdefault: throw new Error(\"Unrecognized operator envelope type.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic static computeChannelInstrument(synth: Synth, song: Song, channel: number, time: number, sampleTime: number, samplesPerTick: number, samples: number): void {\r\n\t\t\tconst isDrum: boolean = song.getChannelIsDrum(channel);\r\n\t\t\tconst synthChannel: SynthChannel = synth.channels[channel];\r\n\t\t\tconst pattern: Pattern | null = song.getPattern(channel, synth.bar);\r\n\t\t\tconst instrument: Instrument = song.channels[channel].instruments[pattern == null ? 0 : pattern.instrument];\r\n\t\t\tconst pianoMode = (synth.pianoPressed && channel == synth.pianoChannel);\r\n\t\t\tconst basePitch: number = isDrum ? Config.drumBasePitches[instrument.wave] : Config.keys[song.key].basePitch;\r\n\t\t\tconst intervalScale: number = isDrum ? Config.drumInterval : 1;\r\n\t\t\tconst pitchDamping: number = isDrum ? (Config.drumWaveIsSoft[instrument.wave] ? 24.0 : 60.0) : 48.0;\r\n\t\t\tconst secondsPerPart: number = 4.0 * samplesPerTick / synth.samplesPerSecond;\r\n\t\t\tconst beatsPerPart: number = 1.0 / song.partsPerBeat;\r\n\t\t\t\r\n\t\t\tsynthChannel.phaseDeltaScale = 0.0;\r\n\t\t\tsynthChannel.filter = 1.0;\r\n\t\t\tsynthChannel.filterScale = 1.0;\r\n\t\t\tsynthChannel.vibratoScale = 0.0;\r\n\t\t\tsynthChannel.harmonyMult = 1.0;\r\n\t\t\tsynthChannel.harmonyVolumeMult = 1.0;\r\n\t\t\t\r\n\t\t\tlet partsSinceStart: number = 0.0;\r\n\t\t\tlet arpeggio: number = synth.arpeggio;\r\n\t\t\tlet arpSampleCountdown: number = synth.arpSampleCountdown;\r\n\t\t\t\r\n\t\t\tlet pitches: number[] | null = null;\r\n\t\t\tlet resetPhases: boolean = true;\r\n\t\t\t\r\n\t\t\tlet intervalStart: number = 0.0;\r\n\t\t\tlet intervalEnd: number = 0.0;\r\n\t\t\tlet transitionVolumeStart: number = 1.0;\r\n\t\t\tlet transitionVolumeEnd: number = 1.0;\r\n\t\t\tlet envelopeVolumeStart: number = 0.0;\r\n\t\t\tlet envelopeVolumeEnd: number = 0.0;\r\n\t\t\t// TODO: probably part time can be calculated independently of any notes?\r\n\t\t\tlet partTimeStart: number = 0.0;\r\n\t\t\tlet partTimeEnd:   number = 0.0;\r\n\t\t\tlet decayTimeStart: number = 0.0;\r\n\t\t\tlet decayTimeEnd:   number = 0.0;\r\n\t\t\t\r\n\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\tsynthChannel.phaseDeltas[i] = 0.0;\r\n\t\t\t\tsynthChannel.volumeStarts[i] = 0.0;\r\n\t\t\t\tsynthChannel.volumeDeltas[i] = 0.0;\r\n\t\t\t\tsynthChannel.volumeLeft[0] = 0.0;\r\n\t\t\t\tsynthChannel.volumeRight[0] = 0.0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (pianoMode) {\r\n\t\t\t\tpitches = synth.pianoPitch;\r\n\t\t\t\ttransitionVolumeStart = transitionVolumeEnd = 1;\r\n\t\t\t\tenvelopeVolumeStart = envelopeVolumeEnd = 1;\r\n\t\t\t\tresetPhases = false;\r\n\t\t\t\t// TODO: track time since live piano note started for transition, envelope, decays, delayed vibrato, etc.\r\n\t\t\t} else if (pattern != null) {\r\n\t\t\t\tlet note: Note | null = null;\r\n\t\t\t\tlet prevNote: Note | null = null;\r\n\t\t\t\tlet nextNote: Note | null = null;\r\n\t\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\t\tif (pattern.notes[i].end <= time) {\r\n\t\t\t\t\t\tprevNote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n\t\t\t\t\t\tnote = pattern.notes[i];\r\n\t\t\t\t\t} else if (pattern.notes[i].start > time) {\r\n\t\t\t\t\t\tnextNote = pattern.notes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (note != null && prevNote != null && prevNote.end != note.start) prevNote = null;\r\n\t\t\t\tif (note != null && nextNote != null && nextNote.start != note.end) nextNote = null;\r\n\t\t\t\t\r\n\t\t\t\tif (note != null) {\r\n\t\t\t\t\tpitches = note.pitches;\r\n\t\t\t\t\tpartsSinceStart = time - note.start;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet endPinIndex: number;\r\n\t\t\t\t\tfor (endPinIndex = 1; endPinIndex < note.pins.length - 1; endPinIndex++) {\r\n\t\t\t\t\t\tif (note.pins[endPinIndex].time + note.start > time) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst startPin: NotePin = note.pins[endPinIndex-1];\r\n\t\t\t\t\tconst endPin: NotePin = note.pins[endPinIndex];\r\n\t\t\t\t\tconst noteStart: number = note.start * 4;\r\n\t\t\t\t\tconst noteEnd:   number = note.end   * 4;\r\n\t\t\t\t\tconst pinStart: number  = (note.start + startPin.time) * 4;\r\n\t\t\t\t\tconst pinEnd:   number  = (note.start +   endPin.time) * 4;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst tickTimeStart: number = time * 4 + arpeggio;\r\n\t\t\t\t\tconst tickTimeEnd:   number = time * 4 + arpeggio + 1;\r\n\t\t\t\t\tconst pinRatioStart: number = (tickTimeStart - pinStart) / (pinEnd - pinStart);\r\n\t\t\t\t\tconst pinRatioEnd:   number = (tickTimeEnd   - pinStart) / (pinEnd - pinStart);\r\n\t\t\t\t\tlet envelopeVolumeTickStart: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioStart;\r\n\t\t\t\t\tlet envelopeVolumeTickEnd:   number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioEnd;\r\n\t\t\t\t\tlet transitionVolumeTickStart: number = 1.0;\r\n\t\t\t\t\tlet transitionVolumeTickEnd:   number = 1.0;\r\n\t\t\t\t\tlet intervalTickStart: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n\t\t\t\t\tlet intervalTickEnd:   number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n\t\t\t\t\tlet partTimeTickStart: number = startPin.time + (endPin.time - startPin.time) * pinRatioStart;\r\n\t\t\t\t\tlet partTimeTickEnd:   number = startPin.time + (endPin.time - startPin.time) * pinRatioEnd;\r\n\t\t\t\t\tlet decayTimeTickStart: number = partTimeTickStart;\r\n\t\t\t\t\tlet decayTimeTickEnd:   number = partTimeTickEnd;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst startRatio: number = 1.0 - (arpSampleCountdown + samples) / samplesPerTick;\r\n\t\t\t\t\tconst endRatio:   number = 1.0 - (arpSampleCountdown)           / samplesPerTick;\r\n\t\t\t\t\tresetPhases = (tickTimeStart + startRatio - noteStart == 0.0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst transition: number = instrument.transition;\r\n\t\t\t\t\tif (tickTimeStart == noteStart) {\r\n\t\t\t\t\t\tif (transition == 0) {\r\n\t\t\t\t\t\t\t// seamless start\r\n\t\t\t\t\t\t\tresetPhases = false;\r\n\t\t\t\t\t\t} else if (transition == 2) {\r\n\t\t\t\t\t\t\t// smooth start\r\n\t\t\t\t\t\t\ttransitionVolumeTickStart = 0.0;\r\n\t\t\t\t\t\t} else if (transition == 3) {\r\n\t\t\t\t\t\t\t// slide start\r\n\t\t\t\t\t\t\tif (prevNote == null) {\r\n\t\t\t\t\t\t\t\ttransitionVolumeTickStart = 0.0;\r\n\t\t\t\t\t\t\t} else if (prevNote.pins[prevNote.pins.length-1].volume == 0 || note.pins[0].volume == 0) {\r\n\t\t\t\t\t\t\t\ttransitionVolumeTickStart = 0.0;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tintervalTickStart = (prevNote.pitches[0] + prevNote.pins[prevNote.pins.length-1].interval - note.pitches[0]) * 0.5;\r\n\t\t\t\t\t\t\t\tdecayTimeTickStart = prevNote.pins[prevNote.pins.length-1].time * 0.5;\r\n\t\t\t\t\t\t\t\tresetPhases = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (transition == 4) {\r\n\t\t\t\t\t\t\t// trill start\r\n\t\t\t\t\t\t\ttransitionVolumeTickEnd = 0.0;\r\n\t\t\t\t\t\t} else if (transition == 5) {\r\n\t\t\t\t\t\t\t// click start\r\n\t\t\t\t\t\t\tintervalTickStart = 100.0;\r\n\t\t\t\t\t\t} else if (transition == 6) {\r\n\t\t\t\t\t\t\t// bow start\r\n\t\t\t\t\t\t\tintervalTickStart = -1.0;\r\n\t\t\t\t\t\t} else if (transition == 7) {\r\n\t\t\t\t\t\t\t// blip start\r\n\t\t\t\t\t\t\ttransitionVolumeTickStart = 6.0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tickTimeEnd == noteEnd) {\r\n\t\t\t\t\t\tif (transition == 0) {\r\n\t\t\t\t\t\t\t// seamless ending: fade out, unless adjacent to another note or at end of bar.\r\n\t\t\t\t\t\t\tif (nextNote == null && note.start + endPin.time != song.partsPerBeat * song.beatsPerBar) {\r\n\t\t\t\t\t\t\t\ttransitionVolumeTickEnd = 0.0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (transition == 1 || transition == 2) {\r\n\t\t\t\t\t\t\t// sudden/smooth ending\r\n\t\t\t\t\t\t\ttransitionVolumeTickEnd = 0.0;\r\n\t\t\t\t\t\t} else if (transition == 3) {\r\n\t\t\t\t\t\t\t// slide ending\r\n\t\t\t\t\t\t\tif (nextNote == null) {\r\n\t\t\t\t\t\t\t\ttransitionVolumeTickEnd = 0.0;\r\n\t\t\t\t\t\t\t} else if (note.pins[note.pins.length-1].volume == 0 || nextNote.pins[0].volume == 0) {\r\n\t\t\t\t\t\t\t\ttransitionVolumeTickEnd = 0.0;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tintervalTickEnd = (nextNote.pitches[0] - note.pitches[0] + note.pins[note.pins.length-1].interval) * 0.5;\r\n\t\t\t\t\t\t\t\tdecayTimeTickEnd *= 0.5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tintervalStart = intervalTickStart + (intervalTickEnd - intervalTickStart) * startRatio;\r\n\t\t\t\t\tintervalEnd   = intervalTickStart + (intervalTickEnd - intervalTickStart) * endRatio;\r\n\t\t\t\t\tenvelopeVolumeStart = synth.volumeConversion(envelopeVolumeTickStart + (envelopeVolumeTickEnd - envelopeVolumeTickStart) * startRatio);\r\n\t\t\t\t\tenvelopeVolumeEnd   = synth.volumeConversion(envelopeVolumeTickStart + (envelopeVolumeTickEnd - envelopeVolumeTickStart) * endRatio);\r\n\t\t\t\t\ttransitionVolumeStart = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * startRatio;\r\n\t\t\t\t\ttransitionVolumeEnd   = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * endRatio;\r\n\t\t\t\t\tpartTimeStart = note.start + partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n\t\t\t\t\tpartTimeEnd   = note.start + partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\t\t\t\t\tdecayTimeStart = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * startRatio;\r\n\t\t\t\t\tdecayTimeEnd   = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * endRatio;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (pitches != null) {\r\n\t\t\t\tif (!isDrum && instrument.type == InstrumentType.fm) {\r\n\t\t\t\t\t// phase modulation!\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet sineVolumeBoost: number = 1.0;\r\n\t\t\t\t\tlet totalCarrierVolume: number = 0.0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst carrierCount: number = Config.operatorCarrierCounts[instrument.algorithm];\r\n\t\t\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\t\t\tconst isCarrier: boolean = i < Config.operatorCarrierCounts[instrument.algorithm];\r\n\t\t\t\t\t\tconst associatedCarrierIndex: number = Config.operatorAssociatedCarrier[instrument.algorithm][i] - 1;\r\n\t\t\t\t\t\tconst pitch: number = pitches[(i < pitches.length) ? i : ((associatedCarrierIndex < pitches.length) ? associatedCarrierIndex : 0)] + Config.octoffValues[instrument.octoff] + (song.detune / 24);\r\n\t\t\t\t\t\tconst freqMult = Config.operatorFrequencies[instrument.operators[i].frequency];\r\n\t\t\t\t\t\tconst chorusInterval = Config.operatorCarrierChorus[Config.fmChorusNames[instrument.fmChorus]][associatedCarrierIndex];\r\n\t\t\t\t\t\tconst startPitch: number = (pitch + intervalStart) * intervalScale + chorusInterval;\r\n\t\t\t\t\t\tconst startFreq: number = freqMult * (synth.frequencyFromPitch(basePitch + startPitch)) + Config.operatorHzOffsets[instrument.operators[i].frequency];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsynthChannel.phaseDeltas[i] = startFreq * sampleTime * Config.sineWaveLength;\r\n\t\t\t\t\t\tif (resetPhases) synthChannel.reset();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst amplitudeCurve: number = Synth.operatorAmplitudeCurve(instrument.operators[i].amplitude);\r\n\t\t\t\t\t\t// const amplitudeMult: number = amplitudeCurve * Config.operatorAmplitudeSigns[instrument.operators[i].frequency];\r\n\t\t\t\t\t\t// @TODO: Revisit\r\n\t\t\t\t\t\tlet amplitudeMult: number = 0;\r\n\t\t\t\t\t\tif ((Config.volumeValues[instrument.volume] != -1.0 && song.mix == 2) || (Config.volumeMValues[instrument.volume] != -1.0 && song.mix != 2)) {\r\n\t\t\t\t\t\t\tif (song.mix == 2) {\r\n\t\t\t\t\t\t\t\tamplitudeMult = isCarrier ? (amplitudeCurve * Config.operatorAmplitudeSigns[instrument.operators[i].frequency]) * (1 - Config.volumeValues[instrument.volume] / 2.3) : (amplitudeCurve * Config.operatorAmplitudeSigns[instrument.operators[i].frequency]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tamplitudeMult = (amplitudeCurve * Config.operatorAmplitudeSigns[instrument.operators[i].frequency]) * (1 - Config.volumeMValues[instrument.volume] / 2.3);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (Config.volumeValues[instrument.volume] != -1.0) {\r\n\t\t\t\t\t\t\tamplitudeMult = 0;\r\n\t\t\t\t\t\t} else if (Config.volumeMValues[instrument.volume] != -1.0) {\r\n\t\t\t\t\t\t\tamplitudeMult = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet volumeStart: number = amplitudeMult * Config.imuteValues[instrument.imute];\r\n\t\t\t\t\t\tlet volumeEnd: number = amplitudeMult * Config.imuteValues[instrument.imute];\r\n\t\t\t\t\t\tsynthChannel.volumeLeft[0] = Math.min(1, 1 + Config.ipanValues[instrument.ipan]);\r\n\t\t\t\t\t\tsynthChannel.volumeRight[0] = Math.min(1, 1 - Config.ipanValues[instrument.ipan]);\r\n\t\t\t\t\t\tif (i < carrierCount) {\r\n\t\t\t\t\t\t\t// carrier\r\n\t\t\t\t\t\t\tconst volumeMult: number = 0.03;\r\n\t\t\t\t\t\t\t// The commented out portion in the line below fixes\r\n\t\t\t\t\t\t\t// the crackling heard when using FM chorus. It seems\r\n\t\t\t\t\t\t\t// that it was accidentally omitted in BeepBox 2.3.\r\n\t\t\t\t\t\t\tconst endPitch: number = (pitch + intervalEnd) * intervalScale/* + chorusInterval */;\r\n\t\t\t\t\t\t\tlet pitchVolumeStart: number = 0;\r\n\t\t\t\t\t\t\tlet pitchVolumeEnd: number = 0;\r\n\t\t\t\t\t\t\tif (song.mix == 3) {\r\n\t\t\t\t\t\t\t\tpitchVolumeStart = Math.pow(5.0, -startPitch / pitchDamping);\r\n\t\t\t\t\t\t\t\tpitchVolumeEnd   = Math.pow(5.0,   -endPitch / pitchDamping);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tpitchVolumeStart = Math.pow(2.0, -startPitch / pitchDamping);\r\n\t\t\t\t\t\t\t\tpitchVolumeEnd   = Math.pow(2.0,   -endPitch / pitchDamping);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvolumeStart *= pitchVolumeStart * volumeMult * transitionVolumeStart;\r\n\t\t\t\t\t\t\tvolumeEnd *= pitchVolumeEnd * volumeMult * transitionVolumeEnd;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\ttotalCarrierVolume += amplitudeCurve;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// modulator\r\n\t\t\t\t\t\t\tvolumeStart *= Config.sineWaveLength * 1.5;\r\n\t\t\t\t\t\t\tvolumeEnd *= Config.sineWaveLength * 1.5;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tsineVolumeBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst envelope: number = instrument.operators[i].envelope;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvolumeStart *= Synth.computeOperatorEnvelope(envelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, envelopeVolumeStart);\r\n\t\t\t\t\t\tvolumeEnd *= Synth.computeOperatorEnvelope(envelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, envelopeVolumeEnd);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsynthChannel.volumeStarts[i] = volumeStart;\r\n\t\t\t\t\t\tsynthChannel.volumeDeltas[i] = (volumeEnd - volumeStart) / samples;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst feedbackAmplitude: number = Config.sineWaveLength * 0.3 * instrument.feedbackAmplitude / 15.0;\r\n\t\t\t\t\tlet feedbackStart: number = feedbackAmplitude * Synth.computeOperatorEnvelope(instrument.feedbackEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, envelopeVolumeStart);\r\n\t\t\t\t\tlet feedbackEnd: number = feedbackAmplitude * Synth.computeOperatorEnvelope(instrument.feedbackEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, envelopeVolumeEnd);\r\n\t\t\t\t\tsynthChannel.feedbackMult = feedbackStart;\r\n\t\t\t\t\tsynthChannel.feedbackDelta = (feedbackEnd - synthChannel.feedbackMult) / samples;\r\n\t\t\t\t\t\r\n\t\t\t\t\tsineVolumeBoost *= 1.0 - instrument.feedbackAmplitude / 15.0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tsineVolumeBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolume - 1) / 2.0);\r\n\t\t\t\t\tfor (let i: number = 0; i < carrierCount; i++) {\r\n\t\t\t\t\t\tsynthChannel.volumeStarts[i] *= 1.0 + sineVolumeBoost * 3.0;\r\n\t\t\t\t\t\tsynthChannel.volumeDeltas[i] *= 1.0 + sineVolumeBoost * 3.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet pitch: number = pitches[0];\r\n\t\t\t\t\t// if (Config.chorusHarmonizes[instrument.chorus]) {\r\n\t\t\t\t\t// \tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t// \tif (pitches.length == 2) {\r\n\t\t\t\t\t// \t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t// \t} else if (pitches.length == 3) {\r\n\t\t\t\t\t// \t\tharmonyOffset = pitches[(arpeggio >> 1) + 1] - pitches[0];\r\n\t\t\t\t\t// \t} else if (pitches.length == 4) {\r\n\t\t\t\t\t// \t\tharmonyOffset = pitches[(arpeggio == 3 ? 1 : arpeggio) + 1] - pitches[0];\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t// \tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t// } else {\r\n\t\t\t\t\t// \tif (pitches.length == 2) {\r\n\t\t\t\t\t// \t\tpitch = pitches[arpeggio >> 1];\r\n\t\t\t\t\t// \t} else if (pitches.length == 3) {\r\n\t\t\t\t\t// \t\tpitch = pitches[arpeggio == 3 ? 1 : arpeggio];\r\n\t\t\t\t\t// \t} else if (pitches.length == 4) {\r\n\t\t\t\t\t// \t\tpitch = pitches[arpeggio];\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// }\r\n\t\t\t\t\tif (!isDrum) {\r\n\t\t\t\t\t\tif (Config.harmNames[instrument.harm] == 1) {\r\n\t\t\t\t\t\t\t// duet\r\n\t\t\t\t\t\t\tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio >> 1) + 1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio == 3 ? 1 : arpeggio) + 1] - pitches[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t\t\tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 2) {\r\n\t\t\t\t\t\t\t// chord\r\n\t\t\t\t\t\t\tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[2] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio == 3 ? 2 : arpeggio) + 1] - pitches[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t\t\tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 3) {\r\n\t\t\t\t\t\t\t// seventh\r\n\t\t\t\t\t\t\tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[2] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[3] - pitches[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t\t\tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 4) {\r\n\t\t\t\t\t\t\t// half arpeggio\r\n\t\t\t\t\t\t\tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio >> 1) + 1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio >> 1) + 2] - pitches[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t\t\tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 5) {\r\n\t\t\t\t\t\t\t// arp-chord\r\n\t\t\t\t\t\t\tlet harmonyOffset: number = 0.0;\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[1] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[2] - pitches[0];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tharmonyOffset = pitches[(arpeggio == 3 ? 2 : arpeggio)] - pitches[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsynthChannel.harmonyMult = Math.pow(2.0, harmonyOffset / 12.0);\r\n\t\t\t\t\t\t\tsynthChannel.harmonyVolumeMult = Math.pow(2.0, -harmonyOffset / pitchDamping)\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 0) {\r\n\t\t\t\t\t\t\t// arpeggio\r\n\t\t\t\t\t\t\tif (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio >> 1];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio == 3 ? 1 : arpeggio];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (Config.harmNames[instrument.harm] == 0) {\r\n\t\t\t\t\t\t\t// arpeggio\r\n\t\t\t\t\t\t\tif (pitches.length == 1) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio >> 1] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio == 3 ? 1 : arpeggio] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[arpeggio] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 1) {\r\n\t\t\t\t\t\t\t// duet\r\n\t\t\t\t\t\t\tif (pitches.length == 1) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[(arpeggio >> 1) + 1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[(arpeggio == 3 ? 1 : arpeggio) + 1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 2) {\r\n\t\t\t\t\t\t\t// chord\r\n\t\t\t\t\t\t\tif (pitches.length == 1) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[2] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[(arpeggio == 3 ? 2 : arpeggio) + 1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 3) {\r\n\t\t\t\t\t\t\t// seventh\r\n\t\t\t\t\t\t\tif (pitches.length == 1) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[2] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[3] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (Config.harmNames[instrument.harm] == 4) {\r\n\t\t\t\t\t\t\t// half arpeggio\r\n\t\t\t\t\t\t\tif (pitches.length == 1) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 2) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 3) {\r\n\t\t\t\t\t\t\t\tpitch = (pitches[(arpeggio >> 1) + 1] + pitches[0]) / 2 + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t} else if (pitches.length == 4) {\r\n\t\t\t\t\t\t\t\tpitch = pitches[(arpeggio >> 1) + 2] + pitches[0] + Config.octoffValues[instrument.octoff];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst startPitch: number = (pitch + intervalStart) * intervalScale;\r\n\t\t\t\t\tconst endPitch: number = (pitch + intervalEnd) * intervalScale;\r\n\t\t\t\t\tconst startFreq: number = synth.frequencyFromPitch(basePitch + startPitch);\r\n\t\t\t\t\tconst pitchVolumeStart: number = Math.pow(2.0, -startPitch / pitchDamping);\r\n\t\t\t\t\tconst pitchVolumeEnd: number   = Math.pow(2.0,   -endPitch / pitchDamping);\r\n\t\t\t\t\tif (isDrum && Config.drumWaveIsSoft[instrument.wave]) {\r\n\t\t\t\t\t\tsynthChannel.filter = Math.min(1.0, startFreq * sampleTime * Config.drumPitchFilterMult[instrument.wave]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet settingsVolumeMult: number;\r\n\t\t\t\t\tif (!isDrum) {\r\n\t\t\t\t\t\tconst filterScaleRate: number = Config.filterDecays[instrument.filter];\r\n\t\t\t\t\t\tsynthChannel.filter = Math.pow(2, -filterScaleRate * secondsPerPart * decayTimeStart);\r\n\t\t\t\t\t\tconst endFilter: number = Math.pow(2, -filterScaleRate * secondsPerPart * decayTimeEnd);\r\n\t\t\t\t\t\tsynthChannel.filterScale = Math.pow(endFilter / synthChannel.filter, 1.0 / samples);\r\n\t\t\t\t\t\tsettingsVolumeMult = 0.27 * 0.5 * Config.waveVolumes[instrument.wave] * Config.filterVolumes[instrument.filter] * Config.chorusVolumes[instrument.chorus];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (song.mix == 0) {\r\n\t\t\t\t\t\t\tsettingsVolumeMult = 0.19 * Config.drumVolumes[instrument.wave];\r\n\t\t\t\t\t\t} else if (song.mix == 3) {\r\n\t\t\t\t\t\t\tsettingsVolumeMult = 0.12 * Config.drumVolumes[instrument.wave];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsettingsVolumeMult = 0.09 * Config.drumVolumes[instrument.wave];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (resetPhases && !isDrum) {\r\n\t\t\t\t\t\tsynthChannel.reset();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tsynthChannel.phaseDeltas[0] = startFreq * sampleTime;\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet instrumentVolumeMult: number = 0;\r\n\t\t\t\t\tif (song.mix == 2) {\r\n\t\t\t\t\t\tinstrumentVolumeMult = (instrument.volume == 9) ? 0.0 : Math.pow(3, -Config.volumeValues[instrument.volume]) * Config.imuteValues[instrument.imute];\r\n\t\t\t\t\t} else if (song.mix == 1) {\r\n\t\t\t\t\t\tinstrumentVolumeMult = (instrument.volume >= 5) ? 0.0 : Math.pow(3, -Config.volumeMValues[instrument.volume]) * Config.imuteValues[instrument.imute];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tinstrumentVolumeMult = (instrument.volume >= 5) ? 0.0 : Math.pow(2, -Config.volumeMValues[instrument.volume]) * Config.imuteValues[instrument.imute];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsynthChannel.volumeStarts[0] = transitionVolumeStart * envelopeVolumeStart * pitchVolumeStart * settingsVolumeMult * instrumentVolumeMult;\r\n\t\t\t\t\tconst volumeEnd: number = transitionVolumeEnd * envelopeVolumeEnd * pitchVolumeEnd * settingsVolumeMult * instrumentVolumeMult;\r\n\t\t\t\t\tsynthChannel.volumeDeltas[0] = (volumeEnd - synthChannel.volumeStarts[0]) / samples;\r\n\t\t\t\t\tsynthChannel.volumeLeft[0] = Math.min(1, 1 + Config.ipanValues[instrument.ipan]);\r\n\t\t\t\t\tsynthChannel.volumeRight[0] = Math.min(1, 1 - Config.ipanValues[instrument.ipan]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsynthChannel.phaseDeltaScale = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / 12.0) / samples);\r\n\t\t\t\tsynthChannel.vibratoScale = (partsSinceStart < Config.effectVibratoDelays[instrument.effect]) ? 0.0 : Math.pow(2.0, Config.effectVibratos[instrument.effect] / 12.0) - 1.0;\r\n\t\t\t} else {\r\n\t\t\t\t// @TODO: ModBox doesn't have this guard around .reset, why?\r\n\t\t\t\t// if (!isDrum) {\r\n\t\t\t\t\tsynthChannel.reset();\r\n\t\t\t\t// }\r\n\t\t\t\tfor (let i: number = 0; i < Config.operatorCount; i++) {\r\n\t\t\t\t\tsynthChannel.phaseDeltas[0] = 0.0;\r\n\t\t\t\t\tsynthChannel.volumeStarts[0] = 0.0;\r\n\t\t\t\t\tsynthChannel.volumeDeltas[0] = 0.0;\r\n\t\t\t\t\tsynthChannel.volumeLeft[0] = 0.0;\r\n\t\t\t\t\tsynthChannel.volumeRight[0] = 0.0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tprivate static readonly generatedSynthesizers: Dictionary<Function> = {};\r\n\t\t\r\n\t\tprivate static getGeneratedSynthesizer(song: Song, bar: number): Function {\r\n\t\t\tconst fingerprint: string = song.getChannelFingerprint(bar);\r\n\t\t\tif (Synth.generatedSynthesizers[fingerprint] == undefined) {\r\n\t\t\t\tconst synthSource: string[] = [];\r\n\t\t\t\tconst instruments: Instrument[] = [];\r\n\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\tinstruments[channel] = song.channels[channel].instruments[song.getPatternInstrument(channel, bar)];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor (const line of Synth.synthSourceTemplate) {\r\n\t\t\t\t\tif (line.indexOf(\"#\") != -1) {\r\n\t\t\t\t\t\tif (line.indexOf(\"// PITCH\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// JCHIP\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.chip) {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// CHIP\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.chip) {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t\t} else if (instruments[channel].type == InstrumentType.pwm) {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// FM\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\t\t\tif (line.indexOf(\"$\") != -1) {\r\n\t\t\t\t\t\t\t\t\t\tfor (let j = 0; j < Config.operatorCount; j++) {\r\n\t\t\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\").replace(/\\$/g, j + \"\"));\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// PWM\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.pwm) {\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\t\t\tconst outputs: string[] = [];\r\n\t\t\t\t\t\t\t\t\tfor (let j = 0; j < Config.operatorCarrierCounts[instruments[channel].algorithm]; j++) {\r\n\t\t\t\t\t\t\t\t\t\toutputs.push(\"channel\" + channel + \"Operator\" + j + \"Scaled\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\").replace(\"/*channel\" + channel + \"Operator$Scaled*/\", outputs.join(\" + \")));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// NOISE\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = song.pitchChannelCount; channel < song.pitchChannelCount + song.drumChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (line.indexOf(\"// ALL\") != -1) {\r\n\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount + song.drumChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\tsynthSource.push(line.replace(/#/g, channel + \"\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(\"Missing channel type annotation for line: \" + line);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n\t\t\t\t\t\tfor (let j = Config.operatorCount - 1; j >= 0; j--) {\r\n\t\t\t\t\t\t\tfor (const operatorLine of Synth.operatorSourceTemplate) {\r\n\t\t\t\t\t\t\t\tfor (let channel = 0; channel < song.pitchChannelCount; channel++) {\r\n\t\t\t\t\t\t\t\t\tif (instruments[channel].type == InstrumentType.fm) {\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif (operatorLine.indexOf(\"/* + channel#Operator@Scaled*/\") != -1) {\r\n\t\t\t\t\t\t\t\t\t\t\tlet modulators = \"\";\r\n\t\t\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of Config.operatorModulatedBy[instruments[channel].algorithm][j]) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tmodulators += \" + channel\" + channel + \"Operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tconst feedbackIndices: ReadonlyArray<number> = Config.operatorFeedbackIndices[instruments[channel].feedbackType][j];\r\n\t\t\t\t\t\t\t\t\t\t\tif (feedbackIndices.length > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tmodulators += \" + channel\" + channel + \"FeedbackMult * (\";\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst feedbacks: string[] = [];\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor (const modulatorNumber of feedbackIndices) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfeedbacks.push(\"channel\" + channel + \"Operator\" + (modulatorNumber - 1) + \"Output\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\tmodulators += feedbacks.join(\" + \") + \")\";\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/#/g, channel + \"\").replace(/\\$/g, j + \"\").replace(\"/* + channel\" + channel + \"Operator@Scaled*/\", modulators));\r\n\t\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t\tsynthSource.push(operatorLine.replace(/#/g, channel + \"\").replace(/\\$/g, j + \"\"));\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsynthSource.push(line);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//console.log(synthSource.join(\"\\n\"));\r\n\t\t\t\t\r\n\t\t\t\tSynth.generatedSynthesizers[fingerprint] = new Function(\"synth\", \"song\", \"dataLeft\", \"dataRight\", \"bufferLength\", \"bufferIndex\", \"samplesPerTick\", synthSource.join(\"\\n\"));\r\n\t\t\t}\r\n\t\t\treturn Synth.generatedSynthesizers[fingerprint];\r\n\t\t}\r\n\r\n\t\tprivate static synthSourceTemplate: string[] = (`\r\n\t\t\tvar sampleTime = 1.0 / synth.samplesPerSecond;\r\n\t\t\tvar effectYMult = +synth.effectYMult;\r\n\t\t\tvar limitDecay = +synth.limitDecay;\r\n\t\t\tvar volume = +synth.volume;\r\n\t\t\tvar delayLineLeft = synth.delayLineLeft;\r\n\t\t\tvar delayLineRight = synth.delayLineRight;\r\n\t\t\tvar reverb = Math.pow(song.reverb / beepbox.Config.reverbRange, 0.667) * 0.425;\r\n\t\t\tvar blend = Math.pow(song.blend / beepbox.Config.blendRange, 0.667) * 0.425;\r\n\t\t\tvar mix = song.mix;\r\n\t\t\tvar muff = Math.pow(song.muff / beepbox.Config.muffRange, 0.667) * 0.425;\r\n\t\t\tvar detune = song.detune;\r\n\t\t\tvar riff = Math.pow(song.riff / beepbox.Config.riffRange, 0.667) * 0.425; \r\n\t\t\tvar sineWave = beepbox.Config.sineWave;\r\n\t\t\t\r\n\t\t\t// Initialize instruments based on current pattern.\r\n\t\t\tvar instrumentChannel# = song.getPatternInstrument(#, synth.bar); // ALL\r\n\t\t\tvar instrument# = song.channels[#].instruments[instrumentChannel#]; // ALL\r\n\t\t\tvar channel#Wave = (mix <= 1) ? beepbox.Config.waves[instrument#.wave] : beepbox.Config.wavesMixC[instrument#.wave]; // CHIP\r\n\t\t\tvar channel#Wave = beepbox.Config.getDrumWave(instrument#.wave); // NOISE\r\n\t\t\tvar channel#WaveLength = channel#Wave.length; // CHIP\r\n\t\t\tvar channel#Wave = beepbox.Config.pwmwaves[instrument#.wave]; // PWM\r\n\t\t\tvar channel#WaveLength = channel#Wave.length; // PWM\r\n\t\t\tvar channel#FilterBase = (song.mix == 2) ? Math.pow(2 - (blend * 2) + (muff * 2), -beepbox.Config.filterBases[instrument#.filter]) : Math.pow(2, -beepbox.Config.filterBases[instrument#.filter] + (blend * 4) - (muff * 4)); // CHIP\r\n\t\t\tvar channel#TremoloScale = beepbox.Config.effectTremolos[instrument#.effect]; // PITCH\r\n\t\t\t\r\n\t\t\twhile (bufferIndex < bufferLength) {\r\n\t\t\t\t\r\n\t\t\t\tvar samples;\r\n\t\t\t\tvar samplesLeftInBuffer = bufferLength - bufferIndex;\r\n\t\t\t\tif (synth.arpSampleCountdown <= samplesLeftInBuffer) {\r\n\t\t\t\t\tsamples = synth.arpSampleCountdown;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsamples = samplesLeftInBuffer;\r\n\t\t\t\t}\r\n\t\t\t\tsynth.arpSampleCountdown -= samples;\r\n\t\t\t\t\r\n\t\t\t\tvar time = synth.part + synth.beat * song.partsPerBeat;\r\n\t\t\t\t\r\n\t\t\t\tbeepbox.Synth.computeChannelInstrument(synth, song, #, time, sampleTime, samplesPerTick, samples); // ALL\r\n\t\t\t\tvar synthChannel# = synth.channels[#]; // ALL\r\n\t\t\t\t\r\n\t\t\t\tvar channel#ChorusA = Math.pow(2.0, (beepbox.Config.chorusOffsets[instrument#.chorus] + beepbox.Config.chorusIntervals[instrument#.chorus] + beepbox.Config.octoffValues[instrument#.octoff] + (detune / 24) * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1)) / 12.0); // CHIP\r\n\t\t\t\tvar channel#ChorusB = Math.pow(2.0, (beepbox.Config.chorusOffsets[instrument#.chorus] - beepbox.Config.chorusIntervals[instrument#.chorus] + beepbox.Config.octoffValues[instrument#.octoff] + (detune / 24) * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1)) / 12.0); // CHIP\r\n\t\t\t\tvar channel#ChorusSign = synthChannel#.harmonyVolumeMult * (beepbox.Config.chorusSigns[instrument#.chorus]); // CHIP\r\n\t\t\t\tchannel#ChorusB *= synthChannel#.harmonyMult; // CHIP\r\n\t\t\t\tvar channel#ChorusDeltaRatio = channel#ChorusB / channel#ChorusA * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1); // CHIP\r\n\t\t\t\t\r\n\t\t\t\tvar channel#PhaseDelta = synthChannel#.phaseDeltas[0] * channel#ChorusA * ((riff * beepbox.Config.chorusRiffApp[instrument#.chorus]) + 1); // CHIP\r\n\t\t\t\tvar channel#PhaseDelta = synthChannel#.phaseDeltas[0] / 32768.0; // NOISE\r\n\t\t\t\tvar channel#PhaseDeltaScale = synthChannel#.phaseDeltaScale; // ALL\r\n\t\t\t\tvar channel#Volume = synthChannel#.volumeStarts[0]; // CHIP\r\n\t\t\t\tvar channel#Volume = synthChannel#.volumeStarts[0]; // NOISE\r\n\t\t\t\tvar channel#VolumeLeft = synthChannel#.volumeLeft[0]; // ALL\r\n\t\t\t\tvar channel#VolumeRight = synthChannel#.volumeRight[0]; // ALL\r\n\t\t\t\tvar channel#VolumeDelta = synthChannel#.volumeDeltas[0]; // CHIP\r\n\t\t\t\tvar channel#VolumeDelta = synthChannel#.volumeDeltas[0]; // NOISE\r\n\t\t\t\tvar channel#Filter = synthChannel#.filter * channel#FilterBase; // CHIP\r\n\t\t\t\tvar channel#Filter = synthChannel#.filter; // NOISE\r\n\t\t\t\tvar channel#FilterScale = synthChannel#.filterScale; // CHIP\r\n\t\t\t\tvar channel#VibratoScale = synthChannel#.vibratoScale; // PITCH\r\n\t\t\t\t\r\n\t\t\t\tvar effectY     = Math.sin(synth.effectPhase);\r\n\t\t\t\tvar prevEffectY = Math.sin(synth.effectPhase - synth.effectAngle);\r\n\t\t\t\t\r\n\t\t\t\tvar channel#PhaseA = synth.channels[#].phases[0] % 1; // CHIP\r\n\t\t\t\tvar channel#PhaseB = synth.channels[#].phases[1] % 1; // CHIP\r\n\t\t\t\tvar channel#Phase  = synth.channels[#].phases[0] % 1; // NOISE\r\n\t\t\t\t\r\n\t\t\t\tvar channel#Operator$Phase       = ((synth.channels[#].phases[$] % 1) + ` + Synth.negativePhaseGuard + `) * ` + Config.sineWaveLength + `; // FM\r\n\t\t\t\tvar channel#Operator$PhaseDelta  = synthChannel#.phaseDeltas[$]; // FM\r\n\t\t\t\tvar channel#Operator$OutputMult  = synthChannel#.volumeStarts[$]; // FM\r\n\t\t\t\tvar channel#Operator$OutputDelta = synthChannel#.volumeDeltas[$]; // FM\r\n\t\t\t\tvar channel#Operator$Output      = synthChannel#.feedbackOutputs[$]; // FM\r\n\t\t\t\tvar channel#FeedbackMult         = synthChannel#.feedbackMult; // FM\r\n\t\t\t\tvar channel#FeedbackDelta        = synthChannel#.feedbackDelta; // FM\r\n\t\t\t\t\r\n\t\t\t\tvar channel#SampleLeft = +synth.channels[#].sampleLeft; // ALL\r\n\t\t\t\tvar channel#SampleRight = +synth.channels[#].sampleRight; // ALL\r\n\t\t\t\t\r\n\t\t\t\tvar delayPosLeft = 0|synth.delayPosLeft;\r\n\t\t\t\tvar delayFeedback0Left = +synth.delayFeedback0Left;\r\n\t\t\t\tvar delayFeedback1Left = +synth.delayFeedback1Left;\r\n\t\t\t\tvar delayFeedback2Left = +synth.delayFeedback2Left;\r\n\t\t\t\tvar delayFeedback3Left = +synth.delayFeedback3Left;\r\n\t\t\t\tvar delayPosRight = 0|synth.delayPosRight;\r\n\t\t\t\tvar delayFeedback0Right = +synth.delayFeedback0Right;\r\n\t\t\t\tvar delayFeedback1Right = +synth.delayFeedback1Right;\r\n\t\t\t\tvar delayFeedback2Right = +synth.delayFeedback2Right;\r\n\t\t\t\tvar delayFeedback3Right = +synth.delayFeedback3Right;\r\n\t\t\t\tvar limit = +synth.limit;\r\n\t\t\t\t\r\n\t\t\t\twhile (samples) {\r\n\t\t\t\t\tvar channel#Vibrato = 1.0 + channel#VibratoScale * effectY; // PITCH\r\n\t\t\t\t\tvar channel#Tremolo = 1.0 + channel#TremoloScale * (effectY - 1.0); // PITCH\r\n\t\t\t\t\tvar temp = effectY;\r\n\t\t\t\t\teffectY = effectYMult * effectY - prevEffectY;\r\n\t\t\t\t\tprevEffectY = temp;\r\n\t\t\t\t\t\r\n\t\t\t\t\tchannel#SampleLeft += ((channel#Wave[0|(channel#PhaseA * channel#WaveLength)] + channel#Wave[0|(channel#PhaseB * channel#WaveLength)] * channel#ChorusSign) * channel#Volume * channel#Tremolo - channel#SampleLeft) * channel#Filter * channel#VolumeLeft; // CHIP \r\n\t\t\t\t\tchannel#SampleLeft += (channel#Wave[0|(channel#Phase * 32768.0)] * channel#Volume - channel#SampleLeft) * channel#Filter * channel#VolumeLeft; // NOISE\r\n\t\t\t\t\tchannel#SampleRight += ((channel#Wave[0|(channel#PhaseA * channel#WaveLength)] + channel#Wave[0|(channel#PhaseB * channel#WaveLength)] * channel#ChorusSign) * channel#Volume * channel#Tremolo - channel#SampleRight) * channel#Filter * channel#VolumeRight; // CHIP \r\n\t\t\t\t\tchannel#SampleRight += (channel#Wave[0|(channel#Phase * 32768.0)] * channel#Volume - channel#SampleRight) * channel#Filter * channel#VolumeRight; // NOISE\r\n\t\t\t\t\tchannel#Volume += channel#VolumeDelta; // CHIP\r\n\t\t\t\t\tchannel#Volume += channel#VolumeDelta; // NOISE\r\n\t\t\t\t\tchannel#PhaseA += channel#PhaseDelta * channel#Vibrato; // CHIP\r\n\t\t\t\t\tchannel#PhaseB += channel#PhaseDelta * channel#Vibrato * channel#ChorusDeltaRatio; // CHIP\r\n\t\t\t\t\tchannel#Phase += channel#PhaseDelta; // NOISE\r\n\t\t\t\t\tchannel#Filter *= channel#FilterScale; // CHIP\r\n\t\t\t\t\tchannel#PhaseA -= 0|channel#PhaseA; // CHIP\r\n\t\t\t\t\tchannel#PhaseB -= 0|channel#PhaseB; // CHIP\r\n\t\t\t\t\tchannel#Phase -= 0|channel#Phase; // NOISE\r\n\t\t\t\t\tchannel#PhaseDelta *= channel#PhaseDeltaScale; // CHIP\r\n\t\t\t\t\tchannel#PhaseDelta *= channel#PhaseDeltaScale; // NOISE\r\n\t\t\t\t\t\r\n\t\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\r\n\t\t\t\t\tchannel#SampleLeft = channel#Tremolo * (/*channel#Operator$Scaled*/) * channel#VolumeLeft; // CARRIER OUTPUTS\r\n\t\t\t\t\tchannel#SampleRight = channel#Tremolo * (/*channel#Operator$Scaled*/) * channel#VolumeRight; // CARRIER OUTPUTS\r\n\t\t\t\t\tchannel#FeedbackMult += channel#FeedbackDelta; // FM\r\n\t\t\t\t\tchannel#Operator$OutputMult += channel#Operator$OutputDelta; // FM\r\n\t\t\t\t\tchannel#Operator$Phase += channel#Operator$PhaseDelta * channel#Vibrato; // FM\r\n\t\t\t\t\tchannel#Operator$PhaseDelta *= channel#PhaseDeltaScale; // FM\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\r\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\r\n\t\t\t\t\tvar delayPos1Left = (delayPosLeft +  3041) & 0x3FFF;\r\n\t\t\t\t\tvar delayPos2Left = (delayPosLeft +  6426) & 0x3FFF;\r\n\t\t\t\t\tvar delayPos3Left = (delayPosLeft + 10907) & 0x3FFF;\r\n\t\t\t\t\tvar delaySampleLeft0 = (delayLineLeft[delayPosLeft]\r\n\t\t\t\t\t\t+ channel#SampleLeft // PITCH\r\n\t\t\t\t\t);\r\n\t\t\t\t\tvar delayPos1Right = (delayPosRight +  3041) & 0x3FFF;\r\n\t\t\t\t\tvar delayPos2Right = (delayPosRight +  6426) & 0x3FFF;\r\n\t\t\t\t\tvar delayPos3Right = (delayPosRight + 10907) & 0x3FFF;\r\n\t\t\t\t\tvar delaySampleRight0 = (delayLineRight[delayPosRight]\r\n\t\t\t\t\t\t+ channel#SampleRight // PITCH\r\n\t\t\t\t\t);\r\n\t\t\t\t\tvar delaySampleLeft1 = delayLineLeft[delayPos1Left];\r\n\t\t\t\t\tvar delaySampleLeft2 = delayLineLeft[delayPos2Left];\r\n\t\t\t\t\tvar delaySampleLeft3 = delayLineLeft[delayPos3Left];\r\n\t\t\t\t\tvar delayTemp0Left = -delaySampleLeft0 + delaySampleLeft1;\r\n\t\t\t\t\tvar delayTemp1Left = -delaySampleLeft0 - delaySampleLeft1;\r\n\t\t\t\t\tvar delayTemp2Left = -delaySampleLeft2 + delaySampleLeft3;\r\n\t\t\t\t\tvar delayTemp3Left = -delaySampleLeft2 - delaySampleLeft3;\r\n\t\t\t\t\tdelayFeedback0Left += ((delayTemp0Left + delayTemp2Left) * reverb - delayFeedback0Left) * 0.5;\r\n\t\t\t\t\tdelayFeedback1Left += ((delayTemp1Left + delayTemp3Left) * reverb - delayFeedback1Left) * 0.5;\r\n\t\t\t\t\tdelayFeedback2Left += ((delayTemp0Left - delayTemp2Left) * reverb - delayFeedback2Left) * 0.5;\r\n\t\t\t\t\tdelayFeedback3Left += ((delayTemp1Left - delayTemp3Left) * reverb - delayFeedback3Left) * 0.5;\r\n\t\t\t\t\tdelayLineLeft[delayPos1Left] = delayFeedback0Left;\r\n\t\t\t\t\tdelayLineLeft[delayPos2Left] = delayFeedback1Left;\r\n\t\t\t\t\tdelayLineLeft[delayPos3Left] = delayFeedback2Left;\r\n\t\t\t\t\tdelayLineLeft[delayPosLeft ] = delayFeedback3Left;\r\n\t\t\t\t\tdelayPosLeft = (delayPosLeft + 1) & 0x3FFF;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar delaySampleRight1 = delayLineRight[delayPos1Right];\r\n\t\t\t\t\tvar delaySampleRight2 = delayLineRight[delayPos2Right];\r\n\t\t\t\t\tvar delaySampleRight3 = delayLineRight[delayPos3Right];\r\n\t\t\t\t\tvar delayTemp0Right = -delaySampleRight0 + delaySampleRight1;\r\n\t\t\t\t\tvar delayTemp1Right = -delaySampleRight0 - delaySampleRight1;\r\n\t\t\t\t\tvar delayTemp2Right = -delaySampleRight2 + delaySampleRight3;\r\n\t\t\t\t\tvar delayTemp3Right = -delaySampleRight2 - delaySampleRight3;\r\n\t\t\t\t\tdelayFeedback0Right += ((delayTemp0Right + delayTemp2Right) * reverb - delayFeedback0Right) * 0.5;\r\n\t\t\t\t\tdelayFeedback1Right += ((delayTemp1Right + delayTemp3Right) * reverb - delayFeedback1Right) * 0.5;\r\n\t\t\t\t\tdelayFeedback2Right += ((delayTemp0Right - delayTemp2Right) * reverb - delayFeedback2Right) * 0.5;\r\n\t\t\t\t\tdelayFeedback3Right += ((delayTemp1Right - delayTemp3Right) * reverb - delayFeedback3Right) * 0.5;\r\n\t\t\t\t\tdelayLineRight[delayPos1Right] = delayFeedback0Right;\r\n\t\t\t\t\tdelayLineRight[delayPos2Right] = delayFeedback1Right;\r\n\t\t\t\t\tdelayLineRight[delayPos3Right] = delayFeedback2Right;\r\n\t\t\t\t\tdelayLineRight[delayPosRight ] = delayFeedback3Right;\r\n\t\t\t\t\tdelayPosRight = (delayPosRight + 1) & 0x3FFF;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar sampleLeft = delaySampleLeft0 + delaySampleLeft1 + delaySampleLeft2 + delaySampleLeft3\r\n\t\t\t\t\t\t+ channel#SampleLeft // NOISE\r\n\t\t\t\t\t;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar sampleRight = delaySampleRight0 + delaySampleRight1 + delaySampleRight2 + delaySampleRight3\r\n\t\t\t\t\t\t+ channel#SampleRight // NOISE\r\n\t\t\t\t\t;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar abs = sampleLeft < 0.0 ? -sampleLeft : sampleLeft;\r\n\t\t\t\t\tlimit -= limitDecay;\r\n\t\t\t\t\tif (limit < abs) limit = abs;\r\n\t\t\t\t\tsampleLeft /= limit * 0.75 + 0.25;\r\n\t\t\t\t\tsampleLeft *= volume;\r\n\t\t\t\t\tsampleLeft = sampleLeft;\r\n\t\t\t\t\tdataLeft[bufferIndex] = sampleLeft;\r\n\t\t\t\t\tsampleRight /= limit * 0.75 + 0.25;\r\n\t\t\t\t\tsampleRight *= volume;\r\n\t\t\t\t\tsampleRight = sampleRight;\r\n\t\t\t\t\tdataRight[bufferIndex] = sampleRight;\r\n\t\t\t\t\tbufferIndex++;\r\n\t\t\t\t\tsamples--;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsynthChannel#.phases[0] = channel#PhaseA; // CHIP\r\n\t\t\t\tsynthChannel#.phases[1] = channel#PhaseB; // CHIP\r\n\t\t\t\tsynthChannel#.phases[0] = channel#Phase; // NOISE\r\n\t\t\t\tsynthChannel#.phases[$] = channel#Operator$Phase / ` + Config.sineWaveLength + `; // FM\r\n\t\t\t\tsynthChannel#.feedbackOutputs[$] = channel#Operator$Output; // FM\r\n\t\t\t\tsynthChannel#.sampleLeft = channel#SampleLeft; // ALL\r\n\t\t\t\tsynthChannel#.sampleRight = channel#SampleRight; // ALL\r\n\t\t\t\t\r\n\t\t\t\tsynth.delayPosLeft = delayPosLeft;\r\n\t\t\t\tsynth.delayFeedback0Left = delayFeedback0Left;\r\n\t\t\t\tsynth.delayFeedback1Left = delayFeedback1Left;\r\n\t\t\t\tsynth.delayFeedback2Left = delayFeedback2Left;\r\n\t\t\t\tsynth.delayFeedback3Left = delayFeedback3Left;\r\n\t\t\t\tsynth.delayPosRight = delayPosRight;\r\n\t\t\t\tsynth.delayFeedback0Right = delayFeedback0Right;\r\n\t\t\t\tsynth.delayFeedback1Right = delayFeedback1Right;\r\n\t\t\t\tsynth.delayFeedback2Right = delayFeedback2Right;\r\n\t\t\t\tsynth.delayFeedback3Right = delayFeedback3Right;\r\n\t\t\t\tsynth.limit = limit;\r\n\t\t\t\t\r\n\t\t\t\tif (effectYMult * effectY - prevEffectY > prevEffectY) {\r\n\t\t\t\t\tsynth.effectPhase = Math.asin(effectY);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsynth.effectPhase = Math.PI - Math.asin(effectY);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (synth.arpSampleCountdown == 0) {\r\n\t\t\t\t\tsynth.arpeggio++;\r\n\t\t\t\t\tsynth.arpSampleCountdown = samplesPerTick;\r\n\t\t\t\t\tif (synth.arpeggio == 4) {\r\n\t\t\t\t\t\tsynth.arpeggio = 0;\r\n\t\t\t\t\t\tsynth.part++;\r\n\t\t\t\t\t\tif (synth.part == song.partsPerBeat) {\r\n\t\t\t\t\t\t\tsynth.part = 0;\r\n\t\t\t\t\t\t\tsynth.beat++;\r\n\t\t\t\t\t\t\tif (synth.beat == song.beatsPerBar) {\r\n\t\t\t\t\t\t\t\t// The bar ended, may need to regenerate synthesizer.\r\n\t\t\t\t\t\t\t\treturn bufferIndex;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Indicate that the buffer is finished generating.\r\n\t\t\treturn -1;\r\n\t\t`).split(\"\\n\");\r\n\t\t\r\n\t\tprivate static operatorSourceTemplate: string[] = (`\r\n\t\t\t\t\t\tvar channel#Operator$PhaseMix = channel#Operator$Phase/* + channel#Operator@Scaled*/;\r\n\t\t\t\t\t\tvar channel#Operator$PhaseInt = channel#Operator$PhaseMix|0;\r\n\t\t\t\t\t\tvar channel#Operator$Index    = channel#Operator$PhaseInt & ` + Config.sineWaveMask + `;\r\n\t\t\t\t\t\tvar channel#Operator$Sample   = sineWave[channel#Operator$Index];\r\n\t\t\t\t\t\tchannel#Operator$Output       = channel#Operator$Sample + (sineWave[channel#Operator$Index + 1] - channel#Operator$Sample) * (channel#Operator$PhaseMix - channel#Operator$PhaseInt);\r\n\t\t\t\t\t\tvar channel#Operator$Scaled   = channel#Operator$OutputMult * channel#Operator$Output;\r\n\t\t`).split(\"\\n\");\r\n\t\t\r\n\t\tprivate frequencyFromPitch(pitch: number): number {\r\n\t\t\treturn 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\r\n\t\t}\r\n\t\t\r\n\t\tprivate volumeConversion(noteVolume: number): number {\r\n\t\t\treturn Math.pow(noteVolume / 3.0, 1.5);\r\n\t\t}\r\n\t\t\r\n\t\tprivate getSamplesPerArpeggio(): number {\r\n\t\t\tif (this.song == null) return 0;\r\n\t\t\tconst beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n\t\t\tconst beatsPerSecond: number = beatsPerMinute / 60.0;\r\n\t\t\tconst partsPerSecond: number = beatsPerSecond * this.song.partsPerBeat;\r\n\t\t\tconst arpeggioPerSecond: number = partsPerSecond * 4.0;\r\n\t\t\treturn Math.floor(this.samplesPerSecond / arpeggioPerSecond);\r\n\t\t}\r\n\t}\r\n"],"names":[],"mappings":";;;IAiCiB,SAAA,qBAAqB,CAAC,KAAkB,EAAE,MAAc,EAAA;IACvE,IAAA,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC9C,QAAA,KAAK,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC;IACnB,KAAA;IACF,CAAC;IAED,SAAS,UAAU,CAAC,CAAS,EAAA;IAC5B,IAAA,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,SAAS,SAAS,CAAC,CAAS,EAAA;IAC3B,IAAA,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAAE,QAAA,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC9E,IAAA,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC;IAKD,SAAS,gBAAgB,CAAC,KAAkB,EAAA;IAC3C,IAAA,MAAM,eAAe,GAAW,KAAK,CAAC,MAAM,CAAC;IAC7C,IAAA,MAAM,QAAQ,GAAW,SAAS,CAAC,eAAe,CAAC,CAAC;QACpD,IAAI,QAAQ,GAAG,EAAE;IAAE,QAAA,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;IACtF,IAAA,MAAM,UAAU,GAAW,EAAE,GAAG,QAAQ,CAAC;QACzC,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;IAEjD,QAAA,IAAI,CAAS,CAAC;YACd,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,KAAK,CAAC,CAAC,CAAC;YAC9C,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,KAAK,CAAC,CAAC,CAAC;YAC9C,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,KAAK,CAAC,CAAC,CAAC;YAC9C,CAAC,GAAG,CAAC,CAAC,CAAC,IAAc,CAAC,KAAK,CAAC,CAAC,GAAK,IAAI,KAAK,CAAC,CAAC,KAAK,UAAU,CAAC;YAC7D,IAAI,CAAC,GAAG,CAAC,EAAE;IACV,YAAA,IAAI,IAAI,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC5B,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACpB,YAAA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAChB,SAAA;IACD,KAAA;IACF,CAAC;IAoNK,SAAU,2BAA2B,CAAC,KAAkB,EAAA;IAC7D,IAAA,MAAM,eAAe,GAAW,KAAK,CAAC,MAAM,CAAC;IAC7C,IAAA,MAAM,WAAW,GAAW,SAAS,CAAC,eAAe,CAAC,CAAC;QACvD,IAAI,eAAe,GAAG,CAAC;IAAE,QAAA,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAGjF,IAAA,KAAK,IAAI,IAAI,GAAW,WAAW,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE;IAC3D,QAAA,MAAM,SAAS,GAAW,CAAC,IAAI,IAAI,CAAC;IACpC,QAAA,MAAM,YAAY,GAAW,SAAS,IAAI,CAAC,CAAC;IAC5C,QAAA,MAAM,MAAM,GAAW,SAAS,IAAI,CAAC,CAAC;YACtC,MAAM,gBAAgB,GAAW,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,CAAC;YACxD,MAAM,YAAY,GAAW,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YACxD,MAAM,YAAY,GAAW,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IACxD,QAAA,MAAM,oBAAoB,GAAW,GAAG,GAAG,YAAY,CAAC;IAExD,QAAA,KAAK,IAAI,UAAU,GAAW,CAAC,EAAE,UAAU,GAAG,eAAe,EAAE,UAAU,IAAI,MAAM,EAAE;gBACpF,MAAM,WAAW,GAAW,UAAU,CAAC;IACvC,YAAA,MAAM,SAAS,GAAW,WAAW,GAAG,YAAY,CAAC;IACrD,YAAA,MAAM,WAAW,GAAW,WAAW,GAAG,SAAS,CAAC;IACpD,YAAA,MAAM,SAAS,GAAW,WAAW,GAAG,YAAY,CAAC;IACrD,YAAA,MAAM,SAAS,GAAW,WAAW,GAAG,SAAS,CAAC;IAClD,YAAA,MAAM,UAAU,GAAW,KAAK,CAAC,WAAW,CAAC,CAAC;IAC9C,YAAA,MAAM,UAAU,GAAW,KAAK,CAAC,WAAW,CAAC,CAAC;IAC9C,YAAA,KAAK,CAAC,WAAW,CAAC,GAAG,UAAU,GAAG,UAAU,CAAC;IAC7C,YAAA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACtB,YAAA,KAAK,CAAC,WAAW,CAAC,GAAG,UAAU,GAAG,UAAU,CAAC;IAC7C,YAAA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACtB,IAAI,CAAC,GAAW,YAAY,CAAC;IAC7B,YAAA,IAAI,CAAC,GAAW,CAAC,YAAY,CAAC;gBAC9B,IAAI,KAAK,GAAW,GAAG,CAAC;gBACxB,IAAI,KAAK,GAAW,GAAG,CAAC;gBACxB,KAAK,IAAI,KAAK,GAAW,CAAC,EAAE,KAAK,GAAG,YAAY,EAAE,KAAK,EAAE,EAAE;IAC1D,gBAAA,MAAM,OAAO,GAAW,WAAW,GAAG,KAAK,CAAC;IAC5C,gBAAA,MAAM,OAAO,GAAW,WAAW,GAAG,KAAK,CAAC;IAC5C,gBAAA,MAAM,OAAO,GAAW,WAAW,GAAG,KAAK,CAAC;IAC5C,gBAAA,MAAM,OAAO,GAAW,SAAS,GAAK,KAAK,CAAC;IAC5C,gBAAA,MAAM,KAAK,GAAW,KAAK,CAAC,OAAO,CAAC,CAAC;IACrC,gBAAA,MAAM,KAAK,GAAW,KAAK,CAAC,OAAO,CAAC,CAAC;IACrC,gBAAA,MAAM,KAAK,GAAW,KAAK,CAAC,OAAO,CAAC,CAAC;IACrC,gBAAA,MAAM,KAAK,GAAW,KAAK,CAAC,OAAO,CAAC,CAAC;IACrC,gBAAA,MAAM,KAAK,GAAW,KAAK,GAAG,KAAK,CAAC;IACpC,gBAAA,MAAM,KAAK,GAAW,KAAK,GAAG,KAAK,CAAC;IACpC,gBAAA,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;IAC/B,gBAAA,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;oBAC/B,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;oBACvC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IACvC,gBAAA,MAAM,KAAK,GAAW,oBAAoB,GAAG,CAAC,GAAG,KAAK,CAAC;IACvD,gBAAA,MAAM,KAAK,GAAW,oBAAoB,GAAG,CAAC,GAAG,KAAK,CAAC;oBACvD,KAAK,GAAG,CAAC,CAAC;oBACV,KAAK,GAAG,CAAC,CAAC;oBACV,CAAC,GAAG,KAAK,CAAC;oBACV,CAAC,GAAG,KAAK,CAAC;IACV,aAAA;IACD,SAAA;IACD,KAAA;IAmCD,IAAA,KAAK,IAAI,KAAK,GAAW,CAAC,EAAE,KAAK,GAAG,eAAe,EAAE,KAAK,IAAI,CAAC,EAAE;IAChE,QAAA,MAAM,MAAM,GAAW,KAAK,GAAG,CAAC,CAAC;IACjC,QAAA,MAAM,MAAM,GAAW,KAAK,GAAG,CAAC,CAAC;IACjC,QAAA,MAAM,MAAM,GAAW,KAAK,GAAG,CAAC,CAAC;IACjC,QAAA,MAAM,KAAK,GAAW,KAAK,CAAC,KAAK,CAAE,CAAC;YACpC,MAAM,KAAK,GAAW,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACxC,QAAA,MAAM,KAAK,GAAW,KAAK,CAAC,MAAM,CAAC,CAAC;YACpC,MAAM,KAAK,GAAW,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACxC,QAAA,MAAM,KAAK,GAAW,KAAK,GAAG,KAAK,CAAC;IACpC,QAAA,MAAM,KAAK,GAAW,KAAK,GAAG,KAAK,CAAC;IACpC,QAAA,KAAK,CAAC,KAAK,CAAE,GAAG,KAAK,GAAG,KAAK,CAAC;IAC9B,QAAA,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;IAC9B,QAAA,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;IAC9B,QAAA,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC;IAC9B,KAAA;QAED,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACzB;;ICnYD;;;;;;;;;;;;;;;;;;;;IAoBE;UA4CW,MAAM,CAAA;QAmZV,OAAO,WAAW,CAAC,IAAmB,EAAA;YAC7C,IAAI,GAAG,GAAW,GAAG,CAAC;IACtB,QAAA,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE;IAAE,YAAA,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7D,QAAA,MAAM,OAAO,GAAW,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;IAC1C,QAAA,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE;IAAE,YAAA,IAAI,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC;IACjE,QAAA,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;SAC9B;QAED,OAAO,WAAW,CAAC,KAAa,EAAA;YAC/B,IAAI,IAAI,GAAwB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACzD,IAAI,IAAI,IAAI,IAAI,EAAE;IACjB,YAAA,IAAI,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;IAC/B,YAAA,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;gBAEhC,IAAI,KAAK,IAAI,CAAC,EAAE;oBAEf,IAAI,UAAU,GAAW,CAAC,CAAC;oBAC3B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;IACvC,oBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;IACvC,oBAAA,IAAI,SAAS,GAAW,UAAU,IAAI,CAAC,CAAC;wBACxC,IAAI,CAAC,CAAC,UAAU,GAAG,SAAS,IAAI,CAAC,KAAK,CAAC,EAAE;IACxC,wBAAA,SAAS,IAAI,CAAC,IAAI,EAAE,CAAC;IACrB,qBAAA;wBACD,UAAU,GAAG,SAAS,CAAC;IACvB,iBAAA;IACD,aAAA;qBAAM,IAAI,KAAK,IAAI,CAAC,EAAE;oBAEtB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;IACvC,oBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC;IACpC,iBAAA;IACD,aAAA;qBAAM,IAAI,KAAK,IAAI,CAAC,EAAE;oBAEtB,IAAI,UAAU,GAAW,CAAC,CAAC;oBAC3B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;IACvC,oBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;IACvC,oBAAA,IAAI,SAAS,GAAW,UAAU,IAAI,CAAC,CAAC;wBACxC,IAAI,CAAC,CAAC,UAAU,GAAG,SAAS,IAAI,CAAC,KAAK,CAAC,EAAE;IACxC,wBAAA,SAAS,IAAI,CAAC,IAAI,EAAE,CAAC;IACrB,qBAAA;wBACD,UAAU,GAAG,SAAS,CAAC;IACvB,iBAAA;IACD,aAAA;qBAAM,IAAI,KAAK,IAAI,CAAC,EAAE;oBAEtB,IAAI,UAAU,GAAW,CAAC,CAAC;oBAC3B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;IACvC,oBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;IACvC,oBAAA,IAAI,SAAS,GAAW,UAAU,IAAI,CAAC,CAAC;wBACxC,IAAI,CAAC,CAAC,UAAU,GAAG,SAAS,IAAI,CAAC,KAAK,CAAC,EAAE;IACxC,wBAAA,SAAS,IAAI,CAAC,IAAI,EAAE,CAAC;IACrB,qBAAA;wBACD,UAAU,GAAG,SAAS,CAAC;IACvB,iBAAA;IACD,aAAA;qBAAM,IAAI,KAAK,IAAI,CAAC,EAAE;oBAEtB,IAAI,UAAU,GAAW,CAAC,CAAC;oBAC3B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;IACvC,oBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;IACvC,oBAAA,IAAI,SAAS,GAAW,UAAU,IAAI,CAAC,CAAC;wBACxC,IAAI,CAAC,CAAC,UAAU,GAAG,SAAS,IAAI,CAAC,KAAK,CAAC,EAAE;IACxC,wBAAA,SAAS,IAAI,EAAE,IAAI,CAAC,CAAC;IACrB,qBAAA;wBACD,UAAU,GAAG,SAAS,CAAC;IACvB,iBAAA;IACD,aAAA;qBAAM,IAAI,KAAK,IAAI,CAAC,EAAE;IAEtB,gBAAA,MAAM,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAChD,gBAAA,MAAM,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAClD,2BAA2B,CAAC,IAAI,CAAC,CAAC;IAClC,gBAAA,qBAAqB,CAAC,IAAI,EAAE,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1D,aAAA;qBAAM,IAAI,KAAK,IAAI,CAAC,EAAE;IAEtB,gBAAA,MAAM,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/C,gBAAA,MAAM,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAClD,2BAA2B,CAAC,IAAI,CAAC,CAAC;IAClC,gBAAA,qBAAqB,CAAC,IAAI,EAAE,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1D,aAAA;qBAAM,IAAI,KAAK,IAAI,CAAC,EAAE;oBAEtB,IAAI,UAAU,GAAW,CAAC,CAAC;oBAC3B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;IACvC,oBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IACjD,oBAAA,IAAI,SAAS,GAAW,UAAU,IAAI,CAAC,CAAC;wBACxC,IAAI,CAAC,CAAC,UAAU,GAAG,SAAS,IAAI,CAAC,KAAK,CAAC,EAAE;IACxC,wBAAA,SAAS,IAAI,EAAE,IAAI,CAAC,CAAC;IACrB,qBAAA;wBACD,UAAU,GAAG,SAAS,CAAC;IACvB,iBAAA;IACD,aAAA;qBAAM,IAAI,KAAK,IAAI,CAAC,EAAE;oBAEtB,IAAI,UAAU,GAAW,CAAC,CAAC;oBAC3B,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;IACvC,oBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;IACvC,oBAAA,IAAI,SAAS,GAAW,UAAU,IAAI,CAAC,CAAC;wBACxC,IAAI,CAAC,CAAC,UAAU,GAAG,SAAS,IAAI,CAAC,KAAK,CAAC,EAAE;IACxC,wBAAA,SAAS,IAAI,EAAE,IAAI,CAAC,CAAC;IACrB,qBAAA;wBACD,UAAU,GAAG,SAAS,CAAC;IACvB,iBAAA;IACD,aAAA;qBAAM,IAAI,KAAK,IAAI,CAAC,EAAE;oBAEtB,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;IACvC,oBAAA,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC;IACpC,iBAAA;IA8BD,aAAA;IAAM,iBAAA;IACN,gBAAA,MAAM,IAAI,KAAK,CAAC,2BAA2B,GAAG,KAAK,CAAC,CAAC;IACrD,aAAA;IACD,SAAA;IAED,QAAA,OAAO,IAAI,CAAC;SACZ;IAEO,IAAA,OAAO,iBAAiB,CAAC,IAAkB,EAAE,SAAiB,EAAE,UAAkB,EAAE,QAAgB,EAAE,SAAiB,EAAE,WAAmB,EAAA;YACnJ,MAAM,eAAe,GAAW,EAAE,CAAC;IACnC,QAAA,MAAM,cAAc,GAAW,CAAC,IAAI,eAAe,CAAC;IACpD,QAAA,MAAM,QAAQ,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC;IACpD,QAAA,MAAM,SAAS,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;YACtD,MAAM,IAAI,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACjC,KAAK,IAAI,CAAC,GAAW,QAAQ,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;IAClD,YAAA,IAAI,SAAS,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,SAAS,GAAG,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,SAAS,CAAC,IAAI,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC;gBACrI,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc,EAAE,WAAW,CAAC,CAAC;IACvD,YAAA,MAAM,OAAO,GAAW,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;IACtD,YAAA,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;IACxC,YAAA,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;IAChD,SAAA;SACD;IAEO,IAAA,OAAO,gBAAgB,GAAA;YAC9B,MAAM,IAAI,GAAiB,IAAI,YAAY,CAAC,MAAM,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;IACvE,QAAA,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,cAAc,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC3D,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;IAC9D,SAAA;IACD,QAAA,OAAO,IAAI,CAAC;SACZ;;IAljBsB,MAAM,CAAA,MAAA,GAA2B,SAAS,CAAC;IACjE,IAAA,EAAC,IAAI,EAAE,SAAS,EAAa,QAAQ,EAAE,kBAAkB,EAAO,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,SAAS,EAAa,QAAQ,EAAE,kBAAkB,EAAO,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,WAAW,EAAW,QAAQ,EAAE,QAAQ,EAAiB,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,WAAW,EAAW,QAAQ,EAAE,eAAe,EAAU,KAAK,EAAE,CAAC,IAAI,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,UAAU,EAAY,QAAQ,EAAE,aAAa,EAAY,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,UAAU,EAAY,QAAQ,EAAE,OAAO,EAAkB,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,WAAW,EAAW,QAAQ,EAAE,QAAQ,EAAiB,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,WAAW,EAAW,QAAQ,EAAE,SAAS,EAAgB,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,iBAAiB,EAAI,QAAQ,EAAE,uBAAuB,EAAE,KAAK,EAAE,CAAC,IAAI,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,CAAC,EAAC;IAC1J,IAAA,EAAC,IAAI,EAAE,iBAAiB,EAAK,QAAQ,EAAE,uBAAuB,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAE,KAAK,EAAG,IAAI,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,QAAQ,EAAc,QAAQ,EAAE,YAAY,EAAa,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,QAAQ,EAAc,QAAQ,EAAE,WAAW,EAAc,KAAK,EAAE,CAAC,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,WAAW,EAAW,QAAQ,EAAE,WAAW,EAAc,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAC;IAC3J,IAAA,EAAC,IAAI,EAAE,YAAY,EAAU,QAAQ,EAAE,YAAY,EAAa,KAAK,EAAE,CAAC,IAAI,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAG,IAAI,EAAE,KAAK,EAAG,IAAI,EAAE,KAAK,CAAC,EAAC;IAC3J,CAAA,CAAC,CAAC;IACa,MAAA,CAAA,mBAAmB,GAA0B,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzF,MAAU,CAAA,UAAA,GAAiC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IACtG,MAAO,CAAA,OAAA,GAAiC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IACrG,MAAI,CAAA,IAAA,GAAyB,SAAS,CAAC;QAC7D,EAAC,IAAI,EAAE,GAAG,EAAG,UAAU,EAAG,IAAI,EAAE,SAAS,EAAE,EAAE,EAAC;QAC9C,EAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAC;QAC9C,EAAC,IAAI,EAAE,GAAG,EAAG,UAAU,EAAG,IAAI,EAAE,SAAS,EAAE,EAAE,EAAC;QAC9C,EAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAC;QAC9C,EAAC,IAAI,EAAE,GAAG,EAAG,UAAU,EAAG,IAAI,EAAE,SAAS,EAAE,EAAE,EAAC;QAC9C,EAAC,IAAI,EAAE,GAAG,EAAG,UAAU,EAAG,IAAI,EAAE,SAAS,EAAE,EAAE,EAAC;QAC9C,EAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAC;QAC9C,EAAC,IAAI,EAAE,GAAG,EAAG,UAAU,EAAG,IAAI,EAAE,SAAS,EAAE,EAAE,EAAC;QAC9C,EAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAC;QAC9C,EAAC,IAAI,EAAE,GAAG,EAAG,UAAU,EAAG,IAAI,EAAE,SAAS,EAAE,EAAE,EAAC;QAC9C,EAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAC;QAC9C,EAAC,IAAI,EAAE,GAAG,EAAG,UAAU,EAAG,IAAI,EAAE,SAAS,EAAE,EAAE,EAAC;IAC9C,CAAA,CAAC,CAAC;IACa,MAAQ,CAAA,QAAA,GAA0B,CAAC,gBAAgB,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;IAC7E,MAAe,CAAA,eAAA,GAA0B,CAAC,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAClH,MAAU,CAAA,UAAA,GAAW,EAAE,CAAC;IACxB,MAAW,CAAA,WAAA,GAAW,CAAC,CAAC;IACxB,MAAU,CAAA,UAAA,GAAW,CAAC,CAAC;IACvB,MAAS,CAAA,SAAA,GAAW,EAAE,CAAC;IACvB,MAAW,CAAA,WAAA,GAAW,EAAE,CAAC;IACzB,MAAS,CAAA,SAAA,GAAW,EAAE,CAAC;IACvB,MAAc,CAAA,cAAA,GAAW,CAAC,CAAC;IAC3B,MAAc,CAAA,cAAA,GAAW,EAAE,CAAC;IAC5B,MAAW,CAAA,WAAA,GAAW,CAAC,CAAC;IACxB,MAAW,CAAA,WAAA,GAAW,GAAG,CAAC;IAC1B,MAAqB,CAAA,qBAAA,GAAW,CAAC,CAAC;IAClC,MAAqB,CAAA,qBAAA,GAAW,EAAE,CAAC;IACnC,MAAwB,CAAA,wBAAA,GAAW,CAAC,CAAC;IACrC,MAAwB,CAAA,wBAAA,GAAW,EAAE,CAAC;IACtC,MAAgB,CAAA,gBAAA,GAAW,EAAE,CAAC;IAC9B,MAAS,CAAA,SAAA,GAAW,EAAE,CAAC;IACvB,MAAY,CAAA,YAAA,GAAW,CAAC,CAAC;IACzB,MAAS,CAAA,SAAA,GAA0B,CAAC,eAAe,EAAE,eAAe,EAAE,IAAI,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACpI,MAAU,CAAA,UAAA,GAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACvE,MAAA,CAAA,SAAS,GAA0B,CAAC,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAE,UAAU,EAAE,YAAY,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,cAAc,EAAE,YAAY,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,UAAU,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,aAAa,EAAE,UAAU,EAAE,gBAAgB,EAAE,kBAAkB,CAAC,CAAC;IACra,MAAA,CAAA,WAAW,GAA0B,CAAC,GAAG,EAAS,GAAG,EAAO,GAAG,EAAW,GAAG,EAAa,IAAI,EAAQ,GAAG,EAAW,GAAG,EAAa,GAAG,EAAM,IAAI,EAAO,GAAG,EAAO,GAAG,EAAU,GAAG,EAAa,GAAG,EAAW,GAAG,EAAI,IAAI,EAAM,GAAG,EAAK,GAAG,EAAW,GAAG,EAAY,GAAG,EAAS,GAAG,EAAgB,GAAG,EAAM,GAAG,EAAM,GAAG,EAAc,GAAG,EAAK,GAAG,EAAW,GAAG,EAAQ,GAAG,EAAY,GAAG,EAAS,GAAG,EAAkB,GAAG,CAAC,CAAC;IAC3Z,MAAS,CAAA,SAAA,GAA0B,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,kBAAkB,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAkC,CAAC;IACjL,MAAW,CAAA,WAAA,GAA0B,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAoB,CAAC;IAC7G,MAAe,CAAA,eAAA,GAA0B,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAkB,CAAC;IACpG,MAAmB,CAAA,mBAAA,GAA0B,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAoB,CAAC;IACnI,MAAc,CAAA,cAAA,GAA2B,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAuB,CAAC;IAE3H,MAAU,CAAA,UAAA,GAA+B,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAuB,CAAC;IACpI,MAAY,CAAA,YAAA,GAA0B,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC5G,MAAc,CAAA,cAAA,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC3F,MAAA,CAAA,WAAW,GAA0B,CAAC,MAAM,EAAE,eAAe,EAAE,gBAAgB,EAAE,cAAc,EAAE,aAAa,EAAE,cAAc,EAAE,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;IAClR,MAAA,CAAA,WAAW,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAClI,MAAA,CAAA,YAAY,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACvI,MAAA,CAAA,aAAa,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACrI,MAAA,CAAA,eAAe,GAA0B,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACpH,MAAW,CAAA,WAAA,GAA0B,CAAC,MAAM,EAAE,eAAe,EAAE,iBAAiB,EAAE,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAClK,MAAc,CAAA,cAAA,GAA0B,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACzF,MAAc,CAAA,cAAA,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IACzF,MAAA,CAAA,mBAAmB,GAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtE,MAAA,CAAA,WAAW,GAA0B,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,mBAAmB,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;IACrQ,MAAA,CAAA,eAAe,GAA0B,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC/I,MAAA,CAAA,aAAa,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACtI,MAAA,CAAA,aAAa,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACpJ,MAAW,CAAA,WAAA,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC7I,MAAA,CAAA,aAAa,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5I,MAAA,CAAA,gBAAgB,GAA2B,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACjL,MAAA,CAAA,WAAW,GAA0B,CAAC,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,WAAW,CAAC,CAAC;IAC5G,MAAA,CAAA,SAAS,GAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtD,MAAe,CAAA,eAAA,GAA0B,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,aAAa,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IACnK,MAAa,CAAA,aAAA,GAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnE,MAAA,CAAA,UAAU,GAA0B,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC/C,MAAA,CAAA,WAAW,GAA0B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,MAAW,CAAA,WAAA,GAA0B,CAAC,MAAM,EAAE,gBAAgB,EAAG,2BAA2B,EAAG,aAAa,EAAG,cAAc,EAAE,cAAc,EAAE,aAAa,EAAE,2BAA2B,EAAE,eAAe,CAAC,CAAC;IAC5M,MAAY,CAAA,YAAA,GAA0B,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC;IAC9F,MAAW,CAAA,WAAA,GAA0B,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;IAClI,MAAY,CAAA,YAAA,GAA0B,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IAC9F,MAAA,CAAA,aAAa,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IACvE,MAAU,CAAA,UAAA,GAA0B,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IAC1F,MAAa,CAAA,aAAA,GAAW,CAAC,CAAC;IAC1B,MAAA,CAAA,sBAAsB,GAA0B;QAC/D,WAAW;QACX,WAAW;QACX,WAAW;QACX,WAAW;QACX,SAAS;QACT,SAAS;QACT,WAAW;QACX,SAAS;QACT,WAAW;QACX,aAAa;QACb,SAAS;QACT,WAAW;QACX,SAAS;KACT,CAAC;IACc,MAAA,CAAA,kBAAkB,GAA0B,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,aAAa,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;IAC9M,MAAA,CAAA,mBAAmB,GAAwD;IAC1F,IAAA,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAM,EAAE,EAAG,EAAE,CAAC;IAC5B,IAAA,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAK,EAAE,EAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5B,IAAA,CAAC,CAAC,CAAC,CAAC,EAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAG,EAAE,CAAC;IAC5B,IAAA,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAK,CAAC,CAAC,CAAC,EAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5B,IAAA,CAAC,CAAC,CAAC,CAAC,EAAQ,CAAC,CAAC,CAAC,EAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC,CAAC,EAAQ,CAAC,CAAC,CAAC,EAAK,EAAE,EAAG,EAAE,CAAC;QAC5B,CAAC,EAAE,EAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAG,EAAE,CAAC;QAC5B,CAAC,EAAE,EAAS,CAAC,CAAC,CAAC,EAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5B,IAAA,CAAC,CAAC,CAAC,CAAC,EAAQ,CAAC,CAAC,CAAC,EAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5B,IAAA,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAG,EAAE,CAAC;QAC5B,CAAC,EAAE,EAAS,EAAE,EAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5B,IAAA,CAAC,CAAC,CAAC,CAAC,EAAQ,CAAC,CAAC,CAAC,EAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5B,IAAA,CAAC,EAAE,EAAS,EAAE,EAAM,EAAE,EAAG,EAAE,CAAC;KAC5B,CAAC;IACc,MAAA,CAAA,yBAAyB,GAAyC;IACjF,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACZ,IAAA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;KACZ,CAAC;IACc,MAAA,CAAA,qBAAqB,GAA0B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACvF,MAAA,CAAA,qBAAqB,GAAyC;IAC7E,IAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QACpB,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;IAC1B,IAAA,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;QACzB,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;IACxB,IAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACpB,IAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC;IACrB,IAAA,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC;IACrB,IAAA,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IACtB,IAAA,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;KACvB,CAAC;IACc,MAAoB,CAAA,oBAAA,GAAW,EAAE,CAAC;IAClC,MAAA,CAAA,sBAAsB,GAA0B,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACxJ,MAAA,CAAA,kBAAkB,GAA0B,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACpJ,MAAA,CAAA,mBAAmB,GAA6B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACtI,MAAA,CAAA,iBAAiB,GAA+B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAClI,MAAA,CAAA,sBAAsB,GAA0B,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACnI,MAAA,CAAA,qBAAqB,GAA0B,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,cAAc,EAAE,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IACvR,MAAoB,CAAA,oBAAA,GAAgC,4DAA0Z,CAAC;IAC/c,MAAA,CAAA,2BAA2B,GAA2B,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACjM,MAAA,CAAA,qBAAqB,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACxJ,MAAA,CAAA,wBAAwB,GAA2B,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC7L,MAAA,CAAA,qBAAqB,GAA0B;QAC9D,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,OAAO;QACP,OAAO;QACP,WAAW;QACX,WAAW;QACX,cAAc;QACd,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,SAAS;QACT,SAAS;QACT,SAAS;QACT,MAAM;QACN,MAAM;QACN,MAAM;QACN,MAAM;QACN,MAAM;QACN,MAAM;KACN,CAAC;IACc,MAAA,CAAA,iBAAiB,GAA0B;QAC1D,GAAG;QACH,GAAG;QACH,GAAG;QACH,GAAG;QACH,KAAK;QACL,KAAK;QACL,OAAO;QACP,OAAO;QACP,SAAS;QACT,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,SAAS;QACT,SAAS;QACT,SAAS;QACT,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;KACL,CAAC;IACc,MAAA,CAAA,uBAAuB,GAAwD;QAC9F,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;QACjB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;QACjB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACjB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;QAClB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClB,IAAA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IACnB,IAAA,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACnB,IAAA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;QACjB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACjB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACjB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClB,IAAA,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAG,EAAE,CAAG;QACrB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAG;QACrB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAG,EAAE,EAAG,CAAC,CAAC,CAAC,CAAE;QACrB,CAAC,EAAE,EAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAG;QACrB,CAAC,EAAE,EAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAG,CAAC,CAAC,CAAC,CAAE;QACrB,CAAC,EAAE,EAAG,EAAE,EAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAE;KACrB,CAAC;IACc,MAAqB,CAAA,qBAAA,GAA0B,CAAC,MAAM,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;IACrF,MAAsB,CAAA,sBAAA,GAA0B,SAA4D,CAAC;IAC7G,MAAA,CAAA,oBAAoB,GAA0B,CAAC,OAAO,CAAC,CAAC;IACxD,MAAmB,CAAA,mBAAA,GAA0B,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAE5E,MAAa,CAAA,aAAA,GAA0B,CAAC,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,mBAAmB,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,YAAY,EAAE,qBAAqB,EAAE,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;IAEnV,MAA2B,CAAA,2BAAA,GAAgB,SAAS,CAAC;IACrD,MAA2B,CAAA,2BAAA,GAAgB,SAAS,CAAC;IACrD,MAA6B,CAAA,6BAAA,GAAc,SAAS,CAAC;IACrD,MAA4B,CAAA,4BAAA,GAAe,SAAS,CAAC;IACrD,MAA4B,CAAA,4BAAA,GAAe,SAAS,CAAC;IACrD,MAA2B,CAAA,2BAAA,GAAgB,SAAS,CAAC;IACrD,MAA6B,CAAA,6BAAA,GAAc,SAAS,CAAC;IACrD,MAA6B,CAAA,6BAAA,GAAc,SAAS,CAAC;IACrD,MAA4B,CAAA,4BAAA,GAAe,SAAS,CAAC;IACrD,MAA2B,CAAA,2BAAA,GAAgB,SAAS,CAAC;IACrD,MAA8B,CAAA,8BAAA,GAAa,SAAS,CAAC;IACrD,MAA8B,CAAA,8BAAA,GAAa,SAAS,CAAC;IACrD,MAAgC,CAAA,gCAAA,GAAW,SAAS,CAAC;IACrD,MAAgC,CAAA,gCAAA,GAAW,SAAS,CAAC;IACrD,MAA+B,CAAA,+BAAA,GAAY,SAAS,CAAC;IACrD,MAA+B,CAAA,+BAAA,GAAY,SAAS,CAAC;IAErD,MAAwB,CAAA,wBAAA,GAAgB,SAAS,CAAC;IAClD,MAAwB,CAAA,wBAAA,GAAgB,SAAS,CAAC;IAClD,MAA0B,CAAA,0BAAA,GAAc,SAAS,CAAC;IAClD,MAAyB,CAAA,yBAAA,GAAe,SAAS,CAAC;IAClD,MAAyB,CAAA,yBAAA,GAAe,SAAS,CAAC;IAClD,MAAwB,CAAA,wBAAA,GAAgB,SAAS,CAAC;IAClD,MAA0B,CAAA,0BAAA,GAAc,SAAS,CAAC;IAClD,MAA0B,CAAA,0BAAA,GAAc,SAAS,CAAC;IAClD,MAAyB,CAAA,yBAAA,GAAe,SAAS,CAAC;IAClD,MAAwB,CAAA,wBAAA,GAAgB,SAAS,CAAC;IAClD,MAA2B,CAAA,2BAAA,GAAa,SAAS,CAAC;IAClD,MAA2B,CAAA,2BAAA,GAAa,SAAS,CAAC;IAClD,MAA6B,CAAA,6BAAA,GAAW,SAAS,CAAC;IAClD,MAA6B,CAAA,6BAAA,GAAW,SAAS,CAAC;IAClD,MAA4B,CAAA,4BAAA,GAAY,SAAS,CAAC;IAClD,MAA4B,CAAA,4BAAA,GAAY,SAAS,CAAC;IAElD,MAAqB,CAAA,qBAAA,GAA6B,CAAC,MAAM,CAAC,wBAAwB,EAAE,MAAM,CAAC,wBAAwB,EAAE,MAAM,CAAC,0BAA0B,EAAE,MAAM,CAAC,yBAAyB,EAAE,MAAM,CAAC,yBAAyB,EAAE,MAAM,CAAC,wBAAwB,EAAE,MAAM,CAAC,0BAA0B,EAAE,MAAM,CAAC,0BAA0B,EAAE,MAAM,CAAC,yBAAyB,EAAE,MAAM,CAAC,wBAAwB,EAAE,MAAM,CAAC,2BAA2B,EAAE,MAAM,CAAC,2BAA2B,CAAC,CAAC;IAC9c,MAAwB,CAAA,wBAAA,GAA0B,CAAC,MAAM,CAAC,2BAA2B,EAAE,MAAM,CAAC,2BAA2B,EAAE,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC,2BAA2B,EAAE,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC,2BAA2B,EAAE,MAAM,CAAC,8BAA8B,EAAE,MAAM,CAAC,8BAA8B,CAAC,CAAC;IAClf,MAAkB,CAAA,kBAAA,GAAgC,CAAC,MAAM,CAAC,wBAAwB,EAAE,MAAM,CAAC,wBAAwB,EAAE,MAAM,CAAC,0BAA0B,EAAE,MAAM,CAAC,yBAAyB,EAAE,MAAM,CAAC,yBAAyB,EAAE,MAAM,CAAC,wBAAwB,EAAE,MAAM,CAAC,0BAA0B,EAAE,MAAM,CAAC,0BAA0B,EAAE,MAAM,CAAC,yBAAyB,EAAE,MAAM,CAAC,wBAAwB,EAAE,MAAM,CAAC,2BAA2B,EAAE,MAAM,CAAC,2BAA2B,CAAC,CAAC;IAC9c,MAAqB,CAAA,qBAAA,GAA6B,CAAC,MAAM,CAAC,2BAA2B,EAAE,MAAM,CAAC,2BAA2B,EAAE,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC,2BAA2B,EAAE,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC,2BAA2B,EAAE,MAAM,CAAC,8BAA8B,EAAE,MAAM,CAAC,8BAA8B,CAAC,CAAC;IAClf,MAAA,CAAA,oBAAoB,GAA6B,CAAC,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC,4BAA4B,CAAC,CAAC;IACxM,MAAA,CAAA,uBAAuB,GAA0B,CAAC,MAAM,CAAC,gCAAgC,EAAE,MAAM,CAAC,gCAAgC,EAAE,MAAM,CAAC,+BAA+B,EAAE,MAAM,CAAC,+BAA+B,CAAC,CAAC;IACpN,MAAA,CAAA,iBAAiB,GAAgC,CAAC,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,6BAA6B,EAAE,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC,4BAA4B,CAAC,CAAC;IACxM,MAAA,CAAA,oBAAoB,GAA6B,CAAC,MAAM,CAAC,gCAAgC,EAAE,MAAM,CAAC,gCAAgC,EAAE,MAAM,CAAC,+BAA+B,EAAE,MAAM,CAAC,+BAA+B,CAAC,CAAC;IAEpN,MAAA,CAAA,qBAAqB,GAA0B,CAAC,cAAc,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,eAAe,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;IACvJ,MAAoB,CAAA,oBAAA,GAA0B,CAAC,cAAc,EAAE,eAAe,EAAE,gBAAgB,CAAC,CAAC;IAClG,MAAA,CAAA,sBAAsB,GAAa;QAClD,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;KACJ,CAAC;IACc,MAAA,CAAA,oBAAoB,GAAa;QAChD,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,IAAI;KACJ,CAAC;IACc,MAAY,CAAA,YAAA,GAAW,CAAC,CAAC;IACzB,MAAU,CAAA,UAAA,GAAW,EAAE,CAAC;IACxB,MAAQ,CAAA,QAAA,GAAW,EAAE,CAAC;IACtB,MAAoB,CAAA,oBAAA,GAAW,CAAC,CAAC;IACjC,MAAoB,CAAA,oBAAA,GAAW,EAAE,CAAC;IAClC,MAAmB,CAAA,mBAAA,GAAW,CAAC,CAAC;IAChC,MAAmB,CAAA,mBAAA,GAAW,CAAC,CAAC;IAChC,MAAA,CAAA,KAAK,GAAgC;IACpD,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,CAAC,CAAC;QAChX,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IAC/B,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IACnE,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,GAAG,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,IAAI,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,EAAE,CAAC,GAAG,GAAC,IAAI,CAAC,CAAC;QAC1X,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC7G,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IAC3G,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACpD,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IACzX,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IAClrC,IAAA,MAAM,CA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,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC/F,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IACjnB,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC;QAC1D,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QACjmB,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAA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C,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IACzX,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IAClrC,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IAC/E,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IACtP,IAAA,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QACvG,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,GAAG,IAAI,EAAE,GAAG,GAAG,IAAI,EAAE,GAAG,GAAG,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACnE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,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I,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QACjmB,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,G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"}